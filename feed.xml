<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Kevin.Gimbel.Dev/Ops</title>
  <subtitle>DevOps, SRE, Kubernetes, and ...more?</subtitle>
  <link href="https://kevin.gimbel.dev/feed.xml" rel="self" />
  <link href="https://kevin.gimbel.dev/" />
  <updated>Z</updated>
  <id>https://kevin.gimbel.dev/</id>
  <author>
    <name>Kevin</name>
    <email>kevin@gimbel.dev</email>
  </author>
  
  <entry>
    <title type="html">Learning Haskell: Caesar cipher</title>
    <link href="https://kevin.gimbel.dev/blog/2024/06/learning-haskell-caesar-cipher/" />
    <id>https://kevingimbel.de/blog/2024/06/learning-haskell-caesar-cipher/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;In my quest to learn Haskell I&amp;#8217;ve been reading through Learn You A Haskell, a great book on understanding Haskell. BEFORE WE START: I do not know much about Haskell, I&amp;#8217;ve started learning it literally last week. So please do correct me if I make mistakes in this post 🙂 While reading about function signatures [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;In my quest to learn Haskell I&amp;#8217;ve been reading through &lt;a href=&quot;https://learnyouahaskell.com/types-and-typeclasses#believe-the-type&quot;&gt;Learn You A Haskell,&lt;/a&gt; a great book on understanding Haskell.&lt;/p&gt;



&lt;p class=&quot;has-contrast-color has-base-2-background-color has-text-color has-background has-link-color wp-elements-c1316fffbf93842266c2e529b0e7613d&quot;&gt;&lt;strong&gt;BEFORE WE START:&lt;/strong&gt; I do not know much about Haskell, I&amp;#8217;ve started learning it literally last week. So please do correct me if I make mistakes in this post 🙂 &lt;/p&gt;



&lt;p&gt;While reading about function signatures and recursion yesterday it came to my mind that a &lt;a href=&quot;https://en.wikipedia.org/wiki/Caesar_cipher&quot;&gt;Caesar cipher&lt;/a&gt; should be quite easy to implement in Haskell &amp;#8211; and surprise, it is!&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;haskell&quot; class=&quot;language-haskell&quot;&gt;shiftLetter :: Char -&amp;gt; Int -&amp;gt; Char
shiftLetter &#39; &#39; _ = &#39; &#39;
shiftLetter letter 0 = letter
shiftLetter letter offset = shiftLetter (succ letter) (offset - 1)

encode :: [Char] -&amp;gt; Int -&amp;gt; [Char]
encode input offset = [ shiftLetter x offset | x &amp;lt;- input ]
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The syntax looks super weird, especially if you&amp;#8217;ve never seen Haskell, but it actually makes sense.&lt;/p&gt;



&lt;p&gt;First we have function called &lt;code&gt;shiftLetter&lt;/code&gt; which takes a &lt;code&gt;Char&lt;/code&gt; and &lt;code&gt;Int&lt;/code&gt; as parameters, and returns a &lt;code&gt;Char&lt;/code&gt;. In Haskell this is defined like so&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;haskell&quot; class=&quot;language-haskell&quot;&gt;shiftLetter :: Char -&amp;gt; Int -&amp;gt; Char&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Then right below is the actual function body &amp;#8211; or bodies in our case! In Haskell, multiple function bodies can be defined depending on input variables. &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;The first line matches the case we get a space as input in which case a space is returned. &lt;/li&gt;



&lt;li&gt;The second matches the case where we receive an offset of 0, in which case the letter is returned. &lt;/li&gt;



&lt;li&gt;The third is the recursive function which takes a letter and offset, and calls the shiftLetter function with the next letter (&lt;code&gt;succ letter&lt;/code&gt;) and &lt;code&gt;offset - 1&lt;/code&gt;.&lt;/li&gt;



&lt;li&gt;&lt;code&gt;succ&lt;/code&gt; is a Haskell build-in function which returns the successor of something. Since Haskell is aware of how the alphabet looks, we can do &lt;code&gt;succ &#39;A&#39;&lt;/code&gt; to get &lt;code&gt;&#39;B&#39;&lt;/code&gt;!&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;This function runs recursively until we reach the case where &lt;code&gt;offset = 0&lt;/code&gt; and then we just return the letter.&lt;/p&gt;



&lt;p&gt;To illustrate this more, take the following example which shows each execution step&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;shiftLetter &#39;A&#39; 2

# how the function is called
shiftLetter (succ &#39;A&#39;) (2 - 1) -&amp;gt; shiftLetter B 1
shiftLetter (succ &#39;B&#39;) (1 - 1) -&amp;gt; shiftLetter C 0

-&amp;gt; return C&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;With a function to shift single letter all we need is to wrap it in some form of recursion. In Haskell Strings are just lists of Chars, so we can use list comprehension function on strings!&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;haskell&quot; class=&quot;language-haskell&quot;&gt;encode :: [Char] -&amp;gt; Int -&amp;gt; [Char]
encode input offset = [ shiftLetter x offset | x &amp;lt;- input ]&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The weird looking function body is a &lt;a href=&quot;https://learnyouahaskell.com/starting-out#im-a-list-comprehension&quot;&gt;list comprehension&lt;/a&gt; with a syntax of &lt;code&gt;[ function | list-input ]&lt;/code&gt; &amp;#8211; we basically do the following:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;take every single char out of &lt;code&gt;[Char]&lt;/code&gt; and assign it to &lt;code&gt;x&lt;/code&gt; (&lt;code&gt;x &amp;lt;- input&lt;/code&gt;)&lt;/li&gt;



&lt;li&gt;calculate the cipher (&lt;code&gt;shiftLetter x offset&lt;/code&gt;) for each letter&lt;/li&gt;



&lt;li&gt;return the ciphered text as a [Char], which is just a String in Haskell.&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I was surprised that the code worked exactly like I wanted on first try. I thought about how it could be implemented, wrote it down, executed it and it just worked. I&amp;#8217;ve rarely had this in any other language!&lt;/p&gt;



&lt;p&gt;Sadly, I do not have any use case to try Haskell somewhere yet, but I&amp;#8217;m enjoying learning it a &lt;strong&gt;LOT&lt;/strong&gt;. I&amp;#8217;ll now think about how to implement a decode function.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Update&lt;/h2&gt;



&lt;p&gt;I implemented the decode function with some slight changes to the signatures.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;haskell&quot; class=&quot;language-haskell&quot;&gt;shiftLetter :: Char -&amp;gt; Int -&amp;gt; Bool -&amp;gt; Char&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The &lt;code&gt;Bool&lt;/code&gt; is used to determine if we want to encode (True) or decode (False).&lt;/p&gt;



&lt;p&gt;The body can than match the two possible values and decide if we want to shift the letter using &lt;code&gt;succ&lt;/code&gt; or &lt;code&gt;pred&lt;/code&gt; &amp;#8211; the only difference between encoding and decoding.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;haskell&quot; class=&quot;language-haskell&quot;&gt;shiftLetter :: Char -&amp;gt; Int -&amp;gt; Bool -&amp;gt; Char
shiftLetter &#39; &#39; _ _ = &#39; &#39;
shiftLetter letter 0 _ = letter
shiftLetter letter offset True = shiftLetter (succ letter) (offset - 1) True
shiftLetter letter offset False = shiftLetter (pred letter) (offset - 1) False&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Update 2&lt;/h2&gt;



&lt;p&gt;I extracted the code into a module and published it on my GitHub! &lt;a href=&quot;https://github.com/KevinGimbel/caesar-cipher/tree/main&quot;&gt;https://github.com/KevinGimbel/caesar-cipher&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;I&amp;#8217;ve also slightly updated it to avoid going out of bounds of the English alphabet. Instead of using &lt;code&gt;succ&lt;/code&gt; and &lt;code&gt;pred&lt;/code&gt; directly, they&amp;#8217;re now wrapped in functions to handle the beginning and end of the alphabet.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;haskell&quot; class=&quot;language-haskell&quot;&gt;-- get next letter, if we reach Z the next is A
succLetter :: Char -&gt; Char
succLetter &#39;z&#39; = &#39;a&#39;
succLetter &#39;Z&#39; = &#39;A&#39;
succLetter x = succ x

-- get prev letter, if we reach A the previous is Z again
predLetter :: Char -&gt; Char
predLetter &#39;a&#39; = &#39;z&#39;
predLetter &#39;A&#39; = &#39;Z&#39;
predLetter x = pred x&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Where other languages would require some &lt;code&gt;ifs&lt;/code&gt; and &lt;code&gt;elses&lt;/code&gt;, Haskell can &amp;#8220;just&amp;#8221; work with parameter matching of the functions.&lt;/p&gt;



&lt;p&gt;&lt;code&gt;succLetter z&lt;/code&gt; will return &amp;#8220;a&amp;#8221;, &lt;code&gt;succLetter f&lt;/code&gt; will return &amp;#8220;g&amp;#8221;, and so on. The same applies to &lt;code&gt;predLetter&lt;/code&gt; which will return &amp;#8220;z&amp;#8221; when &amp;#8220;a&amp;#8221; is given.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Caesar_cipher&quot;&gt;https://en.wikipedia.org/wiki/Caesar_cipher&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://github.com/KevinGimbel/learn-you-a-haskell/blob/main/starting-out/baby.hs#L111-L125&quot;&gt;https://github.com/KevinGimbel/learn-you-a-haskell/blob/main/starting-out/baby.hs#L111-L125&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://github.com/KevinGimbel/learn-you-a-haskell/blob/main/01_fun/caesar-cipher.hs&quot;&gt;https://github.com/KevinGimbel/learn-you-a-haskell/blob/main/01_fun/caesar-cipher.hs&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://learnyouahaskell.com/starting-out#im-a-list-comprehension&quot;&gt;https://learnyouahaskell.com/starting-out#im-a-list-comprehension&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">AI now means Apple Intelligence</title>
    <link href="https://kevin.gimbel.dev/blog/2024/06/ai-now-means-apple-intelligence/" />
    <id>https://kevingimbel.de/blog/2024/06/ai-now-means-apple-intelligence/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Yesterday (10. June 2024) Apple revealed its new features for the next releases of iOS, MacOS, et all. and with no big surprise the reveal included the addition of AI tools into the operating system and Siri. While I&amp;#8217;m very sceptical of AI build into the OS, I must say Apple seems to be on [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;Yesterday (&lt;em&gt;10. June 2024&lt;/em&gt;) Apple revealed its new features for the next releases of iOS, MacOS, et all. and with no big surprise the reveal included&lt;a href=&quot;https://www.apple.com/apple-intelligence/&quot;&gt; the addition of AI tools into the operating system and Siri&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;While I&amp;#8217;m very sceptical of AI build into the OS, I must say Apple seems to be on the right track again, focusing on privacy. &lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;Apple&amp;nbsp;Intelligence is designed to protect your privacy at every step. It’s integrated into the core of your iPhone, iPad, and Mac through on-device processing. So it’s aware of your personal information without collecting your personal information.&amp;nbsp;&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;&lt;em&gt;on-device processing&lt;/em&gt; is powered by the A17 chips in iPhone 15  and iPads &amp;amp; MacBooks with M1 or later chips. &lt;/p&gt;



&lt;p&gt;But not everything can be processed on device, and for these requests information &amp;#8211; &amp;#8220;&lt;em&gt;only relevant information&lt;/em&gt;&amp;#8221; is sent to a Private Compute Cloud running on Apple Sillicon.&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;When you make a request, Apple Intelligence analyses whether it can be processed on device. If it needs greater computational capacity, it can draw on Private Cloud Compute, and send only the data that&amp;#8217;s relevant to your task to be processed on Apple Silicon servers.&lt;/p&gt;



&lt;p&gt;Your data is never stored or made accessible to Apple. It&amp;#8217;s used exclusively to fulfil your request.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;Given that Apple has shown interest in securing user data in the past I have a lot more confidence in this solution that the &lt;s&gt;Total&lt;/s&gt; Recall feature of Microsoft 11.&lt;/p&gt;



&lt;p&gt;Speaking of Microsoft, Apple is including ChatGPT into its writing AI tools.&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;With ChatGPT from OpenAI integrated into Siri and Writing Tools, you get even more expertise when it might be helpful for you — no need to jump between tools. Siri can tap into ChatGPT for certain requests, including questions about photos or documents.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;But again, with a focus on privacy they give the user control of when information is sent to ChatGPT.&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;You control when ChatGPT is used and will be asked before any of your information is shared.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;Integration with ChatGPT will be free &amp;#8211; including the newest 4o model, and so far there has been no mention of pricing for the other AI features &amp;#8211; they&amp;#8217;ll most likely be part of the package you get when buying Apple hardware.&lt;/p&gt;



&lt;p&gt;&lt;a href=&quot;https://simonwillison.net/2024/Jun/10/apple-intelligence/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Simon Willison has longer article covering more details from the presentation&lt;/a&gt;, and raises an important question:&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;Siri will be able to both access data on your device and trigger actions based on your instructions.&lt;/p&gt;



&lt;p&gt;This is the exact feature combination that’s&amp;nbsp;&lt;a href=&quot;https://simonwillison.net/2023/Apr/14/worst-that-can-happen/#rogue-assistant&quot;&gt;most at risk from prompt injection attacks&lt;/a&gt;: what happens if someone sends you a text message that tricks Siri into forwarding a password reset email to them, and you ask for a summary of that message?&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;It&amp;#8217;s a valid concern, and it might open up a whole new attack vector, when you get specifically crafted messages sent via email or iMessage in the hopes people will run them through AI processing. How and if Apple can prevent this we will see.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;All in all I feel like Apple AI could be a very nice integration and addition to the suite of Apple products, and it seems to have a great focus on privacy as well &amp;#8211; which is tremendously important when doing anything with AI these days (or data processing in general). &lt;/p&gt;



&lt;p&gt;Apple AI is launching this fall.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.apple.com/apple-intelligence/&quot;&gt;https://www.apple.com/apple-intelligence/&lt;/a&gt; &lt;/li&gt;



&lt;li&gt;WWDC 2024 recording &lt;a href=&quot;https://www.youtube.com/watch?v=RXeOiIDNNek&quot;&gt;https://www.youtube.com/watch?v=RXeOiIDNNek&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: BundID: Eine digitale Identität schafft (falsches) Vertrauen</title>
    <link href="https://kevin.gimbel.dev/blog/2024/06/re-bundid-eine-digitale-identitat-schafft-falsches-vertrauen/" />
    <id>https://kevingimbel.de/blog/2024/06/re-bundid-eine-digitale-identitat-schafft-falsches-vertrauen/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Ohje… was ist da wieder los? Lilith Wittmann dokumentiert, wie sie innerhalb von kürzester Zeit eine Fake Seite mit dem BundID Login ausstatten konnte und somit legitim wirken lies. Wild! Weil ich weiß, wie oft SAML falsch implementiert wird, habe ich also in den Verwaltungsportalen von Städten gezielt nach solchen Sicherheitslücken gesucht und bin auch [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;Ohje… was ist da wieder los? Lilith Wittmann dokumentiert, wie sie innerhalb von kürzester Zeit eine Fake Seite mit dem BundID Login ausstatten konnte und somit legitim wirken lies. Wild!&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;Weil ich weiß, wie oft SAML falsch implementiert wird, habe ich also in den Verwaltungsportalen von Städten gezielt nach solchen Sicherheitslücken gesucht und bin auch innerhalb von etwa einer Stunde beim Durchsehen von Anmeldeprozessen fündig geworden.&lt;/p&gt;
&lt;cite&gt;Lilith Wittmann, via &lt;a href=&quot;https://lilithwittmann.medium.com/bundid-eine-digitale-identität-schafft-falsches-vertrauen-4a1d0a3faa03&quot;&gt;https://lilithwittmann.medium.com/bundid-eine-digitale-identität-schafft-falsches-vertrauen-4a1d0a3faa03&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;Lilith stellt in ihrem Artikel wichtige Fragen: Warum wird SAML statt oAuth genutzt? Wieso muss jeder Betreiber SAML selbst implementieren? Und wieso gibt es nicht eine zentrale Stelle?&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;Grundsätzlich ist die Frage, ob viele einzelne Verwaltungsportale überhaupt eine gute Idee sind. Oder ob es nicht eigentlich eher ein Portal/App geben sollte, mit dem Bürger interagieren und welches dann die Daten direkt in die Systeme der zuständigen Verwaltung übermittelt. Dadurch könnten weniger Fehler in der Umsetzung passieren, es müssen keine 300 Hundesteueranträge gebaut und gewartet werden und die Qualität der User Experience könnte einfacher verbessert werden.&lt;/p&gt;
&lt;cite&gt;Lilith Wittmann&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;Die Betreiber von BundID haben den Fehler zum Glück schnell behoben, und präventiv alle betroffenen Systeme abgeschaltet während der fix implementiert wurde &amp;#8211; sehr vorbildlich! &lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://lilithwittmann.medium.com/bundid-eine-digitale-identität-schafft-falsches-vertrauen-4a1d0a3faa03&quot;&gt;https://lilithwittmann.medium.com/bundid-eine-digitale-identität-schafft-falsches-vertrauen-4a1d0a3faa03&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: What if we worked together</title>
    <link href="https://kevin.gimbel.dev/blog/2024/06/re-what-if-we-worked-together/" />
    <id>https://kevingimbel.de/blog/2024/06/re-what-if-we-worked-together/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;The folks at Ghost are building federation into &amp;#8230; Ghost! Ghost is the latest of a growing number of networks joining the Fediverse by implementing ActivityPub (among them are Flipboard and Threads, the new thingy from Meta)! I really love to see the Fediverse grow and evolve. It feels good to be part of it! [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;The folks at &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt; are building &lt;a href=&quot;https://activitypub.ghost.org/day4/&quot;&gt;federation into &amp;#8230; Ghost&lt;/a&gt;! &lt;/p&gt;



&lt;p&gt;Ghost is the latest of a growing number of networks joining the Fediverse by implementing ActivityPub (among them are &lt;a href=&quot;https://flipboard.com/&quot;&gt;Flipboard&lt;/a&gt; and &lt;a href=&quot;https://www.threads.net/&quot;&gt;Threads&lt;/a&gt;, the new thingy from Meta)! &lt;/p&gt;



&lt;p&gt;I really love to see the Fediverse grow and evolve. It feels good to be part of it! &lt;/p&gt;



&lt;p&gt;&lt;em&gt;(Hint: You can follow this blog as &lt;code&gt;@kevin@kevingimbel.de&lt;/code&gt; from anywhere in the Fediverse! Just search for it in your app of choice!)&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;Ironically, the Ghost Dev blog is not activity pub enabled, and doesn&amp;#8217;t have RSS &amp;#8211; the only way to subscribe right now is &amp;#8230; &lt;em&gt;email&lt;/em&gt;. 💀&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;Activity Pub implementation Dev Blog &lt;a href=&quot;https://activitypub.ghost.org&quot;&gt;https://activitypub.ghost.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: The Justice Department Took Down the 911 S5 Botnet</title>
    <link href="https://kevin.gimbel.dev/blog/2024/06/re-the-justice-department-took-down-the-911-s5-botnet/" />
    <id>https://kevingimbel.de/blog/2024/06/re-the-justice-department-took-down-the-911-s5-botnet/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;A big-ass botnet has been dismantled by an international cooperation of agencies led by law enforcement in the United States, Singapore, Thailand, and Germany. [&amp;#8230;] devices were associated with more than 19 million unique IP addresses, including 613,841 IP addresses located in the United States. Wang then generated millions of dollars by offering cybercriminals access [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;A big-ass botnet&lt;sup data-fn=&quot;ca841f68-06ca-432e-8856-093003c87556&quot; class=&quot;fn&quot;&gt;&lt;a href=&quot;#ca841f68-06ca-432e-8856-093003c87556&quot; id=&quot;ca841f68-06ca-432e-8856-093003c87556-link&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; has been dismantled by an international cooperation of agencies led by law enforcement in the United States, Singapore, Thailand, and Germany. &lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;[&amp;#8230;] devices were associated with more than 19 million unique IP addresses, including 613,841 IP addresses located in the United States. Wang then generated millions of dollars by offering cybercriminals access to these infected IP addresses for a fee.&lt;/p&gt;
&lt;cite&gt;via USA Department of Justice press release  &lt;a href=&quot;https://www.justice.gov/opa/pr/911-s5-botnet-dismantled-and-its-administrator-arrested-coordinated-international-operation&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;https://www.justice.gov/opa/pr/911-s5-botnet-dismantled-and-its-administrator-arrested-coordinated-international-operation&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;That&amp;#8217;s one hell of a lot of compromised computers. At this size the chances of knowing somebody who&amp;#8217;s infected aren&amp;#8217;t so slim. &lt;/p&gt;



&lt;p&gt;Stay vigilant, friends. 🛡️&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;Article &lt;a href=&quot;https://www.schneier.com/blog/archives/2024/06/the-justice-department-took-down-the-911-s5-botnet.html&quot;&gt;https://www.schneier.com/blog/archives/2024/06/the-justice-department-took-down-the-911-s5-botnet.html&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;USA Department of Justice press release &lt;a href=&quot;https://www.justice.gov/opa/pr/911-s5-botnet-dismantled-and-its-administrator-arrested-coordinated-international-operation&quot;&gt;https://www.justice.gov/opa/pr/911-s5-botnet-dismantled-and-its-administrator-arrested-coordinated-international-operation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ol class=&quot;wp-block-footnotes&quot;&gt;&lt;li id=&quot;ca841f68-06ca-432e-8856-093003c87556&quot;&gt;Pardon my French. Sorry not sorry. 🍑 &lt;a href=&quot;#ca841f68-06ca-432e-8856-093003c87556-link&quot; aria-label=&quot;Jump to footnote reference 1&quot;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title type="html">10 years of Kubernetes</title>
    <link href="https://kevin.gimbel.dev/blog/2024/06/10-years-of-kubernetes/" />
    <id>https://kevingimbel.de/blog/2024/06/10-years-of-kubernetes/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;10 years ago, on June 6th 2014, the first commit was made to kubernetes. Quoting the original README file Kubernetes is an open source reference implementation of container cluster management. What a wild ride it has been from a reference implementation to the de-facto standard for running containerised workloads! I think the first time I [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes/commit/2c4b3a562ce34cddc3f8218a2c4d11c7310e6d56&quot;&gt;10 years ago, on June 6th 2014, the first commit was made to kubernetes.&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Quoting the original README file&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;Kubernetes is an open source reference implementation of container cluster management.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;What a wild ride it has been from a &lt;em&gt;reference implementation&lt;/em&gt; to the de-facto standard for running containerised workloads!&lt;/p&gt;



&lt;p&gt;I think the first time I came into contact with Kubernetes was around 2016 or 2017, when we evaluated different container orchestration frameworks with a customer at Synoa. In the end a partner company decided to use &lt;a href=&quot;https://mesosphere.github.io/marathon/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;Apache Marathon&lt;/a&gt; to run workloads, and we at Synoa chose &lt;a href=&quot;https://aws.amazon.com/ecs/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;Amazon ECS&lt;/a&gt; (Elastic Container Services) over Kubernetes since no managed Kubernetes was available at the time, and self hosting wasn&amp;#8217;t viable.&lt;/p&gt;



&lt;p&gt;Since joining AOE in 2023 I started working with Kubernetes every day and also run &lt;a href=&quot;https://www.aoe.com/en/academy/cloud-devops/kubernetes-101.html&quot;&gt;Kubernetes Workshops&lt;/a&gt; (as part of &lt;a href=&quot;https://www.aoe.com/en/academy.html&quot;&gt;AOE Academy&lt;/a&gt;).&lt;/p&gt;



&lt;p&gt;I&amp;#8217;m glad to be working with Kubernetes now, and I would recommend it for all medium and larger sized teams. It&amp;#8217;s an amazing product to build platforms on, and keeps evolving!&lt;/p&gt;



&lt;p&gt;Onto the next 10 years! 🎉&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/blog/2024/06/06/10-years-of-kubernetes/&quot;&gt;Kubernetes Announcement Post&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes/kubernetes/tree/2c4b3a562ce34cddc3f8218a2c4d11c7310e6d56&quot;&gt;Original Kubernetes source code&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: Operation Overload</title>
    <link href="https://kevin.gimbel.dev/blog/2024/06/re-operation-overload/" />
    <id>https://kevingimbel.de/blog/2024/06/re-operation-overload/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;I do not envy the people who are working as fact checkers (or who volunteer!), because there sure is a ton of fakes and propaganda out there to be checked and debunked. The graffitis, videos or screenshots sent to newsrooms are fake and were fabricated for the purpose of diverting journalist’s ressources, or even try [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;I do not envy the people who are working as fact checkers (&lt;em&gt;or who volunteer!&lt;/em&gt;), because there sure is a ton of fakes and propaganda out there to be checked and debunked. &lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;The graffitis, videos or screenshots sent to newsrooms are fake and were fabricated for the purpose of diverting journalist’s ressources, or even try to have their narratives amplified by getting fact-checkers to publish debunks. Operation Overload, as we dubbed the action,&amp;nbsp;is detailed in our latest report, led with the support of&amp;nbsp;Reset.Tech&amp;nbsp;and 20+ fact-checking entities, which shared content they had received.&lt;/p&gt;
&lt;cite&gt;Check First via &lt;a href=&quot;https://checkfirst.network/operation-overload-how-pro-russian-actors-flood-newsrooms-with-fake-content-and-seek-to-divert-their-efforts/&quot;&gt;https://checkfirst.network/operation-overload-how-pro-russian-actors-flood-newsrooms-with-fake-content-and-seek-to-divert-their-efforts/&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;A recently uncovered campaign named &amp;#8220;&lt;em&gt;Operation Overload&lt;/em&gt;&amp;#8221; targets fake checkers by sending them a lot of fake, fabricated resources with the goal to have well-known fake checking websites such as &lt;a href=&quot;https://correctiv.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;corrective.org&lt;/a&gt; re-publish the fakes and &amp;#8220;debunking&amp;#8221; them (thus spreading the content more, and talking about it), and at the same time overloading the employees with useless stories.&lt;/p&gt;



&lt;p&gt;It is a really weird time to be on the internet. How did we come from funny videos and sharing what we like to a globe-spanning real time propaganda machine owned by a billionaire (&lt;em&gt;X&lt;/em&gt;). &lt;/p&gt;



&lt;p&gt;I&amp;#8217;m grateful for the work done by organisations like &lt;a href=&quot;https://correctiv.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Correctiv&lt;/a&gt;, &lt;a href=&quot;https://www.volksverpetzer.de/&quot;&gt;Volksverpetzer&lt;/a&gt;, and &lt;a href=&quot;https://www.disinfo.eu/&quot;&gt;Disinfo.eu&lt;/a&gt;. If you can, consider supporting them via donations. 🫰&lt;/p&gt;



&lt;p&gt;The full report, linked below, is long but well worth the time.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;Full report (90 pages) as PDF here &lt;a href=&quot;https://checkfirst.network/wp-content/uploads/2024/06/Operation_Overload_WEB.pdf&quot;&gt;https://checkfirst.network/wp-content/uploads/2024/06/Operation_Overload_WEB.pdf&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;German article by &lt;em&gt;CORRECTIV&lt;/em&gt;: &lt;a href=&quot;https://correctiv.org/faktencheck/hintergrund/2024/06/04/post-aus-russland-desinfo-kampagne-nimmt-correctiv-und-andere-faktencheck-redaktionen-ins-visier/&quot;&gt;https://correctiv.org/faktencheck/hintergrund/2024/06/04/post-aus-russland-desinfo-kampagne-nimmt-correctiv-und-andere-faktencheck-redaktionen-ins-visier/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: Trust</title>
    <link href="https://kevin.gimbel.dev/blog/2024/05/re-trust/" />
    <id>https://kevingimbel.de/blog/2024/05/re-trust/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;A very good take on putting AI into everything because that&amp;#8217;s the big thing right now: Trust is a precious commodity. It takes a long time to build trust. It takes a short time to destroy it. I am honestly astonished that so many companies don’t seem to realise what they’re destroying. Jeremy Keith via [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;A very good take on putting AI into everything because that&amp;#8217;s the big thing right now:&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;Trust is a precious commodity. It takes a long time to build trust. It takes a short time to destroy it.&lt;/p&gt;



&lt;p&gt;I am honestly astonished that so many companies don’t seem to realise what they’re destroying.&lt;/p&gt;
&lt;cite&gt;Jeremy Keith via &lt;a href=&quot;https://adactio.com/journal/21160&quot;&gt;https://adactio.com/journal/21160&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;Google putting AI on top of all search results, &lt;s&gt;&lt;em&gt;then having it recommend jumping of the Golden Gate Bridge if you&amp;#8217;re depressed&lt;sup data-fn=&quot;071d9189-5ddb-41e1-a3ff-566683ae6300&quot; class=&quot;fn&quot;&gt;&lt;a href=&quot;#071d9189-5ddb-41e1-a3ff-566683ae6300&quot; id=&quot;071d9189-5ddb-41e1-a3ff-566683ae6300-link&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/em&gt;&lt;/s&gt; is peak &amp;#8220;we need AI, ship now&amp;#8221;-bullshit. I don&amp;#8217;t care if they&amp;#8217;ll have better AI soon, they&amp;#8217;ll be the ones who recommended &lt;a href=&quot;https://toot.cat/@ionizedgirl/112493337252943357&quot;&gt;people to eat stones&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Large Corporations&lt;/strong&gt; &lt;strong&gt;are destroying trust&lt;/strong&gt;, trust they build over decades.&lt;/p&gt;



&lt;p&gt;I use Google to get good, accurate results. To find what I want to find fast and efficiently, and they already destroyed that with a lot of SEO bullshit over the years where one finds the content with the best SEO tags, not the best content. &lt;/p&gt;



&lt;p&gt;I use StackOverflow for the community, and because it has good resources and sometimes good discussion. I don&amp;#8217;t need any AI to do that, I need good search.&lt;/p&gt;



&lt;p&gt;The amount of apps which are &lt;em&gt;really improved&lt;/em&gt; with AI is limited, and the fact everybody puts AI into everything these days reminds me A LOT of the big blockchain hype from a few years ago.&lt;/p&gt;



&lt;p&gt;WordPress, or better Jetpack, added AI to in some places, for example there&amp;#8217;s a function to generate Excerpts based on the content of a blogpost. This is an OK feature, and actually a real world use case. The generated excerpt for this post is:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;The post criticizes the overuse of AI in various platforms, particularly Google, for deteriorating trust and replacing quality content with AI-driven results. It compares the current AI hype to past blockchain trends.&lt;/code&gt;&lt;/pre&gt;



&lt;hr class=&quot;wp-block-separator has-alpha-channel-opacity&quot;/&gt;



&lt;p&gt;This post is a response to &lt;a href=&quot;https://adactio.com/journal/21160&quot;&gt;https://adactio.com/journal/21160&lt;/a&gt; by Jeremy Keith.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Edits&lt;/h2&gt;



&lt;p&gt;The first version of this post contained a link to a Mastodon post which suggested Google AI recommends jumping off a bridge when the query &amp;#8220;&lt;em&gt;I&amp;#8217;m feeling depressed&lt;/em&gt;&amp;#8221; was entered. That one was fake. &lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Footnotes&lt;/h2&gt;


&lt;ol class=&quot;wp-block-footnotes&quot;&gt;&lt;li id=&quot;071d9189-5ddb-41e1-a3ff-566683ae6300&quot;&gt;That one was fake, according to &lt;a href=&quot;https://www.fastcompany.com/91132217/google-ai-overview-errors&quot;&gt;https://www.fastcompany.com/91132217/google-ai-overview-errors&lt;/a&gt;, still Google AI recommends some questionable things!&lt;br&gt;Here&amp;#8217;s the OG screenshot &lt;a href=&quot;https://kevingimbel.de/wp-content/uploads/2024/05/google-ai-depressed-screenshot.jpeg&quot;&gt;https://kevingimbel.de/wp-content/uploads/2024/05/google-ai-depressed-screenshot.jpeg&lt;/a&gt; &lt;a href=&quot;#071d9189-5ddb-41e1-a3ff-566683ae6300-link&quot; aria-label=&quot;Jump to footnote reference 1&quot;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title type="html">RE: Why blog anonymous</title>
    <link href="https://kevin.gimbel.dev/blog/2024/05/re-why-blog-anonymous/" />
    <id>https://kevingimbel.de/blog/2024/05/re-why-blog-anonymous/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;A few notes on publishing anonymously on the web. &lt;/p&gt;
</summary>
    <content type="html">
&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;I feel weird about using my full, legal name on the internet. I don&amp;#8217;t like the idea of being Google-able. If I Google myself, the first thing that comes up is my work profile, as that is pretty much the only place on the internet that has my full name.&lt;/p&gt;
&lt;cite&gt;Frills via &lt;a href=&quot;https://frills.dev/blog/240411-anon/&quot;&gt;https://frills.dev/blog/240411-anon/&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;I&amp;#8217;m long beyond the point of being anonymous on the internet. I tend to link all the things I do together and use the same or similar names on all networks (mostly my full name or &lt;em&gt;atarijunge&lt;/em&gt; a nick-name I got on Twitter back in the day).&lt;/p&gt;



&lt;p&gt;For most parts I do not mind linking things together and being non-anonymous on the web. It also keeps me in check about what I publish, if I don&amp;#8217;t want something online to be associated with my name I wouldn&amp;#8217;t wanna publish it under a pseudonym as well, given that some clever h4ckerz might one day find the pseudonym and link it back to me.&lt;/p&gt;



&lt;p&gt;Before I started using my real name online I used a bunch of different usernames, all lost to the digital void now (sometimes for the better &lt;code&gt;#cringe&lt;/code&gt;). I still publish one blog that&amp;#8217;s somewhat private-focused and completely cut from work. It&amp;#8217;s &lt;a href=&quot;https://nerdcultu.re/blog/&quot;&gt;https://nerdcultu.re/blog/&lt;/a&gt; where I write about all things I like (games, movies, music, books, &amp;#8230;) in German. It&amp;#8217;s more for me than for others, really. Otherwise I publish everything under my full name and on kevingimbel.de &amp;#8211; and I&amp;#8217;m fine with that.&lt;/p&gt;



&lt;p&gt;So, if you Google my name you&amp;#8217;ll probably find a bunch of social media profiles, my linked in, and this very website here (or &lt;em&gt;kevin.gimbel.dev&lt;/em&gt;, depending where you read this post :D). For the future I&amp;#8217;d like to mix-in even more personal things, after all this website is about me.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: Cloudflare took down our website after trying to force us to pay 120k$ within 24h</title>
    <link href="https://kevin.gimbel.dev/blog/2024/05/re-cloudflare-took-down-our-website-after-trying-to-force-us-to-pay-120k-within-24h/" />
    <id>https://kevingimbel.de/blog/2024/05/re-cloudflare-took-down-our-website-after-trying-to-force-us-to-pay-120k-within-24h/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;They would not offer us anything apart from a full deal for $10k per month, which would magically resolve the issue. They were not interested in any other resolution. via https://robindev.substack.com/p/cloudflare-took-down-our-website Now that&amp;#8217;s just fucked up. The screenshots in the post are completely insane as well, the sales tactics hidden behind alleged problems with the account [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;They would not offer us anything apart from a full deal &lt;strong&gt;for $10k per month&lt;/strong&gt;, which would magically resolve the issue. They were not interested in any other resolution.&lt;/p&gt;
&lt;cite&gt;&lt;em&gt;via &lt;/em&gt;&lt;a href=&quot;https://robindev.substack.com/p/cloudflare-took-down-our-website&quot;&gt;https://robindev.substack.com/p/cloudflare-took-down-our-website&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;Now that&amp;#8217;s just fucked up. The screenshots in the post are completely insane as well, the sales tactics hidden behind alleged problems with the account are absolutely unethical, how they try and force them to pay up or be kicked off the platform without giving any real context of what the &amp;#8220;probelm&amp;#8221; is (other then Cloudflare wanting more money) is such a bad move over all.&lt;/p&gt;



&lt;p&gt;I&amp;#8217;m glad neither I nor my (work-) projects are using Cloudflare services, and I just lost a big chunk of trust in them. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">Regexle #9</title>
    <link href="https://kevin.gimbel.dev/blog/2024/05/regexle-9/" />
    <id>https://kevingimbel.de/blog/2024/05/regexle-9/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Solution for Regexle #9&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;Todays regex had me confused! I kept thinking the solution was strings starting with &lt;code&gt;v[aeiou]&lt;/code&gt;, then strings ending &lt;code&gt;[ing]&lt;/code&gt; or &lt;code&gt;[m|n]e&lt;/code&gt;, but in the end the solution was a lot simpler.&lt;/p&gt;



&lt;p&gt;The regex today was: &lt;code&gt;&lt;code&gt;[nm].$&lt;/code&gt;&lt;/code&gt;&lt;/p&gt;



&lt;p&gt;This matches the end of strings (as indicated by the &lt;code&gt;$&lt;/code&gt; &lt;em&gt;(dollar sign)&lt;/em&gt;). The regex itself matches &lt;code&gt;n&lt;/code&gt; or &lt;code&gt;m&lt;/code&gt; (&lt;code&gt;[nm]&lt;/code&gt;) followed by exactly one character (&lt;code&gt;.&lt;/code&gt; &lt;em&gt;(dot)&lt;/em&gt;).&lt;/p&gt;



&lt;p&gt;This matches strings ending in &lt;code&gt;ing &lt;/code&gt;as well as strings ending in &lt;code&gt;me&lt;/code&gt; and &lt;code&gt;ne&lt;/code&gt;. Once again I was thinking way too complicated and didn&amp;#8217;t see the pattern. I hope daily Regexle can sharpen my mind to recognise these sort of string patterns.&lt;/p&gt;



&lt;p&gt;All in all it took me 24 tries and 4 regexes, my solution was &lt;code&gt;/ing$|[mn].$/&lt;/code&gt;, which matches the patterns but is unnecessarily complex.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">Regexle #8</title>
    <link href="https://kevin.gimbel.dev/blog/2024/05/regexle-8/" />
    <id>https://kevingimbel.de/blog/2024/05/regexle-8/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Solution for todays Regexle puzzle&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;I&amp;#8217;ve been doing &lt;a href=&quot;https://regexle.ithea.de/&quot;&gt;Regexle&lt;/a&gt; for the past days, and decided to write a short note about them here on the blog.&lt;/p&gt;



&lt;p&gt;Todays Regex was &lt;a href=&quot;https://regex101.com/r/u1plvN/1&quot;&gt;&lt;code&gt;q$|^w&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;This matches all words ending with q (&lt;code&gt;q$&lt;/code&gt;) or (&lt;code&gt;|&lt;/code&gt;)  starting with w (&lt;code&gt;^w&lt;/code&gt;).&lt;/p&gt;



&lt;p&gt;I didn&amp;#8217;t solve the puzzle today but already look forward to tomorrows!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">Slop Slop Slop!</title>
    <link href="https://kevin.gimbel.dev/blog/2024/05/slop-slop-slop/" />
    <id>https://kevingimbel.de/blog/2024/05/slop-slop-slop/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;There&amp;#8217;s a new word in town: slop! slop is rapidly taking the Fediverse, blogging scene (lol) and Twitter by storm as a term for AI-generated trash text: basically AI spam. The first mention I&amp;#8217;ve seen is of a Twitter post by @deepfates https://twitter.com/deepfates/status/1787472784106639418, which I saw shared on Mastodon by Simon Willison https://fedi.simonwillison.net/@simon/112402587787781767. I like [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;There&amp;#8217;s a new word in town: &lt;em&gt;&lt;strong&gt;slop&lt;/strong&gt;&lt;/em&gt;! &lt;/p&gt;



&lt;p&gt;slop is rapidly taking the Fediverse, blogging scene (&lt;em&gt;lol&lt;/em&gt;) and Twitter by storm as a term for AI-generated trash text: basically AI spam.&lt;/p&gt;



&lt;p&gt;The first mention I&amp;#8217;ve seen is of a Twitter post by &lt;a href=&quot;https://twitter.com/deepfates/status/1787472784106639418&quot;&gt;@deepfates https://twitter.com/deepfates/status/1787472784106639418&lt;/a&gt;, which I saw shared on Mastodon by &lt;a href=&quot;https://fedi.simonwillison.net/@simon/112402587787781767&quot;&gt;Simon Willison https://fedi.simonwillison.net/@simon/112402587787781767&lt;/a&gt;. I like the term, it&amp;#8217;s catchy and short and there&amp;#8217;s already a ton of slop on the &lt;em&gt;WWW&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;&lt;a href=&quot;https://kevingimbel.de/blog/2024/05/re-heat-death-of-the-internet/&quot; data-type=&quot;post&quot; data-id=&quot;2499&quot;&gt;Yesterday&lt;/a&gt; I quoted &lt;a href=&quot;https://www.takahe.org.nz/heat-death-of-the-internet/&quot;&gt;&amp;#8220;Heat Death of the Internet&amp;#8221;&lt;/a&gt; and &amp;#8211; quoting it again &amp;#8211; there&amp;#8217;s also a passage about AI in it, which fits the slop problem perfectly:&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-style-plain has-medium-font-size is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;&lt;em&gt;The first page of Google results are links to pages that have scraped other pages for information from other pages that have been scraped for information. All the sources seem to link back to one another. There is no origin. The photos on the page look weird. The hands are disfigured. There is no image credit.&lt;/em&gt;&lt;/p&gt;
&lt;cite&gt;via &lt;a href=&quot;https://www.takahe.org.nz/heat-death-of-the-internet/&quot;&gt;https://www.takahe.org.nz/heat-death-of-the-internet/&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;While AI is the next cool hype and all is well now (&lt;em&gt;all it is not well&lt;/em&gt;), AI companies really need to be careful from where they steal their training data. The point of AI generated content everywhere is approaching, and I can&amp;#8217;t wait to see the next big LLM trained on slop spitting out bullshit.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: Heat Death of the Internet</title>
    <link href="https://kevin.gimbel.dev/blog/2024/05/re-heat-death-of-the-internet/" />
    <id>https://kevingimbel.de/blog/2024/05/re-heat-death-of-the-internet/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;You want to watch the trailer for an upcoming movie on YouTube but you first have to sit through an ad. Then you sit through a preview for the trailer itself. Then you watch the trailer, which is literally another ad. When it ends, it cues up a new trailer, with a new ad at [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;You want to watch the trailer for an upcoming movie on YouTube but you first have to sit through an ad. &lt;br&gt;Then you sit through a preview for the trailer itself. Then you watch the trailer, which is literally another ad. When it ends, it cues up a new trailer, with a new ad at the start of it.&lt;/p&gt;
&lt;cite&gt;via &lt;a href=&quot;https://www.takahe.org.nz/heat-death-of-the-internet/&quot;&gt;https://www.takahe.org.nz/heat-death-of-the-internet/&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;An absurd&lt;sup data-fn=&quot;5edd7162-1fc9-471e-83bd-48f259b38d93&quot; class=&quot;fn&quot;&gt;&lt;a href=&quot;#5edd7162-1fc9-471e-83bd-48f259b38d93&quot; id=&quot;5edd7162-1fc9-471e-83bd-48f259b38d93-link&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; piece of fiction on how the online world is these days. It&amp;#8217;s broken, and maybe that&amp;#8217;s what makes it so rewarding when you find an unbroken piece (&lt;em&gt;like this blog&lt;/em&gt; 🙃).&lt;/p&gt;



&lt;p&gt;Another quote from the text&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;You buy a microwave and receive ads for microwaves. You buy a mattress and receive ads for mattresses.&lt;/p&gt;
&lt;cite&gt;via &lt;a href=&quot;https://www.takahe.org.nz/heat-death-of-the-internet/&quot;&gt;https://www.takahe.org.nz/heat-death-of-the-internet/&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;The rest of the text is good as well, and worth the few minutes it takes to read. &lt;/p&gt;


&lt;ol class=&quot;wp-block-footnotes&quot;&gt;&lt;li id=&quot;5edd7162-1fc9-471e-83bd-48f259b38d93&quot;&gt;I mean &amp;#8220;&lt;em&gt;absurd&lt;/em&gt;&amp;#8221; in the most beautiful, encouraging way possible. It&amp;#8217;s a great piece of fiction which resonated a lot with how I perceive the internet lately.  &lt;a href=&quot;#5edd7162-1fc9-471e-83bd-48f259b38d93-link&quot; aria-label=&quot;Jump to footnote reference 1&quot;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title type="html">I&amp;#8217;ll be speaking at Container Days Hamburg in September</title>
    <link href="https://kevin.gimbel.dev/blog/2024/05/ill-be-speaking-at-container-days-hamburg-in-september/" />
    <id>https://kevingimbel.de/blog/2024/05/ill-be-speaking-at-container-days-hamburg-in-september/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;My talk &amp;#8220;Container Vulnerability Management in Kubernetes&amp;#8221; was accepted by Container Days and I&amp;#8217;ll be on-stage in September. I&amp;#8217;m already super excited (and hella nervous ✨) and looking forward to being in Hamburg, meeting other DevOps people and enjoying the conference &amp;#8211; it&amp;#8217;s been too long since I attended one! (I think Front Trends in [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;My talk &amp;#8220;&lt;em&gt;Container Vulnerability Management in Kubernetes&lt;/em&gt;&amp;#8221; was accepted by &lt;a href=&quot;https://www.containerdays.io/&quot;&gt;Container Days&lt;/a&gt; and I&amp;#8217;ll be on-stage in September. I&amp;#8217;m already super excited &lt;sup&gt;(&lt;em&gt;and hella nervous&lt;/em&gt; ✨) &lt;/sup&gt;and looking forward to being in Hamburg, meeting other DevOps people and enjoying the conference &amp;#8211; it&amp;#8217;s been too long since I attended one! &lt;em&gt;(I think Front Trends in 2016 was the last??)&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;The Talk is all about scanning container images for vulnerability and ensuring containers running in Kubernetes contain as little CVEs as possible (and the once they contain are known as accepted risks). If this sounds interesting to you, &lt;a href=&quot;https://www.containerdays.io/containerdays-conference-2024/tickets/&quot;&gt;feel free to join me in Hamburg&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: Get ready for OpenTofu 1.7.0-beta1</title>
    <link href="https://kevin.gimbel.dev/blog/2024/04/re-get-ready-for-opentofu-1-7-0-beta1/" />
    <id>https://kevingimbel.de/blog/2024/04/re-get-ready-for-opentofu-1-7-0-beta1/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;OpenTofu, the terraform fork which remains truly Open Source, just announced the 1.7.0-beta1 release which brings the following new enhancements: Especially state encryption is a feature I&amp;#8217;m excited about. At the moment I do not use any terraform for my private projects so it&amp;#8217;s hard to try OpenTofu in the wild, but me and my [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;OpenTofu, the terraform fork which remains truly Open Source, just announced the 1.7.0-beta1 release which brings the following new enhancements:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://opentofu.org/blog/opentofu-1-7-0-beta1/#provider-defined-functions&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;Provider-defined functions &lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://opentofu.org/blog/opentofu-1-7-0-beta1/#loopable-import-blocks&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;Loopable import blocks&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://opentofu.org/blog/opentofu-1-7-0-beta1/#state-encryption&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;State encryption&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;Especially state encryption is a feature I&amp;#8217;m excited about.&lt;/p&gt;



&lt;p&gt;At the moment I do not use any terraform for my private projects so it&amp;#8217;s hard to try OpenTofu in the wild, but me and my &lt;a href=&quot;https://jobs.aoe.com/en/home.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;team at AOE&lt;/a&gt; follow the development closely to evaluate a switch to OpenTofu.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: You’re a Blogger, Not an Essayist</title>
    <link href="https://kevin.gimbel.dev/blog/2024/04/re-youre-a-blogger-not-an-essayist/" />
    <id>https://kevingimbel.de/blog/2024/04/re-youre-a-blogger-not-an-essayist/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Blogging is a conversation. It’s a conversation with yourself and it’s a conversation with others. Barry Hess via https://bjhess.com/posts/you-re-a-blogger-not-an-essayist Some real talk right there. Blogging is all about conversations, thoughts, and FUN. This very website is not a magazine and it&amp;#8217;s not a professional publication; It sometimes may include content which is related to the [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;Blogging is a conversation. It’s a conversation with yourself and it’s a conversation with others.&lt;/p&gt;
&lt;cite&gt;&lt;a href=&quot;https://bjhess.com&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Barry Hess&lt;/a&gt; via &lt;a href=&quot;https://bjhess.com/posts/you-re-a-blogger-not-an-essayist&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://bjhess.com/posts/you-re-a-blogger-not-an-essayist&lt;/a&gt;&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;Some real talk right there. Blogging is all about conversations, thoughts, and &lt;strong&gt;FUN&lt;/strong&gt;. This very website is not a magazine and it&amp;#8217;s not a professional publication; It sometimes may include content which is related to the profession I work in, and as it&amp;#8217;s a digital collection of myself it also includes artefacts of my work, but it&amp;#8217;s mostly a website by me. for me, about me.&lt;/p&gt;



&lt;p&gt;The pressure of putting out gOoD cOnTeNt made me loose all interest in blogging a few years ago, as did splitting all my website up. I just want to publish things on the internet and let people (and machines I guess?) take part in my thoughts, ideas, and the things which drive me (or hold me down).&lt;/p&gt;



&lt;p&gt;That&amp;#8217;s it. That&amp;#8217;s the post.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">Oh no my gpg key expired (like every year)</title>
    <link href="https://kevin.gimbel.dev/blog/2024/04/oh-no-my-gpg-key-expired-like-every-year/" />
    <id>https://kevingimbel.de/blog/2024/04/oh-no-my-gpg-key-expired-like-every-year/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Who doesn&amp;#8217;t love encryption and security? I like to sign my git commits, and for this I need PGP keys. They are cool when they work and you don&amp;#8217;t need to think about them, but every now and then they need to be renewed (unless you use never expiring keys which of course you shouldn&amp;#8217;t!). [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;&lt;em&gt;Who doesn&amp;#8217;t love encryption and security?&lt;/em&gt; I like to&lt;a href=&quot;https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits&quot;&gt; sign my git commits&lt;/a&gt;, and for this I need &lt;a href=&quot;https://en.wikipedia.org/wiki/Pretty_Good_Privacy&quot;&gt;PGP keys&lt;/a&gt;. They are cool when they work and you don&amp;#8217;t need to think about them, but every now and then they need to be renewed (&lt;em&gt;unless you use never expiring keys which of course you shouldn&amp;#8217;t!&lt;/em&gt;).&lt;/p&gt;



&lt;p&gt;So, as always when a key expires, I started looking around the internet what needs to be done because I only ever do this once a year and I cannot remember what I did.&lt;/p&gt;



&lt;p&gt;Here&amp;#8217;s what needs to be done:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Run &lt;code&gt;gpg --list-secret-keys&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;Find the key to edit&lt;/li&gt;



&lt;li&gt;Run &lt;code&gt;gpg --edit-key [key-id]&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;This opens the gpg prompt (indicated by &lt;code&gt;gpg&amp;gt;&lt;/code&gt;)&lt;/li&gt;



&lt;li&gt;Enter &lt;code&gt;expire&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;Follow the instructions to set the new expire date&lt;/li&gt;



&lt;li&gt;Type &lt;code&gt;save&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;The key now has a new expiration date and can be uploaded to GitHub &amp;#8211; the old one needs to be deleted first. &lt;em&gt;This does not invalidate old signed commits!&lt;/em&gt;&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-full&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;644&quot; height=&quot;438&quot; data-attachment-id=&quot;2424&quot; data-permalink=&quot;https://kevingimbel.de/blog/2024/04/oh-no-my-gpg-key-expired-like-every-year/screenshot-2024-04-17-at-09-12-30/&quot; data-orig-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/04/Screenshot-2024-04-17-at-09.12.30.png?fit=644%2C438&amp;amp;ssl=1&quot; data-orig-size=&quot;644,438&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/04/Screenshot-2024-04-17-at-09.12.30.png?fit=300%2C204&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/04/Screenshot-2024-04-17-at-09.12.30.png?fit=644%2C438&amp;amp;ssl=1&quot; src=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/04/Screenshot-2024-04-17-at-09.12.30.png?resize=644%2C438&amp;#038;ssl=1&quot; alt=&quot;Screenshot of GitHub&#39;s Verification pop-up.

Text: &amp;quot;This commit was signed with the committer&#39;s verified signature.&amp;quot;

&amp;quot;KevinGimbel GPG Key ID: A6937F93CF7FDC4E&amp;quot;&quot; class=&quot;wp-image-2424&quot; srcset=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/04/Screenshot-2024-04-17-at-09.12.30.png?w=644&amp;amp;ssl=1 644w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/04/Screenshot-2024-04-17-at-09.12.30.png?resize=300%2C204&amp;amp;ssl=1 300w&quot; sizes=&quot;(max-width: 644px) 100vw, 644px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;The image shows the signed commit, signed with my PGP key, and verified on GitHub. This means that the commit was sent by me (or somebody with access to my key).&lt;/p&gt;



&lt;p&gt;It&amp;#8217;s a nice little add-on which I really like. &lt;/p&gt;



&lt;p&gt;I globally configured my git to sign all commits via the &lt;code&gt;~/.gitconfig&lt;/code&gt; file&lt;/p&gt;



&lt;pre title=&quot;~/.gitconfig&quot; class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;[user]&lt;br&gt;name = Kevin Gimbel&lt;br&gt;email = kevin@gimbel.dev&lt;br&gt;signingkey = A6937F93CF7FDC4E&lt;br&gt;&lt;br&gt;[commit]&lt;br&gt;gpgsign = true&lt;br&gt;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This config will sign all commits with my GPG key automatically. Yay!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;More information&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://riseup.net/en/security/message-security/openpgp/best-practices&quot;&gt;https://riseup.net/en/security/message-security/openpgp/best-practices&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits&quot;&gt;https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits&lt;/a&gt; &lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://superuser.com/a/1141251&quot;&gt;https://superuser.com/a/1141251&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">What we should learn from the xz backdoor</title>
    <link href="https://kevin.gimbel.dev/blog/2024/04/what-we-should-learn-from-the-xz-backdoor/" />
    <id>https://kevingimbel.de/blog/2024/04/what-we-should-learn-from-the-xz-backdoor/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;You may have heard that a vulnerability was found in the xz tool and liblzma library on Friday, 29th of March 2024 which specifically targeted sshd being managed by systemd on Debian and RedHat Linux systems. What happened The catastrophic scope of the attack At first the backdoor seems very odd. xz is a compression [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;You may have heard that &lt;a href=&quot;https://www.cert.europa.eu/publications/security-advisories/2024-032/&quot;&gt;a vulnerability was found in the xz tool and liblzma library on Friday, 29th of March 2024&lt;/a&gt; which specifically targeted &lt;code&gt;sshd&lt;/code&gt; being managed by &lt;code&gt;systemd&lt;/code&gt; on Debian and RedHat Linux systems.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;What happened&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;The xz backdoor was very sophisticated and carried out by a professional, this is no work of an amateur&lt;/li&gt;



&lt;li&gt;The attack was carried our over years, &lt;a href=&quot;https://research.swtch.com/xz-timeline&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Russ Cox has put together a timeline which shows the attack started around 2021&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://github.com/anarazel&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;Andres Freund&lt;/a&gt;  reports on the &lt;a href=&quot;https://www.openwall.com/lists/oss-security/2024/03/29/4&quot;&gt;oss-security mailing list about an upstream backdoor in xz&lt;/a&gt;, he previously notified linux distro maintainers about the backdoor, giving them time do downgrade the tool&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;The catastrophic scope of the attack&lt;/h2&gt;



&lt;p&gt;At first the backdoor seems very odd. &lt;code&gt;xz&lt;/code&gt; is a compression tool and library which is not used by ssh directly, so how can it attack &lt;code&gt;ssh&lt;/code&gt;? By using &lt;code&gt;systemd&lt;/code&gt;! &lt;code&gt;systemd&lt;/code&gt; uses &lt;code&gt;liblzma&lt;/code&gt;, the xz library, and this is where &lt;code&gt;sshd&lt;/code&gt; gets compromised: During loading of the &lt;code&gt;liblzma&lt;/code&gt; library by &lt;code&gt;systemd&lt;/code&gt;, the malicious code gets executed and patches the backdoor into &lt;code&gt;sshd&lt;/code&gt; before the ssh daemon is started. The compromised daemon runs just like a normal ssh daemon, but when a connection is initiated with a specific key it allows remote code execution &amp;#8211; so the compromise is incredibly hard to detect.&lt;/p&gt;



&lt;p&gt;Wait, what? Imagine sending a ssh-login request to any server with a specifically forged key and the remote ssh-server executes code without any actual login happening&lt;sup data-fn=&quot;c7269876-e32a-4568-85b7-3aea8fe8b880&quot; class=&quot;fn&quot;&gt;&lt;a href=&quot;#c7269876-e32a-4568-85b7-3aea8fe8b880&quot; id=&quot;c7269876-e32a-4568-85b7-3aea8fe8b880-link&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; &amp;#8211; quoting from Filippo on bluesky:&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p class=&quot;has-medium-font-size&quot; style=&quot;padding-top:0;padding-right:0;padding-bottom:0;padding-left:0&quot;&gt;The hooked RSA_public_decrypt verifies a signature on the server&amp;#8217;s host key by a fixed Ed448 key, and then passes a payload to system(). It&amp;#8217;s RCE&lt;sup data-fn=&quot;4aa8b4c0-c8ca-4495-8c32-000c22f4c938&quot; class=&quot;fn&quot;&gt;&lt;a href=&quot;#4aa8b4c0-c8ca-4495-8c32-000c22f4c938&quot; id=&quot;4aa8b4c0-c8ca-4495-8c32-000c22f4c938-link&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;, not auth bypass, and gated/unreplayable.&lt;br&gt;&lt;br&gt;The payload is extracted from the N value (the public key) passed to RSA_public_decrypt, checked against a simple fingerprint, and decrypted with a fixed ChaCha20 key before the Ed448 signature verification.&lt;/p&gt;
&lt;cite&gt;Filippo Valsorda&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/systemd/systemd/pull/31550&quot;&gt;systemd was about to refactor its usage of liblzma&lt;/a&gt;, making the exploit impossible (or harder), which is probably why they pushed for a release so fast in the last weeks instead of keeping a low profile. &lt;/p&gt;



&lt;p&gt;If this code would&amp;#8217;ve shipped to major distributions, all linux servers running systemd and sshd would&amp;#8217;ve been compromised, and the attackers would be able to execute code on any of them.&lt;/p&gt;



&lt;p&gt;As far as I understand, the only visible log one could see is failed logging attempts in sshd logs, which is not unusual if you run a public ssh server (&lt;em&gt;which a lot of people do, me included&lt;/em&gt;).&lt;/p&gt;



&lt;p&gt;As I see the exploit the code would be executed in the context of sshd, which usually runs as root so the attackers would have a way of executing code on any compromised server using root rights. &lt;em&gt;An absolute nightmare&lt;/em&gt;.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;The same old Open Source problem&lt;/h2&gt;



&lt;p&gt;&lt;strong&gt;We all need to be super careful&lt;/strong&gt; when we use Open Source &amp;#8211; and we all do use it, either by choice or because literally every computer on this planet runs on some sort of Open Source software. Open Source is the base of all of computing, it&amp;#8217;s the software which runs public clouds (AWS, Azure, Google, &amp;#8230;), its the code used in Apps and Websites, it&amp;#8217;s the editors we use (Code, vim, &amp;#8230;), in the apps on our phones &amp;#8212; we really dodged a huge bullet here, and who knows how many are hidden. It&amp;#8217;s unlikely this is the only such attack going on, and we all need to be on alert. &lt;/p&gt;



&lt;p&gt;At the core of this issue we once again have a tool maintained by a single person, which is used in production at every company (due to it being a dependency in tools such as &lt;code&gt;systemd&lt;/code&gt;).&lt;/p&gt;



&lt;p&gt;As always, &lt;a href=&quot;https://xkcd.com/2347/&quot;&gt;there&amp;#8217;s a relevant xkcd comic&lt;/a&gt;.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image aligncenter size-large&quot;&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://i0.wp.com/imgs.xkcd.com/comics/dependency.png?ssl=1&quot; alt=&quot;A xkcd comic depicting a lot of tiny wooden blocks standing on each other, with one small block holding a lot of the weight. Text on top reads &amp;quot;All modern digital infrastructure&amp;quot;, a arrow pointing to the small wooden block holding everything reads &amp;quot;A project some random person in Nebraska has been thanklessly maintaining since 2003&amp;quot;&quot; style=&quot;object-fit:cover&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/figure&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Final notes&lt;/h2&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;systemd is not at fault, neither is the maintainer of xz &lt;/h3&gt;



&lt;p&gt;It&amp;#8217;s easy to point fingers, and it&amp;#8217;s not my intend to do. Neither &lt;code&gt;systemd&lt;/code&gt; nor the Lasse Collin (the original xz maintainer) are at fault. &lt;/p&gt;



&lt;p&gt;The attack targeted &lt;code&gt;xz&lt;/code&gt; for its usage in &lt;code&gt;systemd&lt;/code&gt;, and probably for its small maintainer base (&lt;em&gt;1 person&lt;/em&gt;), which made getting in on the project easier than getting into a big community.&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;This is no easy attack&lt;/h3&gt;



&lt;p&gt;The amount of planning and time required to pull of such an attack is massive. It requires deep knowledge of linux systems and the way various  system parts interact with each other during system initialisation and scheduling.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links and sources&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;Russ Cox xz Timeline &lt;a href=&quot;https://research.swtch.com/xz-timeline&quot;&gt;https://research.swtch.com/xz-timeline&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;Exploit demo &lt;a href=&quot;https://github.com/amlweems/xzbot/tree/main&quot;&gt;https://github.com/amlweems/xzbot&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;Techies vs. spies &lt;a href=&quot;https://lcamtuf.substack.com/p/technologist-vs-spy-the-xz-backdoor&quot;&gt;https://lcamtuf.substack.com/p/technologist-vs-spy-the-xz-backdoor&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;Original report on openwall.com &lt;a href=&quot;https://www.openwall.com/lists/oss-security/2024/03/29/4&quot;&gt;https://www.openwall.com/lists/oss-security/2024/03/29/4&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;xz Developer notes on the incident &lt;a href=&quot;https://tukaani.org/xz-backdoor/&quot;&gt;https://tukaani.org/xz-backdoor/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Footnotes&lt;/h2&gt;


&lt;ol class=&quot;wp-block-footnotes&quot;&gt;&lt;li id=&quot;c7269876-e32a-4568-85b7-3aea8fe8b880&quot;&gt;Filippo Valsorda explains the exploit &lt;a href=&quot;https://bsky.app/profile/filippo.abyssdomain.expert/post/3kowjkx2njy2b&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener nofollow&quot;&gt;in this bluesky thread&lt;/a&gt; &lt;a href=&quot;#c7269876-e32a-4568-85b7-3aea8fe8b880-link&quot; aria-label=&quot;Jump to footnote reference 1&quot;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;li id=&quot;4aa8b4c0-c8ca-4495-8c32-000c22f4c938&quot;&gt;&lt;code&gt;RCE&lt;/code&gt; = Remote Code Execution &lt;a href=&quot;#4aa8b4c0-c8ca-4495-8c32-000c22f4c938-link&quot; aria-label=&quot;Jump to footnote reference 2&quot;&gt;↩︎&lt;/a&gt;&lt;/li&gt;&lt;/ol&gt;</content>
  </entry>
  <entry>
    <title type="html">I don&amp;#8217;t like Python</title>
    <link href="https://kevin.gimbel.dev/blog/2024/03/i-dont-like-python/" />
    <id>https://kevingimbel.de/blog/2024/03/i-dont-like-python/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;&amp;#8230; and there&amp;#8217;s a reason: Dependency Management. Coming from languages like Node, Go, and Rust I am used to decent dependency management (although Go was really bad at it for the first years, and has become decent only recently with the addition of go mod.). Python, in my opinion, lacks a good and well-defined Package [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;&amp;#8230; and there&amp;#8217;s a reason: &lt;em&gt;Dependency Management&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;Coming from languages like Node, Go, and Rust I am used to decent dependency management (&lt;em&gt;although Go was really bad at it for the first years&lt;/em&gt;, and has become decent only recently with the addition of &lt;code&gt;go mod&lt;/code&gt;.). Python, &lt;em&gt;in my opinion&lt;/em&gt;, lacks a good and well-defined Package Management. I&amp;#8217;m sure there are ways, but the past days I spent working with and around Virtual Environments, global installations, and figuring out what the heck &lt;a href=&quot;https://peps.python.org/pep-0668/&quot;&gt;PEP-668&lt;/a&gt; is supposed to mean. I don&amp;#8217;t want to rant, I could do that on &lt;a href=&quot;https://fosstodon.org/@KevinGimbel&quot;&gt;Mastodon&lt;/a&gt; or &lt;a href=&quot;https://bsky.app/profile/kevin.gimbel.dev&quot;&gt;Bsky&lt;/a&gt;. No, I want to share some of my thoughts as a non-Python Developer having to work with Python as part of my Job.&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: There&amp;#8217;s a not-so-small chance I&amp;#8217;m just not deep enough into Python and its eco system. I&amp;#8217;m very happy to learn and discuss so &lt;em&gt;please tell me&lt;/em&gt; if and where I am wrong.&lt;br&gt;Also, I do enjoy writing Python. It&amp;#8217;s a fun language, and I&amp;#8217;m starting to like it. This is also part of the reason I&amp;#8217;m so frustrated with the package and dependency management.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;pip&lt;/h2&gt;



&lt;p&gt;My first touchpoint with Python dependency management was &lt;a href=&quot;https://pypi.org/project/pip/&quot;&gt;pip&lt;/a&gt;. It&amp;#8217;s a tool which can be used to install python packages, for example by reading a &lt;code&gt;requirements.txt&lt;/code&gt; or being passed a name on the CLI directly. All the things are installed&amp;#8230; in a global directory?! In my case things are placed in &lt;code&gt;/opt/homebrew/lib/python3.12/site-packages&lt;/code&gt; &amp;#8211; and it looks as if this is where all the packages for all my installed tools are. 😳&lt;/p&gt;



&lt;p&gt;So if two tools require different versions &amp;#8230; what happens? &lt;a href=&quot;https://pip.pypa.io/en/stable/topics/dependency-resolution/&quot;&gt;According to the pip documentation&lt;/a&gt;, pip will try and resolve all the dependencies and the dependency dependencies and so on &amp;#8211; it&amp;#8217;s a lot of resolving to do, and a complex task. This is something all package managers need to do, especially if they try to be smart about re-using already installed libraries.&lt;/p&gt;



&lt;p&gt;Anyhow, with pip install we have global packages and nothing is scoped to the tool being installed (or the library required by code). &lt;strong&gt;&lt;em&gt;Everything is global.&lt;/em&gt;&lt;/strong&gt; So we must be lucky that things don&amp;#8217;t break, and tool requirements must be loose to allow for minor or patch updates.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;venv&lt;/h2&gt;



&lt;p&gt;Enter &lt;code&gt;venv&lt;/code&gt;, or virtual environments. &lt;code&gt;venv&lt;/code&gt; itself is part of the &lt;a href=&quot;https://docs.python.org/3/library/venv.html&quot;&gt;Python standard library&lt;/a&gt; and solves the issue of globally installed dependencies. It creates a folder in the project path, installs all libraries into the path and uses pip and python binaries from this path as well so we have a encapsulated environment in which we can execute our code. This is awesome!&lt;/p&gt;



&lt;p&gt;It feels a bit like &lt;code&gt;npm&lt;/code&gt;, which also installs copies of the used libraries in a local folder (&lt;code&gt;node_modules&lt;/code&gt;). Why this is not something pip does I do not understand. It seems reasonable to offer a way of managing and using virtual environment directly from pip-  which brings us to the next tool. &lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;pipx&lt;/h2&gt;



&lt;p&gt;Now this are coming together!&lt;/p&gt;



&lt;p&gt;&lt;a href=&quot;https://pipx.pypa.io/stable/&quot;&gt;&lt;code&gt;pipx&lt;/code&gt; is a tool especially used for installing python executables&lt;/a&gt; &amp;#8211; in self-contained virtual environments, all managed by &lt;code&gt;pipx&lt;/code&gt;. This is functionallity I would expect from pip, and similar to &lt;code&gt;npm install -g&lt;/code&gt;, which installs a tool and its dependencies in a global scope.&lt;/p&gt;



&lt;p&gt;With pipx, we &lt;em&gt;finally&lt;/em&gt; have a tool which allows us to execute a command like &amp;#8220;&lt;code&gt;pipx install ansible&lt;/code&gt;&amp;#8221; and get a fully working, venv-enabled ansible installation in &lt;code&gt;~/.local/pipx/venvs/ansible&lt;/code&gt; (the path may differ on your system).&lt;/p&gt;



&lt;p&gt;&lt;em&gt;Perfection&lt;/em&gt; 🧑‍🍳😘&lt;/p&gt;



&lt;p&gt;Although pipx is a great solution, and I&amp;#8217;m using it for all tool installations myself, for my specific work-related case it wasn&amp;#8217;t a good solution. The problem I faced was developers having issues updating one of the tools my team provides them. They ran into the &lt;em&gt;PEP-668&lt;/em&gt; issue and couldn&amp;#8217;t update the tool unless they specified &lt;code&gt;--break-system-packages&lt;/code&gt; which isn&amp;#8217;t something they should do &amp;#8211; and I wouldn&amp;#8217;t want to tell them to do!&lt;/p&gt;



&lt;p&gt;I ended up using &lt;code&gt;venv&lt;/code&gt; directly to ensure our tool is installed in a reliable location on ever users computer, the installer we used will also manage the &lt;code&gt;PATH&lt;/code&gt; by adding the venv binary into the &lt;code&gt;.bashrc&lt;/code&gt; or &lt;code&gt;.zshrc&lt;/code&gt;, and also creates a symlink into &lt;code&gt;/usr/local/bin&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;In the process I also added a &amp;#8220;update&amp;#8221; command to make further updates easier, and I found a nice way of doing it in my opinion:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;python&quot; class=&quot;language-python&quot;&gt;import sys
import subprocess

def update():
  subprocess.check_call([
    sys.executable, 
    &quot;-m&quot;, 
    &quot;pip&quot;, 
    &quot;install&quot;, 
    &quot;-U&quot;, 
    &quot;--index-url&quot;, f&quot;{index_url}&quot;, 
    &quot;--extra-index-url&quot;, &quot;https://pypi.org/simple&quot;,  
    &quot;toolname&quot;
  ])&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This code will use the python executable which is used to run the code, then execute a &lt;code&gt;pip install -U&lt;/code&gt; which updates the tool (here named &lt;code&gt;toolname&lt;/code&gt;). The python executable is the one from the virtual environment, so the update command is always executed in the context of the venv &amp;#8211; neat! 🐍&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;I wanna say that &lt;em&gt;&amp;#8220;I don&amp;#8217;t like Python&amp;#8221;&lt;/em&gt; was a little clickbait-y. I do like Python, and I see its benefits. Especially when compared to shell scripting, especially for &lt;a href=&quot;https://en.wikipedia.org/wiki/Glue_code&quot;&gt;Glue code&lt;/a&gt; in Infrastructure and in one-off tooling and scripting. Still, for complex CLI tools I, &lt;em&gt;personally&lt;/em&gt;, would choose either Go or Rust. Both have great libraries (&lt;a href=&quot;https://github.com/clap-rs/clap&quot;&gt;clap&lt;/a&gt; for Rust, and &lt;a href=&quot;https://github.com/spf13/cobra&quot;&gt;cobra&lt;/a&gt; for Go), compile to binaries, and are easy to distribute with all dependencies being bundled in the binary.&lt;/p&gt;



&lt;p&gt;If you want to discuss this post, feel free to comment or join the discussion on &lt;a href=&quot;https://fosstodon.org/@KevinGimbel/112081606795855915&quot;&gt;Mastodon&lt;/a&gt;, &lt;a href=&quot;https://bsky.app/profile/kevin.gimbel.dev/post/3knibkmkmgs2b&quot;&gt;Bluesky&lt;/a&gt;, or &lt;a href=&quot;https://www.linkedin.com/posts/kevingimbel_i-dont-likepython-activity-7173222831135117312-Jgh7?utm_source=share&amp;amp;utm_medium=member_desktop&quot;&gt;LinkedIn&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">A little hiccup</title>
    <link href="https://kevin.gimbel.dev/blog/2024/03/a-little-hiccup/" />
    <id>https://kevingimbel.de/blog/2024/03/a-little-hiccup/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Well, looks like kevingimbel.de was (partly?) down &amp;#8211; as far as I can tell the culprit was ipv6! In the past I&amp;#8217;ve not really bothered with ipv6 much but it feels odd to leave it out these days. Sorry for the inconvenience to all my 2 readers, I&amp;#8217;m sure you&amp;#8217;ve missed my blog on this [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;Well, looks like kevingimbel.de was (partly?) down &amp;#8211; as far as I can tell the culprit was ipv6! In the past I&amp;#8217;ve not really bothered with ipv6 much but it feels odd to leave it out these days.&lt;/p&gt;



&lt;p&gt;Sorry for the inconvenience to all my 2 readers, I&amp;#8217;m sure you&amp;#8217;ve missed my blog on this Friday night. Once I know more I’ll write a follow-up. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: Hacking Terraform State for Privilege Escalation</title>
    <link href="https://kevin.gimbel.dev/blog/2024/03/re-hacking-terraform-state-for-privilege-escalation/" />
    <id>https://kevingimbel.de/blog/2024/03/re-hacking-terraform-state-for-privilege-escalation/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;An interesting attack vector which uses empty terraform providers and a modified state file to execute code! There’s lots to be excited about as a red teamer and scared of as a blue teamer, but at the top of the list is that the attack does not require a “terraform apply”. Even if the human reviewing [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;An interesting attack vector which uses empty terraform providers and a modified state file to execute code! &lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;There’s lots to be excited about as a red teamer and scared of as a blue teamer, but at the top of the list is that the attack does not require a “terraform apply”. &lt;strong&gt;Even if the human reviewing this plan doesn’t approve it, the code has already executed.&lt;/strong&gt;&lt;/p&gt;
&lt;cite&gt;— Daniel Grzelak&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;Read the full article on &lt;a href=&quot;https://blog.plerion.com/hacking-terraform-state-privilege-escalation/&quot;&gt;https://blog.plerion.com/hacking-terraform-state-privilege-escalation/&lt;/a&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">TIL: k9s plugins</title>
    <link href="https://kevin.gimbel.dev/blog/2024/01/til-k9s-plugins/" />
    <id>https://kevingimbel.de/blog/2024/01/til-k9s-plugins/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;k9s is a powerful Kubernetes terminal UI. Recently, I discovered how to add plugins, to make it even more powerful and integrate with other tools and systems!&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;&lt;a href=&quot;https://k9scli.io&quot;&gt;k9s&lt;/a&gt; is an awesome terminal UI and tool to work with Kubernetes clusters. I&amp;#8217;m using it daily for basically all my Kubernetes related work tasks.&lt;/p&gt;



&lt;p&gt;Recently I learned there&amp;#8217;s a super straight forward way of adding &amp;#8220;&lt;a href=&quot;https://k9scli.io/topics/plugins/&quot;&gt;plugins&lt;/a&gt;&amp;#8221; to k9s, which are basically shortcuts for calling (&lt;em&gt;shell&lt;/em&gt;) commands.&lt;/p&gt;



&lt;p&gt;Take the following example from my &lt;code&gt;$XDG_CONFIG_HOME/k9s/plugins.yaml&lt;/code&gt; file&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;yaml&quot; class=&quot;language-yaml&quot;&gt;grafana-pod:
    shortCut: Ctrl-L
    confirm: false
    description: Grafana
    scopes:
    - pods
    background: true
    command: open
    args:
    - https://my-grafana.tld/d/abcdefghi/my-dashboard?orgId=1&amp;amp;var-Datasource=prometheus-$CLUSTER&amp;amp;var-Namespace=$NAMESPACE&amp;amp;var-app_kubernetes_io_name=All&amp;amp;var-Pod=$COL-NAME&amp;amp;from=now-6h&amp;amp;to=now
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Let&amp;#8217;s have a look at each line:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shortCut&lt;/code&gt; defines the key combination which invokes the plugin&lt;/li&gt;



&lt;li&gt;&lt;code&gt;confirm&lt;/code&gt; can be true or false and will show a confirmation dialog if set to true before invoking the plugin&lt;/li&gt;



&lt;li&gt;&lt;code&gt;description&lt;/code&gt; is the name shown in the UI&lt;/li&gt;



&lt;li&gt;&lt;code&gt;scopes&lt;/code&gt; defines on what resources the plugin is available (will be hidden in the UI otherwise)&lt;/li&gt;



&lt;li&gt;&lt;code&gt;background&lt;/code&gt; defines if the plugin runs in the background or re-uses the same terminal (minimising k9s) &lt;/li&gt;



&lt;li&gt;&lt;code&gt;command&lt;/code&gt; is the command or tool to be invoked. It can be any command available in the shell, like &lt;code&gt;open&lt;/code&gt; (to open a URL), &lt;code&gt;kubectl&lt;/code&gt;, &amp;#8230;&lt;/li&gt;



&lt;li&gt;&lt;code&gt;args&lt;/code&gt; is a list of arguments passed to the &lt;code&gt;command&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;1024&quot; height=&quot;632&quot; data-attachment-id=&quot;492&quot; data-permalink=&quot;https://kevingimbel.de/blog/2024/01/til-k9s-plugins/screenshot-2024-01-03-at-10-26-17/&quot; data-orig-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17.png?fit=2134%2C1318&amp;amp;ssl=1&quot; data-orig-size=&quot;2134,1318&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screenshot of k9s&quot; data-image-description=&quot;&amp;lt;p&amp;gt;A screenshot showing k9s, there&amp;#8217;s a red highlight box around the &amp;#8220;ctrl-l&amp;#8221; shortcut which opens Grafana&amp;lt;/p&amp;gt;
&quot; data-image-caption=&quot;&amp;lt;p&amp;gt;A screenshot showing the ctrl-l shortcut of the Grafana plugin&amp;lt;/p&amp;gt;
&quot; data-medium-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17.png?fit=300%2C185&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17.png?fit=1024%2C632&amp;amp;ssl=1&quot; src=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17.png?resize=1024%2C632&amp;#038;ssl=1&quot; alt=&quot;&quot; class=&quot;wp-image-492&quot; srcset=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17.png?resize=1024%2C632&amp;amp;ssl=1 1024w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17.png?resize=300%2C185&amp;amp;ssl=1 300w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17.png?resize=768%2C474&amp;amp;ssl=1 768w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17.png?resize=1536%2C949&amp;amp;ssl=1 1536w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17.png?resize=2048%2C1265&amp;amp;ssl=1 2048w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;figcaption class=&quot;wp-element-caption&quot;&gt;A screenshot showing the ctrl-l shortcut of the Grafana plugin&lt;/figcaption&gt;&lt;/figure&gt;



&lt;p&gt;When I hit &lt;code&gt;CTRL-L&lt;/code&gt;, the &lt;code&gt;open&lt;/code&gt; command is invoked and open Grafana in my browser. It passes all relevant variables to the dashboard: &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$CLUSTER&lt;/code&gt; is the name of the current cluster&lt;/li&gt;



&lt;li&gt;&lt;code&gt;$NAMESPACE&lt;/code&gt; is the currently active namespace&lt;/li&gt;



&lt;li&gt;&lt;code&gt;$COL-NAME&lt;/code&gt; is the Name in the current column (the selected pod in the list of pods)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;It&amp;#8217;s a super powerful shortcut do view metrics about a pod in an instant, and made my life a lot easier! &lt;/p&gt;



&lt;p&gt;More fields can be seen in the documentation at &lt;a href=&quot;https://k9scli.io/topics/plugins/&quot;&gt;https://k9scli.io/topics/plugins/&lt;/a&gt; &lt;/p&gt;



&lt;p&gt;k9s itself is already a powerful tool, but this extensibility just makes it so much more flexible!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Additional links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/derailed/k9s/tree/master/plugins&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Community plugins&lt;/a&gt; &lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://k9scli.io&quot;&gt;k9s website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">Eleventy 3.0.0-alpha.2</title>
    <link href="https://kevin.gimbel.dev/blog/2023/12/eleventy-3-0-0-alpha-2/" />
    <id>https://kevingimbel.de/blog/2023/12/eleventy-3-0-0-alpha-2/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;✨ A small update on moving my website to 11ty 3.0.0-alpha.2 &lt;/p&gt;
</summary>
    <content type="html">
&lt;p class=&quot;has-large-font-size&quot;&gt;I just updated &lt;a href=&quot;https://kevin.gimbel.dev/ops&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://kevin.gimbel.dev/ops&lt;/a&gt; to Eleventy 3.0.0-alpha.2 &lt;/p&gt;



&lt;p&gt;The update was rather smooth, which I expected given the small code base of my website. The diff can be seen here on GitHub: &lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/commit/c4bf1eba988869b54131a2cb85e031311503707e&quot;&gt;https://github.com/KevinGimbel/kevin.gimbel.dev/commit/c4bf1eba988869b54131a2cb85e031311503707e&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;After setting &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; in my package json I went through the files one by one changing all &lt;code&gt;require()&lt;/code&gt; calls to &lt;code&gt;imports&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;One thing took a bit to get working: I use the eleventy package.json to read meta data about eleventy, and apparently with imports the type must be set:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;javascript&quot; class=&quot;language-javascript&quot;&gt;import eleventyPackage from &quot;@11ty/eleventy/package.json&quot; with { type: &#39;json&#39; };&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;code&gt;with { type: &#39;json&#39; };&lt;/code&gt; tells Node that this thing should be imported as JSON. The syntax is new to me and I&amp;#8217;ve never seen it before so that was exciting!&lt;/p&gt;



&lt;p&gt;The only thing that isn&amp;#8217;t working on MacOS is the built-in. There&amp;#8217;s already a GitHub issue about it &lt;a href=&quot;https://github.com/11ty/eleventy/issues/3128&quot;&gt;https://github.com/11ty/eleventy/issues/3128&lt;/a&gt; &amp;#8211; everything else seems to work fine.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Additional Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachleat.com/web/eleventy-v3-alpha/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://www.zachleat.com/web/eleventy-v3-alpha/&lt;/a&gt; &lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://www.11ty.dev/blog/canary-eleventy-v3/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://www.11ty.dev/blog/canary-eleventy-v3/ &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">TIL: Why there is /bin and /usr/bin, /lib and /usr/lib, etc on Unix systems</title>
    <link href="https://kevin.gimbel.dev/blog/2023/11/til-why-there-is-bin-and-usr-bin-lib-and-usr-lib-on-unix-systems/" />
    <id>https://kevingimbel.de/blog/2023/11/til-why-there-is-bin-and-usr-bin-lib-and-usr-lib-on-unix-systems/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;If you&amp;#8217;ve ever navigated around a Unix system you may have wondered why there are /bin and usr/bin directories or /lib and /usr/lib or /sbin and /usr/sbin &amp;#8211; or like me, you just took it for something that probably has any meaning but isn&amp;#8217;t relevant enough to look into. Well, today it became relevant: When [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;If you&amp;#8217;ve ever navigated around a Unix system you may have wondered why there are /bin and usr/bin directories or /lib and /usr/lib or /sbin and /usr/sbin &amp;#8211; or like me, you just took it for something that probably has any meaning but isn&amp;#8217;t relevant enough to look into.&lt;/p&gt;



&lt;p&gt;Well, today it became relevant: When upgrading a Docker image from Debian 11 to 12 I encountered a lot of issues with a utility called &amp;#8220;&lt;code&gt;usrmerge&lt;/code&gt;&amp;#8220;, and this sent me down a rabbit hole.&lt;/p&gt;



&lt;p&gt;As with most things in the Unix world it started with someone doing a thing for reasons of technical limitation.&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote has-text-align-left is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;You know how Ken Thompson and Dennis Ritchie created Unix on a PDP-7 in 1969? Well around 1971 they upgraded to a PDP-11 with a pair of RK05 disk packs (1.5 megabytes each) for storage. When the operating system grew too big to fit on the first RK05 disk pack (their root filesystem) they let it leak into the second one, which is where all the user home directories lived (which is why the mount was called /usr).&lt;/p&gt;
&lt;cite&gt;&lt;strong&gt;Rob Landley&lt;/strong&gt;, via &lt;a href=&quot;http://lists.busybox.net/pipermail/busybox/2010-December/074114.html&quot;&gt;http://lists.busybox.net/pipermail/busybox/2010-December/074114.html&lt;/a&gt; &lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;So /usr/ existed because the Operating System no longer fit on the first disk, so &amp;#8220;some parts but nut all&amp;#8221; of the OS were split to the mounted second disk &amp;#8211; &lt;em&gt;reasonable&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;The quote continues: &lt;em&gt;&amp;#8220;[&amp;#8230;] They replicated all the OS directories under there (/bin, /sbin, /lib, /tmp&amp;#8230;) and wrote files to those new directories because their original disk was out of space.&amp;#8221;&lt;/em&gt; &amp;#8211; later on, they made a new &lt;code&gt;/home&lt;/code&gt; directory where all the user specific stuff lived and &lt;code&gt;/usr&lt;/code&gt; and &lt;code&gt;/bin&lt;/code&gt; could both be used for the OS.&lt;/p&gt;



&lt;p&gt;Well, &amp;#8230; the split between &lt;code&gt;/bin&lt;/code&gt; and &lt;code&gt;/usr/bin&lt;/code&gt; has never been reverted or &amp;#8220;fixed&amp;#8221;, which is why a thing from the 1970s still exists in modern-day Unix systems (Debian, Ubuntu, and MacOS all have these two directories)! &lt;/p&gt;



&lt;p&gt;Enter today, 28th November 2023, where I try and upgrade a Debian 11 based image in a Docker build and what breaks my build? A tool called usrmerge, which is supposed to fix this &lt;code&gt;/bin vs. /usr/bin&lt;/code&gt; nonsense for Debian 12 and onward.The solution is &amp;#8211; basically &amp;#8211; to merge everything from &lt;code&gt;/bin&lt;/code&gt; into &lt;code&gt;/usr/bin&lt;/code&gt;, then symlink /bin/ to &lt;code&gt;/usr/bin&lt;/code&gt; (and the same for &lt;code&gt;/lib&lt;/code&gt; and &lt;code&gt;/sbin&lt;/code&gt;).&lt;/p&gt;



&lt;p&gt;I ended up not upgrading the Debian 11 image to Debian 12, instead I enabled &lt;code&gt;bullseye-backports&lt;/code&gt; to update the software inside the Docker image &amp;#8211; but that&amp;#8217;s a story for another day.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Additional reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lists.busybox.net/pipermail/busybox/2010-December/074114.html&quot;&gt;http://lists.busybox.net/pipermail/busybox/2010-December/074114.html&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">Integrating WordPress Posts with 11ty</title>
    <link href="https://kevin.gimbel.dev/blog/2023/11/integrating-wordpress-posts-with-11ty/" />
    <id>https://kevingimbel.de/blog/2023/11/integrating-wordpress-posts-with-11ty/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;In this blog post I document how I integrated articles from a WordPress site into my 11ty website &amp;#8211; it was surprisingly straight forward to do!&lt;/p&gt;
</summary>
    <content type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;If you&amp;#8217;ve followed me around the &lt;em&gt;internetz&lt;/em&gt; it comes as no surprise that I&amp;#8217;m a huge fan of &lt;a href=&quot;https://www.11ty.dev&quot;&gt;11ty&lt;/a&gt; &amp;#8211; a JavaScript based static-site generator that&amp;#8217;s super flexible, can be extended, and is really fun to work with.&lt;/p&gt;



&lt;p&gt;When I switched my &lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de&quot;&gt;11ty based website&lt;/a&gt; to &lt;a href=&quot;https://kevingimbel.de/blog/2022/11/back-to-basics-wordpress/&quot;&gt;WordPress&lt;/a&gt; the main reason was that I&amp;#8217;ve grown tired of writing Markdown files and I wanted something with a backend again, something where I could draft an article on-the-go and finish it later on my computer and have proper Media management as well; Media management especially was (and is) annoying  without a proper CMS in my opinion. While I&amp;#8217;m happy with WordPress as a CMS, I&amp;#8217;m not so happy with theming and PHP. &lt;em&gt;I really don&amp;#8217;t want to write a theme in PHP (like, really really don&amp;#8217;t want to!)&lt;/em&gt; so I&amp;#8217;ve rolled with the default theme (&lt;em&gt;Twenty Twenty-Three&lt;/em&gt;) which is fine and does it&amp;#8217;s job, but I miss the &lt;strong&gt;fun&lt;/strong&gt; in creating and building websites.&lt;/p&gt;



&lt;p&gt;Besides the WordPress based &lt;em&gt;kevingimbel.de&lt;/em&gt; I&amp;#8217;ve also had a &lt;code&gt;11ty&lt;/code&gt; site published at &lt;a href=&quot;https://kevin.gimbel.dev/ops/&quot;&gt;kevin.gimbel.dev/ops&lt;/a&gt; &amp;#8211; a little site showcasing some of the technologies I&amp;#8217;ve worked with, and mainly created as a showcase (&lt;em&gt;and  for fun!&lt;/em&gt;) when I was looking for a new job in 2022.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;&lt;strong&gt;Well, longest story short:&lt;/strong&gt;&lt;/em&gt; I just finished integrating this blog (even &lt;em&gt;THIS ARTICLE&lt;/em&gt;) automatically with my &lt;code&gt;11ty&lt;/code&gt; site! So all articles are now published on &lt;a href=&quot;https://kevin.gimbel.dev/blog/&quot;&gt;kevin.gimbel.dev/blog&lt;/a&gt; as well.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image alignwide size-large&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;1024&quot; height=&quot;499&quot; data-attachment-id=&quot;401&quot; data-permalink=&quot;https://kevingimbel.de/blog/2023/11/integrating-wordpress-posts-with-11ty/2023-10-31-11-08-44-kevin-gimbel-dev-3422f747f145/&quot; data-orig-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145.png?fit=1882%2C918&amp;amp;ssl=1&quot; data-orig-size=&quot;1882,918&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145.png?fit=300%2C146&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145.png?fit=1024%2C499&amp;amp;ssl=1&quot; src=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145.png?resize=1024%2C499&amp;#038;ssl=1&quot; alt=&quot;Screenshot showing the blog page on kevin.gimbel.dev
It&#39;s white boxes with text on a blue background.&quot; class=&quot;wp-image-401&quot; srcset=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145.png?resize=1024%2C499&amp;amp;ssl=1 1024w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145.png?resize=300%2C146&amp;amp;ssl=1 300w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145.png?resize=768%2C375&amp;amp;ssl=1 768w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145.png?resize=1536%2C749&amp;amp;ssl=1 1536w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145.png?w=1882&amp;amp;ssl=1 1882w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;Visually it isn&amp;#8217;t anything to brag to your Front-End Friends about, but it does the job &amp;#8211; it shows content.&lt;/p&gt;



&lt;p&gt;So without further ado, let&amp;#8217;s get to the technical side of it all!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;The Goal&lt;/h2&gt;



&lt;p&gt;&amp;#8230; is to have &lt;code&gt;11ty&lt;/code&gt; render pages from posts fetched from the WordPress API. The solution described here doesn&amp;#8217;t render WordPress pages yet (tho maybe I&amp;#8217;ll implement this in the future).&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Creating pages from data&lt;/h2&gt;



&lt;p&gt;&lt;code&gt;11ty&lt;/code&gt; can create &lt;a href=&quot;https://www.11ty.dev/docs/pages-from-data/&quot;&gt;pages from data&lt;/a&gt; &amp;#8211; which means we can use plain old JavaScript to parse a RSS feed (or JSON feed), then turn it into a bunch of pages.&lt;/p&gt;



&lt;p&gt;The magic happens in the data file at &lt;code&gt;src/_data/blog.js&lt;/code&gt;. The &lt;code&gt;_data&lt;/code&gt; directory is a special directory for all &amp;#8230; data. Whatever the JavaScript file returns is available inside of all &lt;code&gt;11ty&lt;/code&gt; pages and templates, usable as  &lt;code&gt;{{ blog }}&lt;/code&gt; (same name as the file).&lt;/p&gt;



&lt;p&gt;The script below is all it takes. I use the &lt;a href=&quot;https://www.npmjs.com/package/node-fetch&quot;&gt;node-fetch&lt;/a&gt; module to load the last 100 posts from &lt;em&gt;kevingimbel.de&lt;/em&gt;, then I extract the fields I want to use (&lt;code&gt;title&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;excerpt&lt;/code&gt;, and &lt;code&gt;slug&lt;/code&gt;), and finally at the end of the file the whole &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; is exported.&lt;/p&gt;



&lt;pre title=&quot;src/_data/blog.js&quot; class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;javascript&quot; class=&quot;language-javascript line-numbers&quot;&gt;const fetch = (...args) =&amp;gt; import(&#39;node-fetch&#39;).then(({ default: fetch }) =&amp;gt; fetch(...args));
const response = fetch(&#39;https://kevingimbel.de/wp-json/wp/v2/posts?orderby=date&amp;amp;order=desc&amp;amp;per_page=100&#39;);

let data = response.then((response) =&amp;gt; {
    return response.json();
}).then(data =&amp;gt; {
    let _posts = [];
    data.forEach(item =&amp;gt; {
        var post = {
            title: item.title.rendered,
            link: item.link,
            content: item.content.rendered.replace(&quot;comment below 👇&quot;, `&amp;lt;a href=&quot;${item.link}#respond&quot;&amp;gt;comment on the original article on kevingimbel.de&amp;lt;/a&amp;gt;`),
            excerpt: item.excerpt.rendered,
            slug: item.link.replace(&#39;https://kevingimbel.de/&#39;, &#39;&#39;)
        }
        _posts.push(post);

    });

    return _posts;
}).catch(err =&amp;gt; {
    console.log(&quot;Error retrieving posts: &quot;, err);
});

module.exports = data;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Some interesting parts in the script:&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;content&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;In the content field I replace the string &amp;#8220;comment below 👇&amp;#8221; with a link to the original article&amp;#8217;s comment box (on kevingimbel.de, the WordPress site). This is because the &lt;code&gt;11ty&lt;/code&gt; site has no comments and I don&amp;#8217;t want to implement comments there (&lt;em&gt;maybe I can integrate the WordPress comments somehow&lt;/em&gt; 🤔). &lt;/p&gt;



&lt;pre class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;javascript&quot; class=&quot;language-javascript&quot;&gt;item.content.rendered.replace(&quot;comment below 👇&quot;, `&amp;lt;a href=&quot;${item.link}#respond&quot;&amp;gt;comment on the original article on kevingimbel.de&amp;lt;/a&amp;gt;`),&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;strong&gt;slug&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;I wanted to have the same URLs as on &lt;em&gt;kevingimbel.de&lt;/em&gt; so for the slug I just removed the &lt;code&gt;https://kevingimbel.de/&lt;/code&gt; prefix from the links &amp;#8211; the slug is later used in the template files.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;javascript&quot; class=&quot;language-javascript&quot;&gt;slug: item.link.replace(&#39;https://kevingimbel.de/&#39;, &#39;&#39;)&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;11ty templates&lt;/h2&gt;



&lt;p&gt;Data alone isn&amp;#8217;t enough, we also need to write some templates. There are two templates (I use &lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot;&gt;Nunjucks&lt;/a&gt;, but it&amp;#8217;s basically the same for every supported template language).&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blog-page.njk&lt;/code&gt; which is the single page of a blog entry&lt;/li&gt;



&lt;li&gt;&lt;code&gt;blog.njk&lt;/code&gt; which is the blog list (feed)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;strong&gt;blog-page.njk&lt;/strong&gt; (&lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/blob/91ded96d457bb80f549d80314dc51198f495c6ac/src/blog-page.njk&quot;&gt;Github Link&lt;/a&gt;)&lt;/p&gt;



&lt;p&gt;The important part is the frontmatter &amp;#8211; the header of the template.&lt;/p&gt;



&lt;pre title=&quot;src/blog-page.njk&quot; class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;yaml&quot; class=&quot;language-yaml&quot;&gt;---
pagination:
    data: blog
    size: 1
    alias: article
permalink: &quot;{{ article.slug }}&quot;
---&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here we reference the data (&lt;code&gt;data: blog&lt;/code&gt;) we defined in &lt;code&gt;src/_data/blog.js&lt;/code&gt;, use it as pagination and define a new variable named article (&lt;code&gt;alias: article&lt;/code&gt;) which is a reference to the current article being rendered. &lt;/p&gt;



&lt;p&gt;The &lt;code&gt;permalink&lt;/code&gt; is where the slug from above comes into play: For each article we need to define a permalink because &lt;code&gt;11ty&lt;/code&gt; cannot automatically determine a path, and here we use the value of &lt;code&gt;article.slug&lt;/code&gt; which is the URL path from WordPress.&lt;/p&gt;



&lt;p&gt;The single page blog template itself is pretty much &amp;#8220;standard&amp;#8221; 11ty code:&lt;/p&gt;



&lt;pre title=&quot;src/blog-page.njk&quot; class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;markup&quot; class=&quot;language-markup&quot;&gt;{% extends &quot;base.njk&quot; %}

{% block head %}
&amp;lt;link rel=&quot;canonical&quot; href=&quot;{{ article.link }}&quot; /&amp;gt;
{% endblock %}

{% block content %}

&amp;lt;section class=&quot;[ f-ultra bg-accent-2 stack ] [ gr-auto gc-full ] [ c-full-width ] single-page article-page&quot;&amp;gt;
    {% include &quot;nav.njk&quot; %}

    &amp;lt;div class=&quot;article__og-box&quot;&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;i&amp;gt;&quot;{{ article.title}}&quot;&amp;lt;/i&amp;gt; was originally published on &amp;lt;a href=&quot;{{ article.link }}&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; title=&quot;Read &#39;{{ article.title}}&#39; on kevingimbel.de&quot;&amp;gt;kevingimbel.de&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;hr /&amp;gt;
    &amp;lt;div class=&quot;content&quot;&amp;gt;
        &amp;lt;h1&amp;gt;{{ article.title }}&amp;lt;/h1&amp;gt;
        {{ article.content | safe }}
    &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{% endblock %}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;I&amp;#8217;m using &lt;code&gt;{{ article.content | safe }}&lt;/code&gt; here to render the HTML retrieved from the WordPress API. &lt;/p&gt;



&lt;p&gt;One not-so-standard thing is the canonical link. This link is added to the &lt;code&gt;head&lt;/code&gt; of the HTML page and references the original article published on &lt;em&gt;kevingimbel.de&lt;/em&gt;.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;markup&quot; class=&quot;language-markup&quot;&gt;{% block head %}
&amp;lt;link rel=&quot;canonical&quot; href=&quot;{{ article.link }}&quot; /&amp;gt;
{% endblock %}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In my base template I have a block named head defined in the HTML head to dynamically add new attributes to it. (&lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/blob/91ded96d457bb80f549d80314dc51198f495c6ac/src/_includes/base.njk#L16-L17&quot;&gt;Code on GitHub&lt;/a&gt;).&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;blog.njk&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;And lastly, the &lt;code&gt;blog.njk&lt;/code&gt; page is where the blog list is rendered.&lt;/p&gt;



&lt;pre title=&quot;src/blog.njk&quot; class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;markup&quot; class=&quot;language-markup&quot;&gt;{% extends &quot;base.njk&quot; %}

{% block content %}

&amp;lt;section class=&quot;[ f-ultra bg-accent-2 stack ] [ gr-auto gc-full ] [ c-full-width ]  single-page&quot;&amp;gt;
    &amp;lt;div class=&quot;content&quot;&amp;gt;
        {% include &#39;nav.njk&#39; %}
        &amp;lt;hr /&amp;gt;

        &amp;lt;ul class=&quot;article-list&quot;&amp;gt;
        {% for article in blog %}
        &amp;lt;li class=&quot;article-list__item&quot;&amp;gt;
            &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;/{{ article.slug }}&quot;&amp;gt;{{ article.title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
            &amp;lt;p&amp;gt;{{ article.excerpt | safe }}&amp;lt;/p&amp;gt;
            &amp;lt;a href=&quot;/{{ article.slug }}&quot; class=&quot;article-list__more-link&quot;&amp;gt;Continue reading &amp;amp;gt;&amp;amp;gt;&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
        {%- endfor -%}
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{% endblock %}&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;Integrating WordPress blog posts with &lt;code&gt;11ty&lt;/code&gt; is surprisingly straight forward, thanks to the WordPress JSON API and &lt;code&gt;11ty&lt;/code&gt; data pages there was little custom code needed.&lt;/p&gt;



&lt;p&gt;There are still some TODOs:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Only 100 posts are loaded at the moment, I&amp;#8217;d like to load more and possibly cache the results somehow &amp;#8211; content rarely changes so it would be fine to only load the last posts published&lt;/li&gt;



&lt;li&gt;I&amp;#8217;d like to trigger a GitHub Action every time I publish a post&lt;/li&gt;



&lt;li&gt;The blog list looks boring, I want to make this more &lt;em&gt;fun!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.11ty.dev/docs/pages-from-data/&quot;&gt;Creating pages from data (11ty docs)&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://developer.wordpress.org/rest-api/reference/posts/&quot;&gt;WordPress Rest API docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-e381ca18b7414fdbecaeb2554e08a8ca&quot;&gt;Join the discussion on &lt;a href=&quot;https://fosstodon.org/@kevin@kevingimbel.de/111341960932334264&quot;&gt;Mastodon&lt;/a&gt; or comment below 👇&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: Announcing Rust 1.73.0</title>
    <link href="https://kevin.gimbel.dev/blog/2023/10/re-announcing-rust-1-73-0/" />
    <id>https://kevingimbel.de/blog/2023/10/re-announcing-rust-1-73-0/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Yay, Rust 1.73.0 has been released! Highlights include cleaner panic messages and the stabilisation of APIs, I&amp;#8217;m especially happy about the stabilisation of unix APIs for  `chown`, `fchown` and `lchown`.  &lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;&lt;i&gt;In reply to &lt;a class=&quot;in-reply-to&quot; href=&quot;https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html&quot;&gt;https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;



&lt;p&gt;Yay, Rust 1.73.0 has been released! Highlights include &lt;a href=&quot;https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html#cleaner-panic-messages&quot;&gt;cleaner panic messages&lt;/a&gt; and the &lt;a href=&quot;https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html#stabilized-apis&quot;&gt;stabilisation of APIs&lt;/a&gt;, I&amp;#8217;m especially happy about the stabilisation of&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/stable/std/os/unix/fs/fn.chown.html&quot;&gt;&lt;code&gt;std::os::unix::fs::chown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/stable/std/os/unix/fs/fn.fchown.html&quot;&gt;&lt;code&gt;std::os::unix::fs::fchown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/stable/std/os/unix/fs/fn.lchown.html&quot;&gt;&lt;code&gt;std::os::unix::fs::lchown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-173-2023-10-05&quot;&gt;cargo&lt;/a&gt; and &lt;a href=&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-173&quot;&gt;clippy&lt;/a&gt; have been updated as well.&lt;/p&gt;



&lt;p&gt;Update to Rust 1.73.0 with&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;rustup update stable&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Happy rusting! 🦀&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">RE: The OpenTofu fork is now available!</title>
    <link href="https://kevin.gimbel.dev/blog/2023/09/re-the-opentofu-fork-is-now-available/" />
    <id>https://kevingimbel.de/blog/2023/09/re-the-opentofu-fork-is-now-available/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;A few weeks ago HashiCorp decided to switch the terraform license model from an open source license to the Business Source License (BSL) model, so there&amp;#8217;s now a community driven terraform fork called OpenTofu.&lt;/p&gt;
</summary>
    <content type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;&lt;em&gt;In reply to &lt;a class=&quot;in-reply-to&quot; href=&quot;https://opentofu.org/blog/the-opentofu-fork-is-now-available&quot;&gt;https://opentofu.org/blog/the-opentofu-fork-is-now-available&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;A few weeks ago HashiCorp decided to switch the terraform license model from an open source license to the Business Source License (BSL) model, so there&amp;#8217;s now a community driven terraform fork called OpenTofu.I love the name, and I hope the project can establish itself as a alternative to the now not-so-open terraform project.&lt;/p&gt;



&lt;p&gt;OpenTofu already has support from companies like &lt;a href=&quot;https://gruntwork.io/&quot;&gt;Gruntwork&lt;/a&gt; and projects such as &lt;a href=&quot;https://github.com/terraform-docs/terraform-docs&quot;&gt;terraform-docs&lt;/a&gt; &amp;#8211; both well known in the terraform ecosystem. &lt;/p&gt;



&lt;p&gt;News about OpenTF can be found on their blog at &lt;a href=&quot;https://opentofu.org/blog/&quot;&gt;https://opentofu.org/blog&lt;/a&gt;, source code can be found on &lt;a href=&quot;https://github.com/opentofu/opentofu&quot;&gt;GitHub at github.com/opentofu/opentofu&lt;/a&gt;.&lt;/p&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-c8ed469a80b15a67fb9124797853e50a&quot;&gt;Join the discussion on &lt;a href=&quot;https://fosstodon.org/@KevinGimbel/111102411848066204&quot;&gt;Mastodon&lt;/a&gt; or &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7110554353777655809/&quot;&gt;LinkedIn&lt;/a&gt;, or comment below 👇&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">TIL: scale down a Kubernetes DaemonSet</title>
    <link href="https://kevin.gimbel.dev/blog/2023/09/til-scale-down-a-kubernetes-daemonset/" />
    <id>https://kevingimbel.de/blog/2023/09/til-scale-down-a-kubernetes-daemonset/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;A DaemonSet is supposed to run on all or some Kubernetes nodes, so scaling it down is surprisingly easy: Set a nodeSelector to some label which doesn&amp;#8217;t exist, and the DaemonSet is scaled to 0. This will patch (-p) the DaemonSet and add a nodeSelector ( spec.template.spec.nodeSelector) which makes the DaemonSet run on all nodes [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;A DaemonSet is supposed to run on all or some Kubernetes nodes, so scaling it down is surprisingly easy: Set a nodeSelector to some label which doesn&amp;#8217;t exist, and the DaemonSet is scaled to 0.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;kubectl patch daemonset the-ds -p &#39;{&quot;spec&quot;: {&quot;template&quot;: {&quot;spec&quot;: {&quot;nodeSelector&quot;: {&quot;doesnt-exist&quot;: &quot;true&quot;}}}}}&#39;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This will patch  (&lt;code&gt;-p&lt;/code&gt;) the DaemonSet and add a nodeSelector ( &lt;code&gt;spec.template.spec.nodeSelector&lt;/code&gt;)  which makes the DaemonSet run on all nodes which are labeled  &amp;#8220;&lt;code&gt;doesnt-exist: true&lt;/code&gt;&amp;#8220;.&lt;/p&gt;



&lt;p&gt;Since there are no nodes with this label, the DaemonSet is scaled to 0. &lt;/p&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-f8cb5aaeb760680055176b4072c1bc5c&quot;&gt;Join the discussion on &lt;a href=&quot;https://fosstodon.org/@KevinGimbel/111090687977575559&quot;&gt;Mastodon&lt;/a&gt; 🐘, &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7109804023955759104/&quot;&gt;LinkedIn&lt;/a&gt; 🧑‍💻 or comment below 👇&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">TIL: Run a script on every k8s Node using  a DaemonSet</title>
    <link href="https://kevin.gimbel.dev/blog/2023/09/til-run-a-script-on-every-k8s-node-using-a-daemonset/" />
    <id>https://kevingimbel.de/blog/2023/09/til-run-a-script-on-every-k8s-node-using-a-daemonset/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;I&amp;#8217;ve known that DaemonSets are used to run containers on all Nodes of a Kubernetes Cluster (or some), but I&amp;#8217;ve never thought of using them to run a (shell) script on each node &amp;#8211; a not-so-uncommon task when maintaining clusters! We need two resources: A ConfigMap and a DaemonSet.&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;I&amp;#8217;ve known that DaemonSets are used to run containers on all Nodes of a Kubernetes Cluster (or some), but I&amp;#8217;ve never thought of using them to run a (shell) script on each node &amp;#8211; a not-so-uncommon task when maintaining clusters!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;What we need&lt;/h2&gt;



&lt;p&gt;We need two resources: A ConfigMap and a DaemonSet.&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;ConfigMap&lt;/h3&gt;



&lt;p&gt;The config map holds the script, which will be mounted into the container started by the DaemonSet. &lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;yaml&quot; class=&quot;language-yaml&quot;&gt;---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-script
  namespace: kube-system
data:
  my-script.sh: |
    #!/usr/bin/env bash
    while true; do
       echo &quot;hello world!&quot;
       sleep 60
    done&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The data is just the shell script we want to execute.&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;DaemonSet&lt;/h3&gt;



&lt;p&gt;The DaemonSet is used to run a &lt;code&gt;busybox&lt;/code&gt; container on each node which is used to execute the (shell) script specified in the ConfigMap &amp;#8211; in the last lines the config map is mounted as &lt;code&gt;my-script.sh&lt;/code&gt; file, and marked as readable and executable  (&lt;a href=&quot;https://kevingimbel.github.io/unix-permission-generator/?u=5&amp;amp;g=5&amp;amp;o=5&quot;&gt;0555, or r-xr-xr-x&lt;/a&gt;). It is then used as &lt;code&gt;command&lt;/code&gt; for the busybox container.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;yaml&quot; class=&quot;language-yaml&quot;&gt;apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-script
  namespace: kube-system
  labels:
    k8s-app: my-script
spec:
  selector:
    matchLabels:
      name: my-script
  template:
    metadata:
      labels:
        name: my-script
    spec:
      hostPID: true
      containers:
        - name: my-script
          securityContext:
            privileged: true
          image: busybox:1.36.0
          command: [&quot;/my-script.sh&quot;]
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
          volumeMounts:
            - name: my-script-script
              mountPath: /my-script.sh
              subPath: my-script.sh
      volumes:
        - name: my-script-script
          configMap:
            name: my-script-script
            defaultMode: 0555&lt;/code&gt;&lt;/pre&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Use case&lt;/h3&gt;



&lt;p&gt;At work I encountered an issue with the AWS EFS CSI driver, a component which mounts and unmounts EFS volumes in a Kubernetes cluster. Occasionally the EFS mount would become unresponsive and be in a &amp;#8220;Zombie-like&amp;#8221; state, where the EFS driver still believed the volume was mounted and healthy when it actually wasn&amp;#8217;t.&lt;/p&gt;



&lt;p&gt;Turns out, the issue was with &lt;code&gt;stunnel&lt;/code&gt;, a SSL tunnel used by EFS/the EFS driver. The solution for the problem was to kill the &lt;code&gt;stunnel&lt;/code&gt; processes when the mount can no longer be accessed which makes the EFS process re-create the tunnel and mount. Fun times!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/&quot;&gt;Kubernetes Docs for DaemonSet&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/8/stunnel&quot;&gt;Stunnel man page&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes-sigs/aws-efs-csi-driver/issues/616&quot;&gt;AWS EFS CSI driver issue on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-294014fc3e40a4073b5b0c36b3840d35&quot;&gt;Join the discussion on &lt;a href=&quot;https://fosstodon.org/@KevinGimbel/111024007254844161&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Mastodon&lt;/a&gt; 🐘 or comment below 👇&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">TIL: named return parameters in Go</title>
    <link href="https://kevin.gimbel.dev/blog/2023/08/til-named-return-parameters-in-go/" />
    <id>https://kevingimbel.de/blog/2023/08/til-named-return-parameters-in-go/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Yet another piece of ✨ Go Magic ✨ I was reading through some Go code when I came upon a function that returned two things &amp;#8211; []string and error &amp;#8211; but the last line of the function just said return. I was confused how this worked, and since it was part of the standard library [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;Yet another piece of ✨ Go Magic ✨&lt;/p&gt;



&lt;p&gt;I was reading through some Go code when I came upon a function that returned two things &amp;#8211; &lt;code&gt;[]string&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; &amp;#8211; but the last line of the function just said &lt;code&gt;return&lt;/code&gt;. I was confused how this worked, and since it was part of the standard library I was sure it was no bug &amp;#8211; the code worked after all. &lt;/p&gt;



&lt;p&gt;Turns out in Go, return parameters can be named &amp;#8211; and they initialise their default zero-values for their type as well as define a named variables inside the function scope.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;go&quot; class=&quot;language-go&quot;&gt;func MyFunc() (resp string, err error) {
  // this function returns &quot;&quot;, nil
  return
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Go playground &lt;a href=&quot;https://go.dev/play/p/B9HYuexGXOu&quot;&gt;https://go.dev/play/p/yQP1oXgaYP_B&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Without the named parameters an error is thrown:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;go&quot; class=&quot;language-go&quot;&gt;func MyFunc() (string, error) {
	return
}

// not enough return values
//	have ()
//	want (string, error) &lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Go keeps amazing me with this stuff. There&amp;#8217;s nice parts of the language on one side, and on the other it took until &lt;a href=&quot;https://go.dev/doc/go1.21#slices&quot;&gt;Go 1.21 (released this month!) to add a slices package&lt;/a&gt; with basic features like &lt;code&gt;slices.Contains()&lt;/code&gt; &amp;#8211; functions which needed to be implement by-hand up until now.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Additional reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://go.dev/doc/effective_go#named-results&quot;&gt;https://go.dev/doc/effective_go#named-results&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-e94811fefbbc09de37e9b6f3f9e485f9&quot;&gt;Join the discussion on &lt;a href=&quot;https://fosstodon.org/@KevinGimbel/110932587822939667&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Mastodon&lt;/a&gt; 🐘 or comment below 👇&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">Building for the web, with Rust and WebAssembly</title>
    <link href="https://kevin.gimbel.dev/blog/2023/07/building-for-the-web-with-rust-and-webassembly/" />
    <id>https://kevingimbel.de/blog/2023/07/building-for-the-web-with-rust-and-webassembly/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;I&amp;#8217;ve been wanting to build something in WebAssembly for a while and just recently it hit me that I have a thing: mktoc! mktoc is a table of contents generator written in Rust, it comes as a Binary and a Library and can be compiled into WebAssembly with zero effort!&lt;/p&gt;
</summary>
    <content type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://webassembly.org&quot; target=&quot;_blank&quot;&gt;WebAssembly&lt;/a&gt; (&lt;em&gt;WASM&lt;/em&gt;) has been around for a few years now. It&amp;#8217;s a binary format that runs in the browser, allowing programmers to write code in Rust (&lt;em&gt;or Java, Go, C/C++&lt;/em&gt;), compile it into WebAssembly and then execute the code in the browser.&lt;/p&gt;



&lt;p&gt;I&amp;#8217;ve been wanting to build &lt;em&gt;something&lt;/em&gt; in WebAssembly for a while and just recently it hit me that I have a thing: &lt;strong&gt;mktoc&lt;/strong&gt;! &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://github.com/KevinGimbel/mktoc&quot; target=&quot;_blank&quot;&gt;mktoc&lt;/a&gt; is a table of contents generator written in Rust, it comes as a Binary and a Library and can be compiled into WebAssembly with &lt;em&gt;zero effort&lt;/em&gt;!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Quick (Technical) Overview&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;The Rust code gets compiled for the target &lt;br&gt;&lt;strong&gt;wasm32-unknown-unknown&lt;/strong&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://rustwasm.github.io/wasm-pack/installer/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;wasm-pack&lt;/a&gt; is used to compile and bundle the generated WASM code&lt;/li&gt;



&lt;li&gt;Some JavaScript and a static HTML page is used to build the Front-end&lt;/li&gt;



&lt;li&gt;The web app is deployed on GitHub pages&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Compiling to WASM&lt;/h2&gt;



&lt;p&gt;Compiling to WASM is surprisingly straight forward. Rust has a target for WASM, &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt;, and a nice build tool for generating the &amp;#8220;glue code&amp;#8221; around the WASM binary: &lt;code&gt;&lt;strong&gt;wasm-pack&lt;/strong&gt;&lt;/code&gt;&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;wasm-pack build --release --target web&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This command builds the code as an optimised release with web as the target platform &amp;#8211; other targets are &lt;code&gt;&lt;em&gt;bundler, nodejs, web, no-modules&lt;/em&gt; &lt;/code&gt;&amp;#8211; &lt;code&gt;bundler&lt;/code&gt; being the default here. &lt;/p&gt;



&lt;p&gt;A few things more are required to get the Rust code to compile to WASM:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[lib]&lt;/code&gt; must be set to &lt;code&gt;crate-type = [&quot;cdylib&quot;]&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;&lt;code&gt;wasm-bindgen&lt;/code&gt; must be added as a dependency&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;So the &lt;code&gt;Cargo.toml&lt;/code&gt; looks something like this:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;toml&quot; class=&quot;language-toml&quot;&gt;[...]

[lib]
crate-type = [&quot;cdylib&quot;]

[dependencies]
mktoc = { path = &quot;../&quot; }
wasm-bindgen = &quot;0.2.87&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The mktoc dependency is loaded relatively because I included the WASM code as a sub-directory in the &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://github.com/KevinGimbel/mktoc/tree/main/wasm&quot; target=&quot;_blank&quot;&gt;mktoc repository&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;With the dependencies and crate-type in place it&amp;#8217;s finally time for some Rust code!&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;rust&quot; class=&quot;language-rust&quot;&gt;use mktoc;
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub fn make_toc(content: &amp;amp;str) -&amp;gt; String {
    mktoc::add_toc(
        content.to_string(),
        mktoc::generate_toc(content.to_string(), mktoc::Config::default()),
    )
}
#[wasm_bindgen]
pub fn make_toc_only(content: &amp;amp;str) -&amp;gt; String {
    mktoc::generate_toc(content.to_string(), mktoc::Config::default())
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here we create two functions, &lt;code&gt;make_toc&lt;/code&gt; and &lt;code&gt;make_toc_only&lt;/code&gt;, which are attributed with &lt;code&gt;#[wasm_bindgen]&lt;/code&gt;, which tells the compiler to make these functions available through WebAssembly. &lt;/p&gt;



&lt;p&gt;And that&amp;#8217;s it. The Rust code in mktoc doesn&amp;#8217;t need to be updated at all!&lt;/p&gt;



&lt;p&gt;For compiling, &lt;code&gt;wasm-pack&lt;/code&gt; is used:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;wasm-pack build --release --target web&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The files will be written to the &lt;code&gt;pkg&lt;/code&gt; directory by default and can be loaded via JavaScript.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;markup&quot; class=&quot;language-markup&quot;&gt;&amp;lt;script type=&quot;module&quot;&amp;gt;
import init, { make_toc, make_toc_only } from &quot;./pkg/webtoc.js&quot;;

init().then(() =&amp;gt; {
// wasm code is loaded
// make_toc is the function defined in Rust
make_toc(`
# Sample

&amp;lt;!-- BEGIN mktoc --&amp;gt;

&amp;lt;!-- END mktoc --&amp;gt;

This is an example document.

## Sample heading 2

&#92;`&#92;`&#92;`rust 
pub fn hello(name: &amp;amp;str) -&amp;gt; String {
    format!(&quot;Hello, {}!&quot;, name)
}
&#92;`&#92;`&#92;``);
});
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;A full working example can also be found on CodePen &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://codepen.io/kevingimbel/pen/GRwGrQZ&quot; target=&quot;_blank&quot;&gt;https://codepen.io/kevingimbel/pen/GRwGrQZ&lt;/a&gt; &amp;#8211; the code uses a packaged and released version from NPM at &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://npmjs.com/webtoc&quot; target=&quot;_blank&quot;&gt;https://npmjs.com/webtoc&lt;/a&gt; via unpkg.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Using the WASM code in a Web App &lt;/h2&gt;



&lt;p&gt;The same code is available as a &amp;#8220;web app&amp;#8221; at &lt;a href=&quot;https://kevingimbel.github.io/webtoc/&quot;&gt;https://kevingimbel.github.io/webtoc/&lt;/a&gt; &amp;#8211; you can paste or load your own Markdown files. When &amp;#8220;uploading&amp;#8221; a file there&amp;#8217;s no need to actually transmit it to a browser: It&amp;#8217;s accessible via JavaScript without being processed by a backend!&lt;/p&gt;



&lt;div class=&quot;wp-block-columns alignwide is-layout-flex wp-container-core-columns-is-layout-1 wp-block-columns-is-layout-flex&quot;&gt;
&lt;div class=&quot;wp-block-column is-layout-flow wp-block-column-is-layout-flow&quot;&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;javascript&quot; class=&quot;language-javascript line-numbers&quot;&gt;markdown_file.addEventListener(&quot;change&quot;, readFile);
function readFile() {
    const [file] = markdown_file.files;
    const reader = new FileReader();

    let dot_split = file.name.split(&quot;.&quot;);
    let file_ext = dot_split[dot_split.length - 1].toLowerCase()

    if (file_ext !== &quot;md&quot; &amp;amp;&amp;amp; file_ext !== &quot;markdown&quot;) {
        triggerError(&quot;Not a markdown file. Please add .md or .markdown file&quot;);
        // reset the file input
        markdown_file.value = &quot;&quot;;
        return;
    }

    reader.addEventListener(&quot;load&quot;, () =&amp;gt; {
        markdown_input.value = &quot;&quot;;
        // pass the file to make_toc
        generate_toc(reader.result);
    });

    if (file) {
        reader.readAsText(file);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



&lt;div class=&quot;wp-block-column is-layout-flow wp-block-column-is-layout-flow&quot;&gt;
&lt;p&gt;Here&amp;#8217;s how it&amp;#8217;s done: &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 1: &lt;/strong&gt;&lt;code&gt;markdown_file&lt;/code&gt; identifier is the Input element.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 2: &lt;/strong&gt;&lt;code&gt;readFile&lt;/code&gt; will be called on &amp;#8220;change&amp;#8221;: The change event is triggered when a file has been selected via the input&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 3: &lt;/strong&gt;&lt;code&gt;markdown_file.files&lt;/code&gt; contains an array of selected files &amp;#8211; we only care about one, so we load it with &lt;code&gt;const [file]&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 6-7:&lt;/strong&gt; &lt;code&gt;dot_split&lt;/code&gt; and &lt;code&gt;file_ext&lt;/code&gt; are used to get the file extension from the file name &amp;#8211; we won&amp;#8217;t process files which aren&amp;#8217;t markdown.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 9-14:&lt;/strong&gt; I&amp;#8217;ve decided that markdown files must end in &lt;code&gt;.md&lt;/code&gt; or &lt;code&gt;.markdown&lt;/code&gt;, if they do not an error is thrown&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 16-20:&lt;/strong&gt; adds a load event on the reader we created. This triggers once the file has been loaded by the browser &amp;#8211; this happens &lt;em&gt;BEFORE any form is submitted!&lt;/em&gt; Here we reset the input value (= remove the file from the element), then pass the file content to the &lt;code&gt;generate_toc&lt;/code&gt; function&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 22-24:&lt;/strong&gt;Here the file is read &amp;#8211; this will trigger the &lt;code&gt;load&lt;/code&gt; event defined in line 16-20. &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This setup is incredibly fast. A fairly large Markdown file is processed in milliseconds!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Takeaways&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Compiling Rust to WASM is surprisingly easy&lt;/em&gt;&lt;/strong&gt;! &lt;br&gt;Without adjustments I was able to bring my Rust library to the web (and NPM!)&lt;/li&gt;



&lt;li&gt;&lt;em&gt;&lt;strong&gt;WASM enables Rust code to be used &amp;#8220;Full Stack&amp;#8221;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;The mktoc code can be used to preview a Markdown file in the browser, and write it to disk via a backend&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;em&gt;Rust is awesome&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;Not a takeaway, but I love Rust!&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Code&lt;/h2&gt;



&lt;p&gt;All code used in this blog post is available on Github:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/KevinGimbel/mktoc/tree/main&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;mktoc&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://github.com/KevinGimbel/mktoc/tree/main/wasm&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;mktoc WASM&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://github.com/KevinGimbel/webtoc/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;webtoc&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://rustwasm.github.io/docs/wasm-pack/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://rustwasm.github.io/docs/wasm-pack/&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://webassembly.org&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://webassembly.org&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/en-US/docs/WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;hr class=&quot;wp-block-separator has-alpha-channel-opacity&quot;/&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-9c42702dc0604635bad2da123662bada&quot;&gt;Join the discussion on &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://fosstodon.org/@KevinGimbel/110784659700280987&quot; target=&quot;_blank&quot;&gt;Mastodon&lt;/a&gt; 🐘 or comment below 👇&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">TIL: multiple git-identities on one machine</title>
    <link href="https://kevin.gimbel.dev/blog/2023/04/til-multiple-git-identities-on-one-machine/" />
    <id>https://kevingimbel.de/blog/2023/04/til-multiple-git-identities-on-one-machine/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Turns out you can have multiple Git identities alongside each other on one Machine without needing to set them locally for each repository! It still involves multiple .gitconfig files, but it&amp;#8217;s a lot less work than configuring an endless amount of repos! First, set the global config like this: Now in ~/AOE/.gitconfig I configure the [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;Turns out you can have multiple Git identities alongside each other on one Machine without needing to set them locally for each repository!&lt;/p&gt;



&lt;p&gt;It still involves multiple &lt;code&gt;.gitconfig&lt;/code&gt; files, but it&amp;#8217;s a lot less work than configuring an endless amount of repos!&lt;/p&gt;



&lt;p&gt;First, set the global config like this:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;# File: ~/.gitconfig
[user]
  name = Kevin Gimbel
  email = kevin@gimbel.dev

[includeIf &quot;gitdir:~/AOE/&quot;]
    path = ~/AOE/.gitconfig
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Now in &lt;code&gt;~/AOE/.gitconfig&lt;/code&gt; I configure the following&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;# File: ~/AOE/.gitconfig
[user]
  name = Kevin Gimbel
  email = kevin.gimbel@aoe.com&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In &lt;code&gt;~/AOE/&lt;/code&gt; I have all repositories related to my work, and whenever I work in a sub-directory the identity with the e-Mail address of my work is being used!&lt;/p&gt;



&lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/a/3860139&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://stackoverflow.com/a/3860139&lt;/a&gt; &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">Setting up a MacBook from scratch for the first time in 8 years</title>
    <link href="https://kevin.gimbel.dev/blog/2023/04/setting-up-a-macbook-from-scratch-for-the-first-time-in-8-years/" />
    <id>https://kevingimbel.de/blog/2023/04/setting-up-a-macbook-from-scratch-for-the-first-time-in-8-years/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Oh boy, did I not think about a lot of stuf&amp;#8230; For the past 8 or so years I&amp;#8217;ve always used my work MacBook for all things dev, including private development. I&amp;#8217;ve spent a lot of time setting up and changing my zsh, and later fish, configs, configuring iTerm, trying out different themes, &amp;#8230; you [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;Oh boy, did I not think about a lot of stuf&amp;#8230;&lt;/p&gt;



&lt;p&gt;For the past 8 or so years I&amp;#8217;ve always used my work MacBook for all things dev, including private development. I&amp;#8217;ve spent a lot of time setting up and changing my zsh, and later fish, configs, configuring iTerm, trying out different themes, &amp;#8230; you know the drill. &lt;/p&gt;



&lt;p&gt;When I decommissioned my old Mac and got my new shiny Mac from &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://aoe.com/&quot; target=&quot;_blank&quot;&gt;AOE&lt;/a&gt;, I realised I didn&amp;#8217;t have any backups for all my app configs (iTerm, VSCode, &amp;#8230;), so I had to start from zero. 😬&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;iTerm 2&lt;/h2&gt;



&lt;p&gt;Since forever iTerm 2 has been my go-to Terminal on MacOS. I&amp;#8217;ve never found any terminal emulator that&amp;#8217;s as reliable, fast, and custimizable as iTerm 2, plus there&amp;#8217;s tons of community resources online.&lt;/p&gt;



&lt;p&gt;The last time I had a fresh, clean iTerm installation was a long time ago, so I was quite shocked by the defaults. I&amp;#8217;ve really gotten used to all my fancy customizations and adjustments. &lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Naural Text Editing&lt;/h3&gt;



&lt;p&gt;I didn&amp;#8217;t even know that this wasn&amp;#8217;t the standard for iTerm, but after a short search I found &lt;a href=&quot;https://apple.stackexchange.com/a/293988&quot;&gt;https://apple.stackexchange.com/a/293988&lt;/a&gt; this stackexchange answer which is exactly what I wanted.&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;Go to &lt;strong&gt;Preferences&amp;#8230;&lt;/strong&gt; &amp;gt; &lt;strong&gt;Profiles&lt;/strong&gt; &amp;gt; &lt;strong&gt;Keys&lt;/strong&gt; (not Preferences&amp;#8230; &amp;gt; Keys)&lt;/li&gt;



&lt;li&gt;On current versions (3.14+) you then switch to the &lt;strong&gt;Key Mappings&lt;/strong&gt; tab&lt;/li&gt;



&lt;li&gt;Press &lt;strong&gt;Presets&amp;#8230;&lt;/strong&gt; dropdown button.&lt;/li&gt;



&lt;li&gt;Select &lt;strong&gt;Natural Text Editing&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;Natural Text Editing sets some sensible defaults, like navigating by-word using &lt;kbd&gt;Option + Left Arrow&lt;/kbd&gt;, or moving to the start of a line by pressing &lt;kbd&gt;Cmd + Left Arrow&lt;/kbd&gt;, end of line with &lt;kbd&gt;Cmd + Right Arrow&lt;/kbd&gt;, and so on &amp;#8211; navigating the command line (like, the actual line) feels natural now. &lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Oh-My-Zsh &lt;/h3&gt;



&lt;p&gt;Years ago I was a oh-my-zsh user but then I switched to fish shell. With the new Mac and zsh being the default shell anyway I decided to try zsh again. At the end of the day it doesn’t matter that much, and zsh (and bash as well) have a lot of great tools and scripts to enhance them. &lt;/p&gt;



&lt;p&gt;Anyway, I basically just installed oh-my-zsh and disabled all plugins for the prompt as I’m using starship for my prompt (see below). &lt;/p&gt;



&lt;p&gt;I&amp;#8217;ve also used &lt;em&gt;zplug&lt;/em&gt; for zsh plugin management so oh-my-zsh is only used for all its default settings at the moment. &lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Starship pompt&lt;/h3&gt;



&lt;p&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://starship.rs&quot; target=&quot;_blank&quot;&gt;starship&lt;/a&gt; is a super fast and awesome prompt written in rust. It’s cross-shell and cross-platform and comes with batteries included &amp;#8211; meaning it has a lot of &lt;a href=&quot;https://starship.rs/config/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;integrations with popular tools and frameworks&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;I’ve been using starship for some time with bash and fish shell, so it was a natural choice. I disabled all plugins in oh-my-zsh, as the prompt is now handled by starship instead.&lt;/p&gt;



&lt;p&gt;Here&amp;#8217;s my current &lt;code&gt;starship.toml&lt;/code&gt; config file.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;toml&quot; class=&quot;language-toml&quot;&gt;format=&quot;&quot;&quot;
$username&#92;
$hostname&#92;
$localip&#92;
$kubernetes&#92;
$directory&#92;
$git_branch&#92;
$git_commit&#92;
$git_state&#92;
$git_metrics&#92;
$git_status&#92;
$docker_context&#92;
$package&#92;
$golang&#92;
$helm&#92;
$nodejs&#92;
$python&#92;
$rust&#92;
$terraform&#92;
$aws&#92;
$env_var&#92;
$custom&#92;
$sudo&#92;
$cmd_duration&#92;
$line_break&#92;
$jobs&#92;
$time&#92;
$status&#92;
$shell&#92;
$character
&quot;&quot;&quot;

# Replace the &#39;❯&#39; symbol in the prompt with &#39;➜&#39;
[character]
success_symbol = &#39;[➜](bold 219)&#39; 
error_symbol = &#39;[✕](bold 45)&#39;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;219 and 45 are color codes taken from this graphic (via &lt;a href=&quot;https://i.stack.imgur.com/KTSQa.png&quot;&gt;https://i.stack.imgur.com/KTSQa.png&lt;/a&gt;). &lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://i0.wp.com/i.stack.imgur.com/KTSQa.png?ssl=1&quot; alt=&quot;&quot; data-recalc-dims=&quot;1&quot;/&gt;&lt;/figure&gt;



&lt;p&gt;And below you can see what the prompt looks like. I think it&amp;#8217;s cute, and a nice start. ✨&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;1024&quot; height=&quot;551&quot; data-attachment-id=&quot;274&quot; data-permalink=&quot;https://kevingimbel.de/blog/2023/04/setting-up-a-macbook-from-scratch-for-the-first-time-in-8-years/screenshot-2023-04-12-at-07-54-49/&quot; data-orig-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49.png?fit=1204%2C648&amp;amp;ssl=1&quot; data-orig-size=&quot;1204,648&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screenshot-2023-04-12-at-07.54.49&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49.png?fit=300%2C161&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49.png?fit=1024%2C551&amp;amp;ssl=1&quot; src=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49.png?resize=1024%2C551&amp;#038;ssl=1&quot; alt=&quot;Screenshot of iTerm2 showing the prompt and colors for errors and success. With success an arrow in pink is shown as prompt symbol, with failure a blue X is displayed.&quot; class=&quot;wp-image-274&quot; srcset=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49.png?resize=1024%2C551&amp;amp;ssl=1 1024w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49.png?resize=300%2C161&amp;amp;ssl=1 300w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49.png?resize=768%2C413&amp;amp;ssl=1 768w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49.png?w=1204&amp;amp;ssl=1 1204w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/figure&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Keyboard setup&lt;/h2&gt;



&lt;p&gt;I like to use the English keyboard layout since I write English most of the time and all keys for programming are better reachable on the English keyboard.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image alignleft size-full&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;632&quot; height=&quot;240&quot; data-attachment-id=&quot;261&quot; data-permalink=&quot;https://kevingimbel.de/blog/2023/04/setting-up-a-macbook-from-scratch-for-the-first-time-in-8-years/screenshot-2023-04-06-at-10-35-21/&quot; data-orig-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-06-at-10.35.21.png?fit=632%2C240&amp;amp;ssl=1&quot; data-orig-size=&quot;632,240&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;Screenshot-2023-04-06-at-10.35.21&quot; data-image-description=&quot;&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-06-at-10.35.21.png?fit=300%2C114&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-06-at-10.35.21.png?fit=632%2C240&amp;amp;ssl=1&quot; src=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-06-at-10.35.21.png?resize=632%2C240&amp;#038;ssl=1&quot; alt=&quot;Screenshot showing the English keyboard layout&quot; class=&quot;wp-image-261&quot; srcset=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-06-at-10.35.21.png?w=632&amp;amp;ssl=1 632w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-06-at-10.35.21.png?resize=300%2C114&amp;amp;ssl=1 300w&quot; sizes=&quot;(max-width: 632px) 100vw, 632px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;figcaption class=&quot;wp-element-caption&quot;&gt;The US International PC keyboard layout&lt;/figcaption&gt;&lt;/figure&gt;



&lt;p&gt;All the nice keys one needs for programming are on the right side of the keyboard, which is a lot easier to reach than having all of these keys in the top row, as it is the standard on the German keyboard layout.&lt;/p&gt;



&lt;p&gt;The only problem was that by default Umlauts (&lt;code&gt;ä, ö, ü&lt;/code&gt;) are hard to type. The default was to type &lt;code&gt;Option + u&lt;/code&gt; followed by the base-letter &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;, or &lt;code&gt;u&lt;/code&gt;. &lt;/p&gt;



&lt;p&gt;A more convenient way in my opinion is to type a quote &lt;code&gt;&quot;&lt;/code&gt; and then the letter to create the Umlaut, which doesn&amp;#8217;t interrupt my typing.&lt;/p&gt;



&lt;p&gt;This only works when the keyboard is set to &amp;#8220;&lt;code&gt;US International - PC&lt;/code&gt;&amp;#8220;. &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Go to &lt;strong&gt;System Preferences &lt;/strong&gt;&lt;/li&gt;



&lt;li&gt;Select &lt;strong&gt;Keyboard&lt;/strong&gt;&lt;/li&gt;



&lt;li&gt;Scroll to &lt;strong&gt;Text Input&lt;/strong&gt;&lt;/li&gt;



&lt;li&gt;Click the &lt;code&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/code&gt; sign to add a new keyboard&lt;/li&gt;



&lt;li&gt;Search for &amp;#8220;&lt;strong&gt;US International &amp;#8211; PC&lt;/strong&gt;&amp;#8220;&lt;/li&gt;



&lt;li&gt;Remove the Text Input (called &lt;em&gt;ABC&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;VSCode&lt;/h2&gt;



&lt;p&gt;For a long long time I&amp;#8217;ve used VSCode as my day-to-day editor for all things. Ansible roles, Terraform modules, Rust and Go, HTML/CSS/JavaScript, Shell scripting, &amp;#8230; it&amp;#8217;s just a perfect fit for me. It has so many extensions that it can work with anything.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Other software&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://spacevim.org&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;spacevim&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://github.com/zplug/zplug&quot; target=&quot;_blank&quot;&gt;zplug&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://tunnelblick.net&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Tunnelblick&lt;/a&gt; for VPN&lt;/li&gt;



&lt;li&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://keepassxc.org&quot; target=&quot;_blank&quot;&gt;KeePassXC&lt;/a&gt; (💚)&lt;/li&gt;



&lt;li&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://www.mozilla.org/en-GB/firefox/new&quot; target=&quot;_blank&quot;&gt;Firefox&lt;/a&gt; (🦊)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I&amp;#8217;m sure I am still missing something, but it&amp;#8217;ll be installed when it&amp;#8217;s needed. For now I have a device I can work with comfortably. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">Unpinned dependencies just broke my plugin</title>
    <link href="https://kevin.gimbel.dev/blog/2023/02/unpinned-dependencies-just-broke-my-plugin/" />
    <id>https://kevingimbel.de/blog/2023/02/unpinned-dependencies-just-broke-my-plugin/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Hello and welcome to a little recap! My 11ty MermaidJS plugin was just broken by MermaidJS release 10.0 because they no longer provided a minified JavaScript bundle and instead only provide a ESM module. My plugin was referencing https://unpkg.com/mermaid/dist/mermaid.min.js by default for including the javascript code, but with version 10 this now leads to a [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;Hello and welcome to a little recap! My &lt;a href=&quot;https://github.com/KevinGimbel/eleventy-plugin-mermaid&quot;&gt;11ty MermaidJS plugin&lt;/a&gt;  was just broken by MermaidJS release 10.0 because they no longer provided a minified JavaScript bundle and instead only provide a ESM module. &lt;/p&gt;



&lt;p&gt;My plugin was referencing &lt;code&gt;https://unpkg.com/mermaid/dist/mermaid.min.js&lt;/code&gt; by default for including the javascript code, but with version 10 this now leads to a 404 on unpkg.com, resulting in the plugin breaking for everyone using it. &lt;em&gt;Oops.&lt;/em&gt; 😬&lt;/p&gt;



&lt;p&gt;As a quick fix I&amp;#8217;ve moved the code to use the ESM module instead, which luckily was fairy straight forward. The change can be seen on GitHub here &lt;a href=&quot;https://github.com/KevinGimbel/eleventy-plugin-mermaid/commit/3f356d603dafb0801c4fe90ff75aa0a54f73eceb&quot;&gt;https://github.com/KevinGimbel/eleventy-plugin-mermaid/commit/3f356d603dafb0801c4fe90ff75aa0a54f73eceb&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;I should&amp;#8217;ve know better than to reference the latest version by default, but sometimes I&amp;#8217;m lazy and I initially developed the plugin for my self without thinking much about it.&lt;/p&gt;



&lt;p&gt;Sorry if I broke your website. 🖤 &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">TIL: One-line list manipulation in Python</title>
    <link href="https://kevin.gimbel.dev/blog/2023/01/til-one-line-list-manipulation-in-python/" />
    <id>https://kevingimbel.de/blog/2023/01/til-one-line-list-manipulation-in-python/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;In Python there&amp;#8217;s a one-line syntax for iterating over elements of a list. I&amp;#8217;ve always found it looked kind-of odd, and as I need to look it up all the time I decided to write a little TIL on this blog about it. There are more powerful one-liners documented on the Python Wiki.&lt;/p&gt;
</summary>
    <content type="html">
&lt;p class=&quot;has-large-font-size&quot;&gt;In Python there&amp;#8217;s a one-line syntax for iterating over elements of a list. I&amp;#8217;ve always found it looked kind-of odd, and as I need to look it up all the time I decided to write a little TIL on this blog about it.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;list = &amp;#91;1, 2, 3, 4]
new_list = &amp;#91;num*2 for num in list]

new_list == &amp;#91;2, 4, 6, 8]

#     |--- the function to call on each element
#     |           |--- variable name for each item
#     |           |       |--- the list to work on
#     |           |       |
&amp;#91;&lt;strong&gt;func(item) &lt;/strong&gt;for &lt;strong&gt;item&lt;/strong&gt; in &lt;strong&gt;list&lt;/strong&gt;]&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;There are more powerful one-liners documented on the &lt;a href=&quot;https://wiki.python.org/moin/Powerful%20Python%20One-Liners&quot;&gt;Python Wiki&lt;/a&gt;. &lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">Publishing and building a static website on GitHub Pages</title>
    <link href="https://kevin.gimbel.dev/blog/2022/12/publishing-and-building-a-static-website-on-github-pages/" />
    <id>https://kevingimbel.de/blog/2022/12/publishing-and-building-a-static-website-on-github-pages/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;A week ago or so I finally launched a small website I&amp;#8217;ve been working on for quite some time: kevin.gimbel.dev/ops &amp;#8211; it&amp;#8217;s a colourful static website showing some of the technologies I&amp;#8217;ve worked with in the past years since I began doing DevOps full time. The website is built with 11ty and published with GitHub [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;A week ago or so I finally launched a small website I&amp;#8217;ve been working on for quite some time: &lt;a href=&quot;https://kevin.gimbel.dev/ops/&quot;&gt;kevin.gimbel.dev/ops&lt;/a&gt; &amp;#8211; it&amp;#8217;s a colourful static website showing some of the technologies I&amp;#8217;ve worked with in the past years since I began doing DevOps full time.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image alignwide size-large&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;1024&quot; height=&quot;666&quot; data-attachment-id=&quot;94&quot; data-permalink=&quot;https://kevingimbel.de/blog/2022/12/publishing-and-building-a-static-website-on-github-pages/screenshot-2022-12-02-at-13-46-05/&quot; data-orig-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05.png?fit=3248%2C2112&amp;amp;ssl=1&quot; data-orig-size=&quot;3248,2112&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;kevin.gimbel.dev/ops/ Screenshot&quot; data-image-description=&quot;&amp;lt;p&amp;gt;Screenshot of a browser showing the website kevin.gimbel.dev/ops, with a black and white photo of a male with a camera before his face and text reading &amp;#8220;Hi, I&amp;#8217;m Kevin! A Senior DevOps Engineer with a background in Front-End Development.&amp;#8221;&amp;lt;/p&amp;gt;
&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05.png?fit=300%2C195&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05.png?fit=1024%2C666&amp;amp;ssl=1&quot; src=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05.png?resize=1024%2C666&amp;#038;ssl=1&quot; alt=&quot;&quot; class=&quot;wp-image-94&quot; srcset=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05.png?resize=1024%2C666&amp;amp;ssl=1 1024w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05.png?resize=300%2C195&amp;amp;ssl=1 300w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05.png?resize=768%2C499&amp;amp;ssl=1 768w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05.png?resize=1536%2C999&amp;amp;ssl=1 1536w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05.png?resize=2048%2C1332&amp;amp;ssl=1 2048w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05.png?w=3000&amp;amp;ssl=1 3000w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;The website is built with &lt;a href=&quot;https://11ty.dev/&quot;&gt;11ty&lt;/a&gt; and published with &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. &lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Overview&lt;/h2&gt;



&lt;p&gt;Here&amp;#8217;s what we do:&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;Build the code using 11ty&lt;/li&gt;



&lt;li&gt;Publish the generated site to a &lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/tree/gh-pages&quot;&gt;gh-pages branch&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;To do this we need to first set our GitHub repository to deploy from a GitHub action. This is a new feature and currently in Beta.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image alignwide size-large&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;1024&quot; height=&quot;532&quot; data-attachment-id=&quot;93&quot; data-permalink=&quot;https://kevingimbel.de/blog/2022/12/publishing-and-building-a-static-website-on-github-pages/screenshot-2022-12-02-at-13-38-00/&quot; data-orig-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00.png?fit=3024%2C1572&amp;amp;ssl=1&quot; data-orig-size=&quot;3024,1572&quot; data-comments-opened=&quot;1&quot; data-image-meta=&quot;{&amp;quot;aperture&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;credit&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;camera&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;caption&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;created_timestamp&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;copyright&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;focal_length&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;iso&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;shutter_speed&amp;quot;:&amp;quot;0&amp;quot;,&amp;quot;title&amp;quot;:&amp;quot;&amp;quot;,&amp;quot;orientation&amp;quot;:&amp;quot;0&amp;quot;}&quot; data-image-title=&quot;GitHub Pages settings&quot; data-image-description=&quot;&amp;lt;p&amp;gt;Screenshot of the GitHub Pages settings of a repository&amp;lt;/p&amp;gt;
&quot; data-image-caption=&quot;&quot; data-medium-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00.png?fit=300%2C156&amp;amp;ssl=1&quot; data-large-file=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00.png?fit=1024%2C532&amp;amp;ssl=1&quot; src=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00.png?resize=1024%2C532&amp;#038;ssl=1&quot; alt=&quot;&quot; class=&quot;wp-image-93&quot; srcset=&quot;https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00.png?resize=1024%2C532&amp;amp;ssl=1 1024w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00.png?resize=300%2C156&amp;amp;ssl=1 300w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00.png?resize=768%2C399&amp;amp;ssl=1 768w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00.png?resize=1536%2C798&amp;amp;ssl=1 1536w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00.png?resize=2048%2C1065&amp;amp;ssl=1 2048w, https://i0.wp.com/kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00.png?w=3000&amp;amp;ssl=1 3000w&quot; sizes=&quot;(max-width: 1000px) 100vw, 1000px&quot; data-recalc-dims=&quot;1&quot; /&gt;&lt;figcaption class=&quot;wp-element-caption&quot;&gt;GitHub Pages settings screen&lt;/figcaption&gt;&lt;/figure&gt;



&lt;p&gt;With this setting enabled our GitHub action is used to deploy the static site.&lt;/p&gt;



&lt;p&gt;The building is then done in a &lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/blob/main/.github/workflows/build-eleventy.yml&quot;&gt;GitHub action&lt;/a&gt;. Here&amp;#8217;s the code&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;name: Build eleventy site

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - run: npm ci

      - run: npm run build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.ref == &#39;refs/heads/main&#39; }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;With this config we do the following:&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;Checkout the code using the standard actions/checkout@v3 action from GitHub&lt;/li&gt;



&lt;li&gt;Setup NodeJS with the actions/setup-node@v3 action, we specify 18 as version&lt;/li&gt;



&lt;li&gt;Run &lt;code&gt;&lt;strong&gt;npm ci&lt;/strong&gt;&lt;/code&gt; to install dependencies&lt;/li&gt;



&lt;li&gt;Run &lt;code&gt;&lt;strong&gt;npm run build&lt;/strong&gt;&lt;/code&gt; to execute the &lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/blob/1d66b873955803054b2a85f7add3c8d2430a0243/package.json#L6&quot;&gt;build script defined in the package.json&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;And finally we use &lt;a href=&quot;https://github.com/peaceiris/actions-gh-pages&quot;&gt;peaceiris/actions-gh-pages@v3&lt;/a&gt; to deploy the compiled code to the gh-pages branch.&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;This action works like a charm and builds the site in no time! Previously I had build the static site on my machine and setup GitHub pages to serve files from the &lt;code&gt;&lt;strong&gt;docs&lt;/strong&gt;&lt;/code&gt; folder. This works as well, but I didn&amp;#8217;t want to run the compile commands by hand all the time.&lt;/p&gt;



&lt;p&gt;By default all GitHub Pages run through Jekyll, which was also a waste of resources because this step did nothing. By providing my own build script that actually does something the default Jekyll one stopped running as well. &lt;/p&gt;



&lt;p&gt;&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">How to extend and reuse configs in Gitlab CI</title>
    <link href="https://kevin.gimbel.dev/blog/2022/11/how-to-extend-and-reuse-configs-in-gitlab-ci/" />
    <id>https://kevingimbel.de/blog/2022/11/how-to-extend-and-reuse-configs-in-gitlab-ci/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;When I began using Gitlab CI the first thing I wanted to know was how to reuse configs. I know that we&amp;#8217;ll have changing requirements at work and that we&amp;#8217;ll have hundreds of repositories using basically-the-same configurations so I wanted to make sure we&amp;#8217;d have a central place to make changes to these. I found [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;When I began using Gitlab CI the first thing I wanted to know was how to reuse configs. I know that we&amp;#8217;ll have changing requirements at work and that we&amp;#8217;ll have hundreds of repositories using basically-the-same configurations so I wanted to make sure we&amp;#8217;d have a central place to make changes to these.&lt;/p&gt;



&lt;p&gt;I found two ways to archive reusable configurations which I&amp;#8217;ll explain below.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2022/01/11-how-to-extend-and-reuse-configs-in-gitlab-ci/index.md#extends&quot;&gt;&lt;/a&gt;Extends&lt;/h2&gt;



&lt;p&gt;First of we have the&amp;nbsp;&lt;code&gt;extends&lt;/code&gt;&amp;nbsp;keyword. This makes a config section of the CI yaml reuse another section, as illustrated below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
    - echo &quot;Hello, Gitlab CI!&quot;

my-other-block:
  extends:
    - my-base-block&lt;/pre&gt;



&lt;p&gt;Gitlab combines this into the following YAML:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
  - echo &quot;Hello, Gitlab CI!&quot;
my-other-block:
  stage: deploy
  script:
  - echo &quot;Hello, Gitlab CI!&quot;
  extends:
  - my-base-block&lt;/pre&gt;



&lt;p&gt;So far so good! But there&amp;#8217;s one downside to&amp;nbsp;&lt;code&gt;extends&lt;/code&gt;: If&amp;nbsp;&lt;code&gt;my-other-block&lt;/code&gt;&amp;nbsp;has its own script, it will overwrite the original script, as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
    - echo &quot;Hello, Gitlab CI!&quot;

my-other-block:
  extends:
    - my-base-block
  script:
    - echo &quot;Bye, Gitlab CI!&quot;&lt;/pre&gt;



&lt;p&gt;Merged YAML:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
  - echo &quot;Hello, Gitlab CI!&quot;
my-other-block:
  stage: deploy
  script:
  - echo &quot;Bye, Gitlab CI!&quot;
  extends:
  - my-base-block&lt;/pre&gt;



&lt;p&gt;Now that&amp;#8217;s not what we want, the&amp;nbsp;&lt;code&gt;script&lt;/code&gt;&amp;nbsp;field was overwritten! Good for us that Gitlab has a solution:&amp;nbsp;&lt;code&gt;!reference[]&lt;/code&gt;.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2022/01/11-how-to-extend-and-reuse-configs-in-gitlab-ci/index.md#reference&quot;&gt;&lt;/a&gt;!reference&lt;/h2&gt;



&lt;p&gt;&lt;code&gt;!reference[]&lt;/code&gt;&amp;nbsp;is an extension to YAML Gitlab provides, it allows us to reference another block and key which will be &amp;#8211; well &amp;#8211; referenced!&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
    - echo &quot;Hello, Gitlab CI!&quot;

my-other-block:
  extends:
    - my-base-block
  script:
    - !reference [my-base-block, script]
    - echo &quot;Bye, Gitlab CI!&quot;&lt;/pre&gt;



&lt;p&gt;And the merged YAML:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
  - echo &quot;Hello, Gitlab CI!&quot;
my-other-block:
  stage: deploy
  script:
  - - echo &quot;Hello, Gitlab CI!&quot;
  - echo &quot;Bye, Gitlab CI!&quot;
  extends:
  - my-base-block&lt;/pre&gt;



&lt;p&gt;Now we have both script parts! I&amp;#8217;m exited to explore Gitlab further in the future, so far my experience with it has been a real pleasure.&amp;nbsp;🧡&lt;/p&gt;



&lt;p&gt;Thanks for coming to my TED Talk!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2022/01/11-how-to-extend-and-reuse-configs-in-gitlab-ci/index.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/yaml/yaml_optimization.html#reference-tags&quot;&gt;Official Gitlab Documentation&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/yaml/&quot;&gt;Full .gitlab-ci YAML reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">TIL: Replace git URLs in Gitlab CI</title>
    <link href="https://kevin.gimbel.dev/blog/2021/12/replace-git-urls-in-gitlab-ci/" />
    <id>https://kevingimbel.de/blog/2021/12/replace-git-urls-in-gitlab-ci/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;When working with Gitlab as a storage for Terraform or Ansible modules you probably access them using SSH, like&amp;nbsp;git@gitlab.instance:group/project.git. This has the advantage that authentication is done using SSH keys and everybody on your team can access the repositories just like they&amp;#8217;d do when cloning on the terminal &amp;#8211; no need for entering passwords during [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;When working with Gitlab as a storage for Terraform or Ansible modules you probably access them using SSH, like&amp;nbsp;&lt;code&gt;git@gitlab.instance:group/project.git&lt;/code&gt;. This has the advantage that authentication is done using SSH keys and everybody on your team can access the repositories just like they&amp;#8217;d do when cloning on the terminal &amp;#8211; no need for entering passwords during clone or install.&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-style-default has-contrast-color has-secondary-background-color has-text-color has-background is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;Before we begin: I use Ansible roles as an example here, but this applies to any sort of installable module from git sources, e.g. private NPM modules or Python packages stored in Gitlab repositories.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;The method described has a disadvantage: In CI you may not have an SSH key ready, or you need different SSH keys for security reasons. Managing all the different SSH keys just to clone some repositories is tiresome &amp;#8211; so how can we access the repositories without rewriting all our code or exposing SSH keys on the build agent?&lt;/p&gt;



&lt;p&gt;The answer is&amp;nbsp;&lt;code&gt;git config --global url&lt;/code&gt;!&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;git config --global url.&quot;https://gitlab-ci-user:${GITLAB_TOKEN}@gitlab.instance/&quot;.insteadOf &quot;git@gitlab.instance:&quot;&lt;/pre&gt;



&lt;p&gt;Notice the&amp;nbsp;&lt;code&gt;/&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;:&lt;/code&gt;&amp;nbsp;&amp;#8211; they are important! This will rewrite&amp;nbsp;&lt;code&gt;git@gitlab.instance:group/project.git&lt;/code&gt;&amp;nbsp;to&amp;nbsp;&lt;code&gt;https://gitlab-ci-user:${GITLAB_TOKEN}@gitlab.instance/project/group.git&lt;/code&gt;&amp;nbsp;when cloning the source code, which allows us to access the repository using the&amp;nbsp;&lt;code&gt;$GITLAB_TOKEN&lt;/code&gt;&amp;nbsp;and username rather than SSH.&lt;/p&gt;



&lt;p&gt;&lt;code&gt;$GITLAB_TOKEN&lt;/code&gt;&amp;nbsp;is a custom project level access token. Assuming you have all your Ansible roles under&amp;nbsp;&lt;code&gt;gitlab.instance/ansible&lt;/code&gt;&amp;nbsp;the token would be created on the&amp;nbsp;&lt;code&gt;ansible&lt;/code&gt;&amp;nbsp;group level (see&amp;nbsp;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/deploy_tokens/#group-deploy-token&quot;&gt;official Gitlab documentation&lt;/a&gt;).&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/12/30-replace-git-ur-ls-in-gitlab-ci/index.md#full-gitlab-ci-example&quot;&gt;&lt;/a&gt;Full gitlab-ci example&lt;/h2&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;variables:
  GITLAB_TOKEN:
    description: &quot;Token used to authenticate with the Ansible group in Gitlab&quot;
  GITLAB_USER:
    description: &quot;User associated with the GITLAB_TOKEN. Can be set during creation&quot;
    value: &quot;gitlab-ci-ansible&quot;

stages:
  - deploy

deploy-ansible:
  image: my/ansible-container
  stage: deploy
  script:
    - git config --global url.&quot;https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.instance/&quot;.insteadOf &quot;git@gitlab.instance:&quot;
    - ansible --version
    - ansible-galaxy install -r requirements.yml -p roles --force
    - ansible-playbook site.yml&lt;/pre&gt;



&lt;p&gt;This config will run the configuration step, then print the ansible version, install the requirements, and finally runs the&amp;nbsp;&lt;code&gt;site.yml&lt;/code&gt;&amp;nbsp;playbook. The requirements can now be installed from private Gitlab repositories, and the Ansible run finishes successfully!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/12/30-replace-git-ur-ls-in-gitlab-ci/index.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/deploy_tokens/#group-deploy-token&quot;&gt;Gitlab Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">Proxy websocket connections with Apache2</title>
    <link href="https://kevin.gimbel.dev/blog/2021/06/proxy-websocket-connections-with-apache2/" />
    <id>https://kevingimbel.de/blog/2021/06/proxy-websocket-connections-with-apache2/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;How to configure Apache2 to pass through web socket connections Recently I had to adjust an Apache Virtual Host to allow proxying of Web Socket requests to a service running on localhost which would also accept HTTP requests on the same port. The problem The service in question was&amp;nbsp;Loki, the&amp;nbsp;&amp;#8220;Prometheus, but for logs&amp;#8221;&amp;nbsp;from Grafana. At&amp;nbsp;Synoa&amp;nbsp;we&amp;#8217;ve [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;How to configure Apache2 to pass through web socket connections&lt;/h2&gt;



&lt;p&gt;Recently I had to adjust an Apache Virtual Host to allow proxying of Web Socket requests to a service running on localhost which would also accept HTTP requests on the same port.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/24-proxy-websocket-connections-with-apache2/index.md#the-problem&quot;&gt;&lt;/a&gt;The problem&lt;/h2&gt;



&lt;p&gt;The service in question was&amp;nbsp;&lt;a href=&quot;https://grafana.com/oss/loki/&quot;&gt;Loki&lt;/a&gt;, the&amp;nbsp;&lt;em&gt;&amp;#8220;Prometheus, but for logs&amp;#8221;&lt;/em&gt;&amp;nbsp;from Grafana. At&amp;nbsp;&lt;a href=&quot;https://synoa.de/&quot;&gt;Synoa&lt;/a&gt;&amp;nbsp;we&amp;#8217;ve grown to love Prometheus and Grafana, so the choice to do our centralized log management with Loki came naturally; Especially since Loki is a lot simpler in its architecture and easier to operate with a small ops team; But that&amp;#8217;s stuff for another blog post. 🙂&lt;/p&gt;



&lt;p&gt;Without the Socket proxy the &amp;#8220;Live View&amp;#8221; on incoming logs and the &amp;#8220;Show Context&amp;#8221; button which shows surrounding lines of a log in Grafana didn&amp;#8217;t work; Since I&amp;#8217;ve had no experience with Web Sockets it took some time to figure out that the problem was the sockets didn&amp;#8217;t reach the backend service running on&amp;nbsp;&lt;code&gt;127.0.0.1:3000&lt;/code&gt;&amp;nbsp;behind Apache2.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/24-proxy-websocket-connections-with-apache2/index.md#the-solution&quot;&gt;&lt;/a&gt;The solution&lt;/h2&gt;



&lt;p&gt;The solution was to configure Apache so it would proxy the web socket request to the websocket service (&lt;code&gt;ws://127.0.0.1:3000/&lt;/code&gt;) explicitly if the request is marked as such with the&amp;nbsp;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade&quot;&gt;&lt;code&gt;Upgrade&lt;/code&gt;&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt;&amp;nbsp;headers.&lt;/p&gt;



&lt;p&gt;For this to work, we first need the&amp;nbsp;&lt;code&gt;proxy_wstunnel&lt;/code&gt;&amp;nbsp;module.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# Enable module on Ubuntu
$ sudo a2enmod proxy_wstunnel&lt;/pre&gt;



&lt;p&gt;Then, we can adjust the vhost configuration file to include a rewrite rule (lines 4 to 7):&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&amp;lt;VirtualHost *:443&amp;gt;
  ServerName my.server.tld
  SSLEngine On

  RewriteEngine On
  RewriteCond %{HTTP:Upgrade} websocket &amp;#91;NC]
  RewriteCond %{HTTP:Connection} upgrade &amp;#91;NC]
  RewriteRule ^/?(.*) &quot;ws://127.0.0.1:3000/$1&quot; &amp;#91;P,L]

  ProxyPreserveHost On
  ProxyPass / http://127.0.0.1:3000/
  ProxyPassReverse / http://127.0.0.1:3000/
  ProxyRequests off
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;After making these changes and reloading Apache2, the Grafana Live Log view and Loki &amp;#8220;Show Context&amp;#8221; function was working again.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/24-proxy-websocket-connections-with-apache2/index.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&amp;#8220;&lt;a href=&quot;https://noqqe.de/blog/2018/04/21/apache2-websockets/&quot;&gt;Apache2 Websockets&lt;/a&gt;&amp;#8221; on noqqe.de (in German)&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/mod_proxy_wstunnel.html&quot;&gt;mod_proxy_wstunnel module documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">Validating variables in terraform</title>
    <link href="https://kevin.gimbel.dev/blog/2021/06/validating-variables-in-terraform/" />
    <id>https://kevingimbel.de/blog/2021/06/validating-variables-in-terraform/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Finally, terraform can validate input variables! With the 0.13 release terraform introduces input validation, and with the 1.0.0 releases it was stabilized! Before there was no way of validating variables other than checking their length or doing basic checks inside the code, for example in the&amp;nbsp;locals.tf&amp;nbsp;file, and errors with variables mostly came to light during [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Finally, terraform can validate input variables!&lt;/h2&gt;



&lt;p&gt;With the 0.13 release terraform introduces input validation, and with the 1.0.0 releases it was stabilized! Before there was no way of validating variables other than checking their length or doing basic checks inside the code, for example in the&amp;nbsp;&lt;code&gt;locals.tf&lt;/code&gt;&amp;nbsp;file, and errors with variables mostly came to light during deployments. There was also no way of telling the user&amp;nbsp;&lt;em&gt;what&lt;/em&gt;&amp;nbsp;what wrong with a variable.&lt;/p&gt;



&lt;p&gt;Excited about this feature I took a deep-dive at work and implemented validation for all variables in our new infrastructure modules. This blog post will go over the possibilities of validations and how to implement them and how to combine multiple asserts. All code examples are&amp;nbsp;&lt;em&gt;practical&lt;/em&gt;&amp;nbsp;and no foo-bar-baz made-up code!&lt;/p&gt;



&lt;p&gt;Knowledge of terraform is not required, however you should be somewhat familiar with&amp;nbsp;&lt;a href=&quot;https://github.com/hashicorp/hcl&quot;&gt;HCL&lt;/a&gt;, the configuration language of terraform.&lt;/p&gt;



&lt;p class=&quot;has-contrast-color has-secondary-background-color has-text-color has-background has-link-color wp-elements-59c3d6777f2eba925f3d2bfe4cbe96fe&quot;&gt;All examples are available in a repo at &lt;a href=&quot;https://github.com/KevinGimbel/blog-terraform-validation-example&quot;&gt;github.com/KevinGimbel/blog-terraform-validation-example&lt;/a&gt;. At times this post says &amp;#8220;To test this, run&amp;#8230;&amp;#8221;; All of these can be run against the code inside the example repo. To use the repo, follow these steps:&lt;br&gt;&lt;br&gt;$ &lt;code&gt;git clone https://github.com/KevinGimbel/blog-terraform-validation-example.git &lt;/code&gt;&lt;br&gt;&lt;code&gt;$ cd blog-terraform-validation-example &lt;/code&gt;&lt;br&gt;$ &lt;code&gt;terraform init&lt;/code&gt;&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#syntax-of-a-validation&quot;&gt;&lt;/a&gt;Syntax of a validation&lt;/h2&gt;



&lt;p&gt;All validations happen in the&amp;nbsp;&lt;code&gt;variables.tf&lt;/code&gt;&amp;nbsp;file where variables are defined. Inside the block defining a variable a new&amp;nbsp;&lt;code&gt;validation&lt;/code&gt;&amp;nbsp;block is placed:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;variable &quot;my_var&quot; {
  type = number
  default = 0

  validation {
    condition = var.my_var &amp;gt;= 0
    error_message = &quot;Please set my_var to a positive number or 0.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p class=&quot;has-contrast-color has-secondary-background-color has-text-color has-background&quot;&gt;Terraform requires the sentence to start with an uppercase letter and end with a dot.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#validating-the-length-of-a-string&quot;&gt;&lt;/a&gt;Validating the length of a string&lt;/h2&gt;



&lt;p&gt;The following defines a variable named&amp;nbsp;&lt;code&gt;hetzner_api_token&lt;/code&gt;&amp;nbsp;that represents a&amp;nbsp;&lt;a href=&quot;https://hetzner.cloud/&quot;&gt;Hetzner Cloud&lt;/a&gt;&amp;nbsp;API token.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;# file: variables.tf
variable &quot;hetzner_api_token&quot; {
  type        = string
  description = &quot;Hetzner API token&quot;
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;If somebody would specify&amp;nbsp;&lt;code&gt;hetzner_api_token = &quot;&quot;&lt;/code&gt;&amp;nbsp;the variable would be defined as far as terraform is concerned and terraform would start deploying until it reaches a point where the missing token causes an issue; To prevent this we can apply validations like so&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;&quot; class=&quot;&quot;&gt;# file: variables.tf
variable &quot;hetzner_api_token&quot; {
  type        = string
  description = &quot;Hetzner API token&quot;

  validation {
    condition     = length(var.hetzner_api_token) == 64
    error_message = &quot;Must be a 64 character long Hetzner API token.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This validates that the variable is set AND is exactly 64 characters long, which is the length of Hetzner Cloud API tokens.&lt;/p&gt;



&lt;p&gt;To test this, run&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;# Shows no error and logs the configured token
terraform apply -target=null_resource.validate_hetzner_api_token
# Invalid, shows error message
terraform apply -target=null_resource.validate_hetzner_api_token -var &quot;hetzner_api_token=xxx&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#advanced-validation-with-regex&quot;&gt;&lt;/a&gt;Advanced validation with regex&lt;/h2&gt;



&lt;p&gt;Checking the&amp;nbsp;&lt;code&gt;length&lt;/code&gt;&amp;nbsp;might be helpful for simple assertions but sometimes more advanced checks are needed. This is where regex comes into play. To use regex terraform provides the&amp;nbsp;&lt;code&gt;can&lt;/code&gt;&amp;nbsp;function.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;variable &quot;server_role_arn&quot; {
  type        = string
  description = &quot;AWS arn of the role to assign to servers&quot;

  validation {
    condition     = can(regex(&quot;^arn:aws:iam::[[:digit:]]{12}:role/.+&quot;, var.server_role_arn))
    error_message = &quot;Must be a valid AWS IAM role ARN.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This validation fails if the provides string doesn&amp;#8217;t match the format of an&amp;nbsp;&lt;em&gt;AWS IAM role ARN&lt;/em&gt;. This means it will also fail if an ARN is provided that matches a user, like&amp;nbsp;&lt;code&gt;arn:aws:iam::012345678912:user/kevin&lt;/code&gt;! The&amp;nbsp;&lt;code&gt;[[:digit:]]{12}&lt;/code&gt;&amp;nbsp;checks for exactly 12 digits, it&amp;#8217;s equal to&amp;nbsp;&lt;code&gt;&#92;d{12}&lt;/code&gt;&amp;nbsp;in other regex engines.&amp;nbsp;&lt;code&gt;.+&lt;/code&gt;&amp;nbsp;at the end matches any character one or more times.&lt;/p&gt;



&lt;p&gt;To test this, run&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;terraform apply
# Invalid, shows error message
terraform apply -target=null_resource.validate_server_role_arn
terraform apply -target=null_resource.validate_server_role_arn -var &quot;server_role_arn=arn:aws:iam::012345678912:user/kevin&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;│ Error: Invalid value for variable
│ 
│   on variables.tf line 1:
│    1: variable &quot;server_role_arn&quot; {
│ 
│ Must be a valid AWS IAM role ARN.
│ 
│ This was checked by the validation rule at variables.tf:5,3-13.
&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#multiple-conditions&quot;&gt;&lt;/a&gt;Multiple conditions&lt;/h2&gt;



&lt;p&gt;Validations can have more than one condition. Conditions are grouped together with the&amp;nbsp;&lt;code&gt;alltrue&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;anytrue&lt;/code&gt;&amp;nbsp;functions, which take a list of conditions and returns&amp;nbsp;&lt;code&gt;true&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;variable &quot;env&quot; {
  type        = string
  description = &quot;Environment to deploy, can be production, staging, development, or test.&quot;

  validation {
    condition = anytrue([
      var.env == &quot;production&quot;,
      var.env == &quot;staging&quot;,
      var.env == &quot;development&quot;,
      var.env == &quot;test&quot;
    ])
    error_message = &quot;Must be a valid env, can be production, staging, development, or test.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;To test this, run&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;# valid 
terraform apply -target=null_resource.validate_env
# Invalid 
terraform apply -target=null_resource.validate_env -var &quot;env=prod&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#multiple-nested-conditions&quot;&gt;&lt;/a&gt;Multiple, nested conditions&lt;/h2&gt;



&lt;p&gt;&lt;code&gt;alltrue&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;anytrue&lt;/code&gt;&amp;nbsp;can be nested! The next example validates the variable is a legit Hetzner Server type identifier, without requiring any regex magic!&amp;nbsp;🥸&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;variable &quot;hetzner_server_type&quot; {
  type        = string
  description = &quot;Server type to use, see https://www.hetzner.com/cloud#pricing&quot;
  default     = &quot;cx21&quot;

  validation {
    condition = alltrue([
      anytrue([
        can(regex(&quot;cx*&quot;, var.hetzner_server_type)),
        can(regex(&quot;cpx*&quot;, var.hetzner_server_type)),
        can(regex(&quot;ccx*&quot;, var.hetzner_server_type))
      ]),
      anytrue([
        length(var.hetzner_server_type) == 5,
        length(var.hetzner_server_type) == 4
      ])
    ])
    error_message = &quot;Must be a valid Hetzner server type, e.g. cx21, cx11, ccx22 see https://www.hetzner.com/cloud#pricing for available options.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;It checks that both of these are true:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;The variable starts with&amp;nbsp;&lt;code&gt;cx&lt;/code&gt;,&amp;nbsp;&lt;code&gt;cpx&lt;/code&gt;, or&amp;nbsp;&lt;code&gt;ccx&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;The variable is 4 or 5 characters long&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;To test this, run&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;# valid 
terraform apply -target=null_resource.validate_hetzner_server_type
# invalid, shows validation error
terraform apply -target=null_resource.validate_hetzner_server_type -var &quot;hetzner_server_type=nope&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#validating-elements-in-a-list&quot;&gt;&lt;/a&gt;Validating elements in a list&lt;/h2&gt;



&lt;p&gt;Lastly, using a&amp;nbsp;&lt;code&gt;for&lt;/code&gt;&amp;nbsp;loop entries inside of a list can be validated.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;variable &quot;hetzner_datacenters&quot; {
  type        = list(string)
  description = &quot;List of datacenter identifier into which the server can be launched, chosen at random&quot;
  default     = [&quot;nbg1&quot;, &quot;fsn1&quot;]

  validation {
    condition = alltrue([
      for dc in var.hetzner_datacenters : contains([&quot;nbg1&quot;, &quot;fsn1&quot;, &quot;hel1&quot;], dc)
    ])
    error_message = &quot;Must one or more of: &#39;nbg1&#39;, &#39;fsn1&#39;, or &#39;hel1&#39; - no other value is allowed.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Right now Hetzner has three datacenter locations, two in Germany (Nürnberg (&lt;code&gt;nbg1&lt;/code&gt;) and Falkenstein (&lt;code&gt;fsn1&lt;/code&gt;)) and one in Finland (Helsinki (&lt;code&gt;hel1&lt;/code&gt;)), so validating them is doable; for AWS, GPC, or Azure this would be a lot harder and require regex instead.&lt;/p&gt;



&lt;p&gt;To test this, run&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;# valid 
terraform apply -target=null_resource.validate_hetzner_datacenters
# invalid, shows validation error
terraform apply -target=null_resource.validate_hetzner_datacenters -var &#39;hetzner_datacenters=[&quot;fsn1&quot;, &quot;lax1&quot;]&#39; &lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;Using the shown functions like&amp;nbsp;&lt;code&gt;regex&lt;/code&gt;,&amp;nbsp;&lt;code&gt;length&lt;/code&gt;&amp;nbsp;and loops we can validate a variable has a certain value or follows a certain format.&lt;/p&gt;



&lt;p&gt;With&amp;nbsp;&lt;code&gt;anytrue&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;alltrue&lt;/code&gt;&amp;nbsp;we can group together multiple validations so that either all or one of multiple conditions must match.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/language/values/variables.html&quot;&gt;Terraform variable documentation&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/language/functions/can.html&quot;&gt;Terraform&amp;nbsp;&lt;code&gt;can&lt;/code&gt;&amp;nbsp;function&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/language/functions/regex.html&quot;&gt;Terraform&amp;nbsp;&lt;code&gt;regex&lt;/code&gt;&amp;nbsp;function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">Darken and Lighten colors with CSS</title>
    <link href="https://kevin.gimbel.dev/blog/2021/06/darken-and-lighten-colors-with-css/" />
    <id>https://kevingimbel.de/blog/2021/06/darken-and-lighten-colors-with-css/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Recreating SASS darken() &amp;amp; lighten() function with CSS variables and calc The technique shown in this post uses the&amp;nbsp;hsl&amp;nbsp;color format in combination with the&amp;nbsp;calc&amp;nbsp;CSS function to calculate darker or lighter shades of a base color. Before we get into the code I want to make sure&amp;nbsp;I did not come up with this, I found the [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Recreating SASS darken() &amp;amp; lighten() function with CSS variables and calc&lt;/h2&gt;



&lt;p&gt;The technique shown in this post uses the&amp;nbsp;&lt;code&gt;hsl&lt;/code&gt;&amp;nbsp;color format in combination with the&amp;nbsp;&lt;code&gt;calc&lt;/code&gt;&amp;nbsp;CSS function to calculate darker or lighter shades of a base color.&lt;/p&gt;



&lt;p&gt;Before we get into the code I want to make sure&amp;nbsp;&lt;strong&gt;I did not come up with this&lt;/strong&gt;, I found the code on&amp;nbsp;&lt;a href=&quot;https://stackoverflow.com/a/55330103&quot;&gt;StackOverflow&lt;/a&gt;&amp;nbsp;and only want to write about it to keep it on my site for future reference! 🙂&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/08-darken-and-lighten-colors-with-css/index.md#the-code&quot;&gt;&lt;/a&gt;The code&lt;/h2&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;css&quot; class=&quot;language-css&quot;&gt;:root {
  --color: 0, 100%; 
  --l:50%;
    
  --color-primary: hsl(var(--color),var(--l));
  --color-primary-darker: hsl(var(--color),calc(var(--l) - 10%));
  --color-primary-darkest: hsl(var(--color),calc(var(--l) - 30%)); 
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here we define a color variable named&amp;nbsp;&lt;code&gt;--color&lt;/code&gt;&amp;nbsp;that holds the first two values of a&amp;nbsp;&lt;code&gt;hsl&lt;/code&gt;&amp;nbsp;color definition: The&amp;nbsp;&lt;em&gt;hue&lt;/em&gt;&amp;nbsp;and&amp;nbsp;&lt;em&gt;saturation&lt;/em&gt;&amp;nbsp;value. The third value,&amp;nbsp;&lt;em&gt;lightness&lt;/em&gt;&amp;nbsp;is calculated based on the default lightness value (&lt;code&gt;--l&lt;/code&gt;).&lt;/p&gt;



&lt;p&gt;The&amp;nbsp;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl()&quot;&gt;HSL color function&lt;/a&gt;&amp;nbsp;takes three values:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt;&amp;nbsp;is the&amp;nbsp;&lt;code&gt;hue&lt;/code&gt;, a number from 0 to 360&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;&amp;nbsp;is the&amp;nbsp;&lt;code&gt;saturation&lt;/code&gt;, in percent 0 to 100&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;&amp;nbsp;is the&amp;nbsp;&lt;code&gt;lightness&lt;/code&gt;, in percent from 0 to 100&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;The lightness can be increased to make the color lighter and decreased to make it darker.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/08-darken-and-lighten-colors-with-css/index.md#the-result&quot;&gt;&lt;/a&gt;The result&lt;/h2&gt;



&lt;figure class=&quot;wp-block-embed is-type-wp-embed is-provider-codepen wp-block-embed-codepen&quot;&gt;&lt;div class=&quot;wp-block-embed__wrapper&quot;&gt;
&lt;iframe class=&quot;wp-embedded-content&quot; sandbox=&quot;allow-scripts&quot; security=&quot;restricted&quot; title=&quot;dynamic darken() function with css&quot; src=&quot;https://codepen.io/kevingimbel/embed/preview/zYZaVPp?default-tabs=html%2Cresult&amp;#038;height=300&amp;#038;host=https%3A%2F%2Fcodepen.io&amp;#038;slug-hash=zYZaVPp#?secret=sBu6YRG4sX&quot; data-secret=&quot;sBu6YRG4sX&quot; scrolling=&quot;no&quot; frameborder=&quot;0&quot; height=&quot;300&quot;&gt;&lt;/iframe&gt;
&lt;/div&gt;&lt;/figure&gt;



&lt;p&gt;We can also apply the variables on a class level instead of the&amp;nbsp;&lt;code&gt;:root&lt;/code&gt;&amp;nbsp;element so they are calculated every time the class is used, which enables &amp;#8220;theming&amp;#8221;, as the following CodePen shows.&lt;/p&gt;



&lt;p&gt;The&amp;nbsp;&lt;code&gt;green&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;blue&lt;/code&gt;&amp;nbsp;class set different values for&amp;nbsp;&lt;code&gt;--color&lt;/code&gt;, therefore changing the values of&amp;nbsp;&lt;code&gt;--color-primary&lt;/code&gt;,&amp;nbsp;&lt;code&gt;--color-primary-darker&lt;/code&gt;, and&amp;nbsp;&lt;code&gt;--color-primary-darkest&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;{% codepen &amp;#8220;zYZaVPp&amp;#8221; %}&lt;/p&gt;



&lt;p&gt;Below is the new CSS code.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;css&quot; class=&quot;language-css&quot;&gt;:root {
  --color: 0, 100%;
  --l:50%; /*the initial lightness*/
}

.darken {
  --color-primary: hsl(var(--color),var(--l));
  --color-primary-darker: hsl(var(--color),calc(var(--l) - 10%));
  --color-primary-darkest: hsl(var(--color),calc(var(--l) - 30%)); 
  
  color: var(--color-primary-darkest);
  background: var(--color-primary);
}

.green {
  --color:120, 50%;
}

.blue {
  --color:245, 60%;
  --l: 80%;
}&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/08-darken-and-lighten-colors-with-css/index.md#lighten&quot;&gt;&lt;/a&gt;lighten&lt;/h2&gt;



&lt;p&gt;The&amp;nbsp;&lt;code&gt;lighten&lt;/code&gt;&amp;nbsp;function works in the same way, just that it would increase the lightness instead of decreasing it.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;css&quot; class=&quot;language-css&quot;&gt;.lighten {
  --color: 0, 100%; 
  --l:50%;
    
  --color-primary: hsl(var(--color),var(--l));
  --color-primary-lighter: hsl(var(--color),calc(var(--l) + 10%));
  --color-primary-lightest: hsl(var(--color),calc(var(--l) + 30%)); 
}&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/08-darken-and-lighten-colors-with-css/index.md#browser-support&quot;&gt;&lt;/a&gt;Browser Support&lt;/h2&gt;



&lt;p&gt;Just for completeness, here&amp;#8217;s the Browser support. It&amp;#8217;s looking &lt;em&gt;pretty good&lt;/em&gt; with over 90% for both features used (as of June 2021): &lt;a href=&quot;https://caniuse.com/css-variables&quot;&gt;https://caniuse.com/css-variables&lt;/a&gt;&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/08-darken-and-lighten-colors-with-css/index.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl()&quot;&gt;hsl on MDN&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;Example Pen 1&amp;nbsp;&lt;a href=&quot;https://codepen.io/kevingimbel/pen/jOBKjar&quot;&gt;codepen.io/kevingimbel/pen/jOBKjar&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;Example Pen 2&amp;nbsp;&lt;a href=&quot;https://codepen.io/kevingimbel/pen/zYZaVPp&quot;&gt;codepen.io/kevingimbel/pen/zYZaVPp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">First steps with Traefik 2</title>
    <link href="https://kevin.gimbel.dev/blog/2021/05/first-steps-with-traefik-2/" />
    <id>https://kevingimbel.de/blog/2021/05/first-steps-with-traefik-2/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;A tale of Auto SSL, Basic Auth, and lots of debugging Recently I&amp;#8217;ve spent some time at work trying out&amp;nbsp;Traefik 2&amp;nbsp;and learning about the new concepts like routers and middleware since we&amp;#8217;ll use Traefik 2 as part of some new infrastructure. We&amp;#8217;ve used Traefik 1 in production at Synoa for the past 3 years. Initially [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;A tale of Auto SSL, Basic Auth, and lots of debugging&lt;/h2&gt;



&lt;p&gt;Recently I&amp;#8217;ve spent some time at work trying out&amp;nbsp;&lt;a href=&quot;https://traefik.io/&quot;&gt;Traefik 2&lt;/a&gt;&amp;nbsp;and learning about the new concepts like routers and middleware since we&amp;#8217;ll use Traefik 2 as part of some new infrastructure.&lt;/p&gt;



&lt;p&gt;We&amp;#8217;ve used Traefik 1 in production at Synoa for the past 3 years. Initially I chose Traefik because it was easy to integrate with Kubernetes and later on with Amazon ECS when we moved to it from Kubernetes. Traefik has always served us well and I felt very confident deploying it to production. We tried an unreleased version of Traefik 2 with ECS support in the past but so far had no time to update every system to the new version. Since we are in the process of creating a new product with completely new infrastructure I decided to include Traefik 2 from the start.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#the-stack&quot;&gt;&lt;/a&gt;The stack&lt;/h2&gt;



&lt;p&gt;Before we start with any technical stuff, let&amp;#8217;s talk about the stack everything runs on for a second. The infrastructure is planned with simplicity and &amp;#8220;small-scale&amp;#8221; in mind. We&amp;nbsp;&lt;strong&gt;do not need&lt;/strong&gt;&amp;nbsp;a big cluster setup with thousands of servers (or even with tenths of servers), no orchestrator like Kubernetes (or ECS, Mesos/Marathon, &amp;#8230;) and we have predictable workloads. There&amp;#8217;s no need to suddenly scale up to hundreds or thousands of containers, nor will there be a requirements to scale without it being planned ahead.&lt;/p&gt;



&lt;p&gt;All my testing in this case was done on a small&amp;nbsp;&lt;a href=&quot;https://hetzner.cloud/&quot;&gt;Hetzner Cloud&lt;/a&gt;&amp;nbsp;server running standalone Docker with no orchestrator.&lt;/p&gt;



&lt;p&gt;I may write more about small-scale cloud (infra), but not today. 🙂&lt;/p&gt;



&lt;p&gt;The goals we hope to archive with Traefik are:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Handle all traffic on port&amp;nbsp;&lt;code&gt;80&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;443&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;Redirect from port&amp;nbsp;&lt;code&gt;80&lt;/code&gt;&amp;nbsp;to&amp;nbsp;&lt;code&gt;443&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;Auto-SSL for port&amp;nbsp;&lt;code&gt;443&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;Auto-SSL for all sub-domains like&amp;nbsp;&lt;code&gt;service-1.my.tld&lt;/code&gt;,&amp;nbsp;&lt;code&gt;service-2.my.tld&lt;/code&gt;, &amp;#8230;&lt;/li&gt;



&lt;li&gt;Basic Auth for all exposed services, preferably by default and without extra config&lt;/li&gt;



&lt;li&gt;Traefik Dashboard with basic auth&lt;/li&gt;



&lt;li&gt;Prometheus metrics with basic auth&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#gotchas&quot;&gt;&lt;/a&gt;Gotchas&lt;/h2&gt;



&lt;p&gt;{% note &amp;#8220;info&amp;#8221; %}&amp;nbsp;&lt;strong&gt;Head&amp;#8217;s up!&lt;/strong&gt;&amp;nbsp;This post is about Traefik 2, specifically version 2.4! I am using the TOML file format for this post, but anything mentioned here applies to YAML or other config sources as well. {% endnote %}&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#where-to-configure-what&quot;&gt;&lt;/a&gt;Where to configure what??&lt;/h3&gt;



&lt;p&gt;Traefik has a &amp;#8220;main&amp;#8221; config file, usually named&amp;nbsp;&lt;code&gt;traefik.toml&lt;/code&gt;, where general config is placed in. This includes providers, default entry points (ports like 80, 443, &amp;#8230;), log level configuration, the dashboard and API, &amp;#8230; however there&amp;#8217;s stuff that&amp;nbsp;&lt;em&gt;cannot be in this file&lt;/em&gt;. Namely, any&amp;nbsp;&lt;a href=&quot;https://doc.traefik.io/traefik/middlewares/overview/&quot;&gt;middleware&lt;/a&gt;&amp;nbsp;config!&lt;/p&gt;



&lt;p&gt;I didn&amp;#8217;t know that and it took me quite some time to figure it out. In the end I found a forum post that said middleware has to be in another file, which must be loaded in the main configuration using the&amp;nbsp;&lt;a href=&quot;https://doc.traefik.io/traefik/providers/file/&quot;&gt;file provider&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;This means the following config is&amp;nbsp;&lt;strong&gt;Invalid&lt;/strong&gt;:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml

[http.middlewares.my-atuh.basicAuth]
usersFile=&quot;/etc/traefik/.htpasswd&quot;&lt;/pre&gt;



&lt;p&gt;The middleware named&amp;nbsp;&lt;code&gt;my-auth&lt;/code&gt;&amp;nbsp;will not work and cannot be accessed as&amp;nbsp;&lt;code&gt;my-auth@file&lt;/code&gt;. Instead we need to put it into a second file like so:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml
# enable file provider
[providers.file]
directory=&quot;/etc/traefik/config.d/&quot;&lt;/pre&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# /etc/traefik/config.d/middlewares.toml
[http.middlewares.my-atuh.basicAuth]
usersFile=&quot;/etc/traefik/.htpasswd&quot;&lt;/pre&gt;



&lt;p&gt;Now the middleware is usable by specifying a Docker label like&amp;nbsp;&lt;code&gt;traefik.http.routers.my-container.middlewares=my-auth@file&lt;/code&gt;&lt;/p&gt;



&lt;h4 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#summary-config-files&quot;&gt;&lt;/a&gt;Summary: config files&lt;/h4&gt;



&lt;ul&gt;
&lt;li&gt;Middleware cannot be configured in the main config file&lt;/li&gt;



&lt;li&gt;Any&amp;nbsp;&lt;code&gt;X@file&lt;/code&gt;&amp;nbsp;middleware must be in a separate config file&lt;/li&gt;



&lt;li&gt;The file provider must be enabled with&amp;nbsp;&lt;code&gt;[providers.file]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#providers-must-be-enabled-explicitly&quot;&gt;&lt;/a&gt;Providers must be enabled explicitly&lt;/h3&gt;



&lt;p&gt;In the previous section we saw that we can specify&amp;nbsp;&lt;code&gt;[providers.file]&lt;/code&gt;&amp;nbsp;to configure the file provider. What I didn&amp;#8217;t know when I started digging into Traefik 2 is that&amp;nbsp;&lt;strong&gt;each provider that should be used MUST be added to the config file, even if no special config is needed&lt;/strong&gt;!&lt;/p&gt;



&lt;p&gt;So in order to use the docker provider, which reads Docker labels from containers, we need to add the following:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml
[providers.docker]&lt;/pre&gt;



&lt;p&gt;That&amp;#8217;s it. I spent literal hours debugging why Traefik return a &amp;#8220;404 not found&amp;#8221; for every request and didn&amp;#8217;t seem to pickup the containers I deployed, only to discover the provider&amp;nbsp;&lt;strong&gt;must be in the config file to enable it&lt;/strong&gt;, even without any special config values.&lt;/p&gt;



&lt;p&gt;One may wonder why an empty config is required and it does look a bit weird, even more so in YAML:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;providers:
  docker:&lt;/pre&gt;



&lt;p&gt;But it all makes sense when we think about the Traefik command line arguments, where a provider is enabled by setting&amp;nbsp;&lt;code&gt;--providers.docker&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;--providers.file&lt;/code&gt;. From a Traefik point of view the provider config acts as a boolean-ish thing: Is the provider there? If so, it is enabled. The more explicit alternative could be:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml (PSEUDO code, not working)
[providers]
  [providers.docker]
    enabled=true
  [providers.file]
    enabled=true&lt;/pre&gt;



&lt;p&gt;But then again, this would be pretty redundant.&lt;/p&gt;



&lt;p&gt;In hindsight it&amp;#8217;s logical and makes sense, but at the time I was biting my teeth and cussing at Traefik. Well, in the end it was&amp;nbsp;&lt;del&gt;DNS&lt;/del&gt;&amp;nbsp;human error.&lt;/p&gt;



&lt;h4 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#summary-providers&quot;&gt;&lt;/a&gt;Summary: providers&lt;/h4&gt;



&lt;ul&gt;
&lt;li&gt;Providers are enabled by adding a config like&amp;nbsp;&lt;code&gt;[providers.file]&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;[providers.docker]&lt;/code&gt;&amp;nbsp;into&amp;nbsp;&lt;code&gt;traefik.toml&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;Even with no additional config it must be added or Traefik must be started with&amp;nbsp;&lt;code&gt;--providers.x&lt;/code&gt;&amp;nbsp;flag&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#ssl-certificates&quot;&gt;&lt;/a&gt;SSL Certificates&lt;/h3&gt;



&lt;p&gt;Traefik can automatically register certificates with Let&amp;#8217;s Encrypt. This is incredibly helpful when deploying Traefik in an automated setup because it means there&amp;#8217;s no need for any other tool to handle SSL, like an API call to AWS Certificate Manager or a manual setup where certificates are requested once the server is up and running. In our current setup, once the server is started it briefly uses an invalid self-signed default certificate and once the Let&amp;#8217;s Encrypt certificates are ready Traefik uses them.&lt;/p&gt;



&lt;p&gt;In order to generate SSL certificates we need to define a Certificate Resolver, like so:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml
[certificateresolver.my-resolver.acme]
storage = &quot;/srv/docker/traefik/config/acme.json&quot;
email = &quot;totally@valid.email&quot;
[certificateresolver.my-resolver.acme.httpChallenge]
entryPoint = &quot;web&quot;&lt;/pre&gt;



&lt;p&gt;That&amp;#8217;s it. Now the resolver can be used in a router or entrypoint configuration. If used in an Entrypoint configuration, all routers that use this entry point will have SSL enabled.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml
[entryPoints.websecure]
  address = &quot;:443&quot;
  [entryPoints.websecure.http.tls]
    certResolver = &quot;my-resolver&quot;&lt;/pre&gt;



&lt;p&gt;And again, that&amp;#8217;s it. We tell the entrypoint named&amp;nbsp;&lt;code&gt;websecure&lt;/code&gt;&amp;nbsp;to use the certificate resolver named&amp;nbsp;&lt;code&gt;my-resolver&lt;/code&gt;&amp;nbsp;which we defined in the step before.&lt;/p&gt;



&lt;p&gt;To backup the certificates the file specified under&amp;nbsp;&lt;code&gt;storage&lt;/code&gt;&amp;nbsp;is all that&amp;#8217;s needed, because it contains all the certificates and keys.&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#automatic-basic-auth&quot;&gt;&lt;/a&gt;Automatic basic auth&lt;/h3&gt;



&lt;p&gt;Middlewares can also be used to enable defaults for an entrypoint, the following example tells every router that uses&amp;nbsp;&lt;code&gt;websecure&lt;/code&gt;&amp;nbsp;to use the&amp;nbsp;&lt;code&gt;my-auth@file&lt;/code&gt;&amp;nbsp;middleware (which we defined in the first section!)&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml
[entryPoints.websecure]
    address = &quot;:443&quot;
    [entryPoints.websecure.http.tls]
      certResolver = &quot;my-resolver&quot;
    [entryPoints.websecure.http]
      middlewares = [ &quot;my-auth@file&quot; ]&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;Despite some hiccups in the beginning and some frustration I&amp;#8217;m still confident in my choice. Traefik is a great proxy and does everything we need. It integrates with lots of different providers and the Docker provider is the absolute simplest to run, since it doesn&amp;#8217;t require any orchestrator &amp;#8211; just Docker labels on containers.&lt;/p&gt;



&lt;p&gt;I&amp;#8217;m looking forward to dig deeper into Traefik, especially getting more familiar with&amp;nbsp;&lt;a href=&quot;https://doc.traefik.io/traefik/plugins/&quot;&gt;Plugins&lt;/a&gt;!&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">TIL: Dots in /etc/sudoers.d filenames</title>
    <link href="https://kevin.gimbel.dev/blog/2021/05/gotcha-dots-in-etc-sudoers-d-filenames/" />
    <id>https://kevingimbel.de/blog/2021/05/gotcha-dots-in-etc-sudoers-d-filenames/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;A tale of facepalms While reviewing some Ansible modules with a colleague we stumbled upon an issue with our user creation module, and for a briefe time couldn&amp;#8217;t understand what was going on. The module in question creates multiple Linux users, adds them to groups, and enables some to use password less sudo via the&amp;nbsp;/etc/sudoers.d&amp;nbsp;config [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;A tale of facepalms&lt;/h2&gt;



&lt;p&gt;While reviewing some Ansible modules with a colleague we stumbled upon an issue with our user creation module, and for a briefe time couldn&amp;#8217;t understand what was going on.&lt;/p&gt;



&lt;p&gt;The module in question creates multiple Linux users, adds them to groups, and enables some to use password less sudo via the&amp;nbsp;&lt;code&gt;/etc/sudoers.d&lt;/code&gt;&amp;nbsp;config directory. For some reasons after we logged in with the newly created users, they were not able to use sudo without entering passwords.&lt;/p&gt;



&lt;p&gt;We checked the directory and all files were there, just as expected. The content of the files was also OK for every user, yet none could use sudo without entering a password.&lt;/p&gt;



&lt;p&gt;After some time I wondered if the dot in the filename may be the problem, since the files were named like&amp;nbsp;&lt;code&gt;passwordless_sudo_kevin.gimbel&lt;/code&gt;&amp;nbsp;but this couldn&amp;#8217;t be it, right? Wrong.&amp;nbsp;&lt;a href=&quot;https://www.sudo.ws/man/1.8.15/sudoers.man.html#Including_other_files_from_within_sudoers&quot;&gt;That&amp;#8217;s the problem&lt;/a&gt;, quote from the sudo man page:&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;sudo will read each file in /etc/sudoers.d, skipping file names that end in ‘~’ or contain a ‘.’ character to avoid causing problems with package manager or editor temporary/backup files.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;And that&amp;#8217;s why sudo config files cannot contain dots. Questionable, but that&amp;#8217;s how it is.&amp;nbsp;🤷&lt;/p&gt;



&lt;p&gt;Our solution was to strip out any dots using regex, since the Ansible role can potentially support any amount of users and we cannot control what names will be used.&lt;/p&gt;
</content>
  </entry>
  <entry>
    <title type="html">Wildcards in Prometheus queries</title>
    <link href="https://kevin.gimbel.dev/blog/2021/02/wildcards-in-prometheus-queries/" />
    <id>https://kevingimbel.de/blog/2021/02/wildcards-in-prometheus-queries/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Learn how to query data in Prometheus and how to use wildcards Hello and welcome to this &amp;#8220;snippet-sized&amp;#8221; post about&amp;nbsp;Prometheus&amp;nbsp;queries! Prometheus is a time-series database which means it is build to collect a lot of datasets that show values over time, for example the result of a HTTP request or the RAM usage of a [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Learn how to query data in Prometheus and how to use wildcards&lt;/h2&gt;



&lt;p&gt;Hello and welcome to this &amp;#8220;snippet-sized&amp;#8221; post about&amp;nbsp;&lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;&amp;nbsp;queries! Prometheus is a time-series database which means it is build to collect a lot of datasets that show values over time, for example the result of a HTTP request or the RAM usage of a server. At&amp;nbsp;&lt;a href=&quot;https://synoa.de/&quot;&gt;Synoa&lt;/a&gt;&amp;nbsp;we use Prometheus to monitor the health of our APIs and systems. I won&amp;#8217;t go into how Prometheus is setup, that&amp;#8217;s stuff for a different article, but instead this article focuses on&amp;nbsp;&lt;em&gt;how to query data with wildcards in Prometheus&lt;/em&gt;, using Prometheus own query language.&lt;/p&gt;



&lt;p&gt;First we need to define a bit of test data. Assume we have the following datasets in Prometheus:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code has-tiny-font-size&quot;&gt;&lt;code&gt;http_status{job=&quot;customer-dev&quot;,instance=&quot;https://dev.some-api.link/service-a&quot;,env=&quot;dev&quot;}
http_status{job=&quot;customer-dev&quot;,instance=&quot;https://dev.some-api.link/service-b&quot;,env=&quot;dev&quot;}
http_status{job=&quot;customer-dev&quot;,instance=&quot;https://dev.some-api.link/service-c&quot;,env=&quot;dev&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-a&quot;,env=&quot;prd&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-b&quot;,env=&quot;prd&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-c&quot;,env=&quot;prd&quot;}
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here we have 6 datasets describing&amp;nbsp;&lt;code&gt;service-a&lt;/code&gt;,&amp;nbsp;&lt;code&gt;service-b&lt;/code&gt;, and&amp;nbsp;&lt;code&gt;service-c&lt;/code&gt;&amp;nbsp;running in the PRD (production) and DEV (development) environment. To get all production services we could query like this:&lt;/p&gt;



&lt;p&gt;Prometheus Query&lt;/p&gt;



&lt;pre class=&quot;wp-block-code has-small-font-size&quot;&gt;&lt;code&gt;http_status{env=&quot;prd&quot;}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Result&lt;/p&gt;



&lt;pre class=&quot;wp-block-code has-tiny-font-size&quot;&gt;&lt;code&gt;http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-a&quot;,env=&quot;prd&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-b&quot;,env=&quot;prd&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-c&quot;,env=&quot;prd&quot;}
&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/02/09-prometheus-query-wildcard.md#wildcards-in-queries&quot;&gt;&lt;/a&gt;Wildcards in queries&lt;/h2&gt;



&lt;p&gt;Coming from MySQL you may think a wildcard could look like&amp;nbsp;&lt;code&gt;http_status{job=&quot;customer-*&quot;}&lt;/code&gt;, but that&amp;#8217;s not the case with Prometheus. Prometheus uses a Regex-like pattern and the wildcard character is&amp;nbsp;&lt;code&gt;.+&lt;/code&gt;&amp;nbsp;(read: dot plus) combined with tilde character (&lt;code&gt;~&lt;/code&gt;) instead of just the equal sign (&lt;code&gt;=&lt;/code&gt;). So the query becomes&amp;nbsp;&lt;code&gt;http_status{job~=&quot;customer-.+&quot;}&lt;/code&gt;. In the example below using the&amp;nbsp;&lt;code&gt;.+&lt;/code&gt;&amp;nbsp;wildcard character we search for metrics where the&amp;nbsp;&lt;code&gt;instance&lt;/code&gt;&amp;nbsp;label&amp;nbsp;&lt;em&gt;ends with service-c&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;{% note &amp;#8220;info&amp;#8221; %} Prometheus uses the tilde character&amp;nbsp;&lt;code&gt;~&lt;/code&gt;&amp;nbsp;to indicate a query contains a wildcard. Inside the label-query the &amp;#8220;dot plus&amp;#8221; (&lt;code&gt;.+&lt;/code&gt;) character combination is used where all characters are accepted. {% endnote %}&lt;/p&gt;



&lt;p&gt;Prometheus Query&lt;/p&gt;



&lt;pre class=&quot;wp-block-code has-small-font-size&quot;&gt;&lt;code&gt;http_status{instance=~&quot;.+service-c&quot;}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Result&lt;/p&gt;



&lt;pre class=&quot;wp-block-code has-tiny-font-size&quot;&gt;&lt;code&gt;http_status{job=&quot;customer-dev&quot;,instance=&quot;https://dev.some-api.link/service-c&quot;,env=&quot;dev&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-c&quot;,env=&quot;prd&quot;}
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Depending on how your metrics are labels querying can be hard or easy. At Synoa I decided to include special labels like&amp;nbsp;&lt;code&gt;env&lt;/code&gt;,&amp;nbsp;&lt;code&gt;system&lt;/code&gt;, as well as &amp;#8220;good&amp;#8221;&amp;nbsp;&lt;code&gt;job&lt;/code&gt;&amp;nbsp;names. The&amp;nbsp;&lt;code&gt;job&lt;/code&gt;&amp;nbsp;label always has the format&amp;nbsp;&lt;code&gt;customer-env-system&lt;/code&gt;, e.g.&amp;nbsp;&lt;code&gt;customer-prd-magento&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;customer-env-ecs&lt;/code&gt;. If I want to get all customer metrics I query like&amp;nbsp;&lt;code&gt;http_status{job=&quot;customer-.+&quot;}&lt;/code&gt;, if I want to see all dev system metrics I can query for&amp;nbsp;&lt;code&gt;http_status{job=&quot;customer-dev-.+&quot;}&lt;/code&gt;, and so on!&lt;/p&gt;



&lt;p&gt;If you got a better label system or a&amp;nbsp;&lt;strong&gt;must-have label&lt;/strong&gt;&amp;nbsp;let me know&amp;nbsp;&lt;a href=&quot;https://fosstodon.org/@KevinGimbel&quot;&gt;on Mastodon @KevinGimbel@fosstodon.org&lt;/a&gt;.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/02/09-prometheus-query-wildcard.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/querying/basics/&quot;&gt;Prometheus Query documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">Apply a patch from a Github PR</title>
    <link href="https://kevin.gimbel.dev/blog/2020/12/apply-a-patch-from-a-github-pr/" />
    <id>https://kevingimbel.de/blog/2020/12/apply-a-patch-from-a-github-pr/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;Ever found yourself needing that one fix from a PR on GitHub that hasn&amp;#8217;t been released yet? How can you get the code, for example a Magento fix, into your code base? Copy-paste it? That might work for small changes, but for large and complex changes copy-pasting is no solution. Luckily, we can use GitHub [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;Ever found yourself needing that one fix from a PR on GitHub that hasn&amp;#8217;t been released yet? How can you get the code, for example a Magento fix, into your code base? Copy-paste it? That might work for small changes, but for large and complex changes copy-pasting is no solution. Luckily, we can use GitHub to generate a patch file, which can then be applied with either the&amp;nbsp;&lt;code&gt;git&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;patch&lt;/code&gt;&amp;nbsp;command.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;patch-file what?&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#patch-file-what&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;A patch file is a text file containing instructions on how to apply a change to files. If you run&amp;nbsp;&lt;code&gt;git diff&lt;/code&gt;&amp;nbsp;and see the changed files with&amp;nbsp;&lt;code&gt;+/-&lt;/code&gt;&amp;nbsp;in front of lines that were added (&lt;code&gt;+&lt;/code&gt;) or removed (&lt;code&gt;-&lt;/code&gt;) you are looking at a patch file.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Example code&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#example-code&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;For illustration purpose I created a example repo:&amp;nbsp;&lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example&quot;&gt;https://github.com/KevinGimbel/blog-patch-example&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;You can clone the main branch and then apply the patch from the&amp;nbsp;&lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example/pull/1&quot;&gt;Pull Request&lt;/a&gt;&amp;nbsp;to it, if you want to follow along.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Getting the patch file&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#getting-the-patch-file&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;First we will need to get the patch file. GitHub makes this easy, but for some reason hides it from us. You can &lt;strong&gt;append .patch to the URL of any pull request to get the patch file&lt;/strong&gt;. So for the example above, open the URL &lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example/pull/1.patch&quot;&gt;https://github.com/KevinGimbel/blog-patch-example/pull/1.patch&lt;/a&gt; to see the plain text patch file.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;From 6da12536ff4da0efdabdf1a4dd55ded127fa247c 
Mon Sep 17 00:00:00 2001 
From: Kevin Gimbel &amp;lt;hallo@kevingimbel.com&gt; 
Date: Fri, 4 Dec 2020 16:31:30 +0100 
Subject: [PATCH] docs: add actual URL 

&lt;strong&gt;---&lt;/strong&gt; README.md | 2 +- 1 file changed, 
1 insertion(+), 1 deletion(-) 
diff --git a/README.md b/README.md 
index 0fe5e72..7f6398a 100644 
--- a/README.md 
+++ b/README.md 
&lt;strong&gt;@@ -2,4 +2,4 @@&lt;/strong&gt; 

This repo is part of a Blog Post on how to get and apply patch files from GitHub.com 

-You can read the full post here: ENTER_URL_HERE 
&#92; No newline at end of file 

+You can read the full post here: [https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/](https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/) 
&#92; No newline at end of file&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The patch file is both human and machine readable. Now to continue, get the patchfile!&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;Open a terminal and navigate to the repo you cloned earlier (&lt;code&gt;github.com/KevinGimbel/blog-patch-example&lt;/code&gt;)&lt;/li&gt;



&lt;li&gt;Download the patch file with&amp;nbsp;&lt;code&gt;wget&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;$ wget &quot;https://github.com/KevinGimbel/blog-patch-example/pull/1.patch&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This downloads a file named &lt;code&gt;1.patch&lt;/code&gt; into the current directory, which we can verify by running &lt;code&gt;ls -l&lt;/code&gt;&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;ls -l 
total 16 
-rw-r--r--@ 1 kevingimbel staff 733 Dec 4 16:33 1.patch # 👈 there it is 
-rw-r--r-- 1 kevingimbel staff 155 Dec 4 16:33 README.md&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;You can look at the file if you want to, it contains the same text as the example in this article.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Applying a patch with&amp;nbsp;&lt;code&gt;git&lt;/code&gt;&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#applying-a-patch-with-git&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;We can use&amp;nbsp;&lt;code&gt;git&lt;/code&gt;&amp;nbsp;to apply the patch. For manual patching git has the&amp;nbsp;&lt;code&gt;apply&lt;/code&gt;&amp;nbsp;command: If we want to test the changes to see if they can be applied but don&amp;#8217;t want to change any files yet, we can use the&amp;nbsp;&lt;code&gt;--check&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;-v&lt;/code&gt;&amp;nbsp;(verbose) flag:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;$ git apply -v --check 1.patch
Checking patch README.md...
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;To really apply the patch, we remove the &lt;code&gt;--check&lt;/code&gt; flag:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;$ git apply -v 1.patch 
Checking patch README.md... Applied patch README.md cleanly.&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Now check the &lt;code&gt;README.md&lt;/code&gt; file and you&amp;#8217;ll see the new content!&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;$ cat README.md 
# blog-patch-example 
This repo is part of a Blog Post on how to get and apply patch files from GitHub.com You can read the full post here: [https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/](https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/)

&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Patching without git&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#patching-without-git&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Sometimes you may not have git available, especially when patching software running on some server that &amp;#8211; for whatever reasons &amp;#8211; has no deployment process (no judging here!) or version control.&lt;/p&gt;



&lt;p&gt;Even without the&amp;nbsp;&lt;code&gt;git&lt;/code&gt;&amp;nbsp;command the patch can still be applied by using the&amp;nbsp;&lt;code&gt;patch&lt;/code&gt;&amp;nbsp;tool installed on most (all?) Linux systems. To do this, follow these steps:&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;Get the patch from the pull request by appending &lt;code&gt;.patch&lt;/code&gt; to the URL&lt;/li&gt;



&lt;li&gt;Apply the patch with the&amp;nbsp;&lt;code&gt;patch&lt;/code&gt;&amp;nbsp;command&lt;/li&gt;
&lt;/ol&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;$ patch -p 1 &amp;lt; filename.patch 

# To try out changes first, use `--dry-run` 
$ patch -p 1 --dry-run &amp;lt; filename.patch&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;And that&amp;#8217;s it for today! Feel free to create PRs in the repo&amp;nbsp;&lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example/&quot;&gt;https://github.com/KevinGimbel/blog-patch-example/&lt;/a&gt;&amp;nbsp;if you want to play around with patching.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Additional resources&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#additional-resources&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/1/patch&quot;&gt;patch man page&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs/git-apply&quot;&gt;git apply documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
  </entry>
  <entry>
    <title type="html">TIL: Bash select</title>
    <link href="https://kevin.gimbel.dev/blog/2018/04/til-bash-select/" />
    <id>https://kevingimbel.de/blog/2018/04/til-bash-select/</id>
    <updated>Z</updated>
    <summary type="html">&lt;p&gt;I was recently researching different bash prompts and stumbled upon an StackExchange answer which explains the different prompt types (PS1, PS2, PS3, and PS4). The answer explains how the PS3 prompt is used for commands like select. I did not know about select before, so that&amp;#8217;s the real TIL here! [&amp;#8230;] PS3 is shown when the select command is waiting for [&amp;hellip;]&lt;/p&gt;
</summary>
    <content type="html">
&lt;p&gt;I was recently researching different bash prompts and stumbled upon an &lt;a href=&quot;https://unix.stackexchange.com/a/193660/136550&quot;&gt;StackExchange answer&lt;/a&gt; which explains the different prompt types (&lt;code&gt;PS1&lt;/code&gt;, &lt;code&gt;PS2&lt;/code&gt;, &lt;code&gt;PS3&lt;/code&gt;, and &lt;code&gt;PS4&lt;/code&gt;). The answer explains how the PS3 prompt is used for commands like &lt;code&gt;select&lt;/code&gt;. I did not know about select before, so that&amp;#8217;s the real  TIL here!&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-layout-flow wp-block-quote-is-layout-flow&quot;&gt;
&lt;p&gt;[&amp;#8230;] PS3 is shown when the select command is waiting for input [&amp;#8230;]&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;So the &lt;code&gt;PS3&lt;/code&gt; prompt is shown when a bash program is waiting for user input, and it turns out that the &lt;code&gt;select&lt;/code&gt; bash command is used for creating a &amp;#8220;choice&amp;#8221; UI in bash. So what does that mean and how does it work?&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2018/04/19-bash-select-options.md#asking-interactive-questions-in-bash&quot;&gt;&lt;/a&gt;Asking interactive questions in Bash&lt;/h2&gt;



&lt;p&gt;Let&amp;#8217;s assume we have a shell script called&amp;nbsp;&lt;code&gt;make-project&lt;/code&gt;&amp;nbsp;which bootstraps some project stuff, for example configuration files. We could provide the user with an option to choose a format from a list of available configuration formats like&amp;nbsp;&lt;code&gt;XML&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;JSON&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;We can handle these options via shell arguments like&amp;nbsp;&lt;code&gt;make-project -format xml&lt;/code&gt;, but we could also ask questions interactively using&amp;nbsp;&lt;code&gt;select&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;The script looks like this.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;#!/bin/bash

# Default format
format=&quot;xml&quot;

# Ask a question
echo &quot;Which configuration format do you prefer?&quot;
# Create the &quot;UI&quot; with a choice option
select f in xml json; do
  format=$f
  # Break to end the select after something was selected
  break;
done

echo &quot;Format: $format&quot;&lt;/pre&gt;



&lt;p&gt;The&amp;nbsp;&lt;code&gt;select&lt;/code&gt;&amp;nbsp;function takes a variable name (&lt;code&gt;f&lt;/code&gt;&amp;nbsp;above) and a list of possible values (&lt;code&gt;xml json&lt;/code&gt;) which is seperated by spaces.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;select myvariable in value1 value2 value3; do
  # $myvariable will be value1, value2, or value3
  selectedValue = $myvariable
  break;
done&lt;/pre&gt;



&lt;p&gt;When our little&amp;nbsp;&lt;code&gt;make-project&lt;/code&gt;&amp;nbsp;script is run it would looks like this (in Bash 4.4 on Mac OS):&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;$ ./make-project.sh
Which configuration format do you prefer?
1) xml
2) json
#? _
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The last line,&amp;nbsp;&lt;code&gt;#?&lt;/code&gt;, is the&amp;nbsp;&lt;code&gt;PS3&lt;/code&gt;&amp;nbsp;prompt and&amp;nbsp;&lt;code&gt;_&lt;/code&gt;&amp;nbsp;is the cursor position. The user can now enter a number (1 for&amp;nbsp;&lt;code&gt;xml&lt;/code&gt;&amp;nbsp;or 2 for&amp;nbsp;&lt;code&gt;json&lt;/code&gt;) and the selection would be captured and assigned to the&amp;nbsp;&lt;code&gt;format&lt;/code&gt;&amp;nbsp;variable in our script. If we add&amp;nbsp;&lt;code&gt;export PS3=&quot;Your answer: &quot;&lt;/code&gt;&amp;nbsp;to the script it will replace the default PS3 prompt for your script as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;$ ./make-project.sh
Which configuration format do you prefer?
1) xml
2) json
Your answer: _
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;code&gt;select&lt;/code&gt;&amp;nbsp;is a clean and simple way to create a interactive UI! I tried the code with the&amp;nbsp;&lt;code&gt;zsh&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;fish&lt;/code&gt;&amp;nbsp;shell and it looks the same.&lt;/p&gt;
</content>
  </entry>
</feed>