<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:base="https://kevin.gimbel.dev/">
    <title>KevinGimbel.Dev/Ops</title>
    <subtitle>DevOps, SRE, Rust, and all things related + some real life</subtitle>
    <link href="https://kevin.gimbel.dev/" rel="self"/>
    <updated>2024-03-04T15:10:01</updated>
    <id>https://kevin.gimbel.dev/</id>
    <author>
    <name>Kevin Gimbel</name>
    <email>kevin@gimbel.dev</email>
    </author>

    <entry>
        <title>RE: Hacking Terraform State for Privilege Escalation</title>
        <link href="blog/2024/03/re-hacking-terraform-state-for-privilege-escalation/" />
        <updated>2024-03-04T15:10:01</updated>
        <id>https://kevin.gimbel.dev/blog/2024/03/re-hacking-terraform-state-for-privilege-escalation/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;An interesting attack vector which uses empty terraform providers and a modified state file to execute code! &lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
&lt;p&gt;There‚Äôs lots to be excited about as a red teamer and scared of as a blue teamer, but at the top of the list is that the attack does not require a ‚Äúterraform apply‚Äù.¬†&lt;strong&gt;Even if the human reviewing this plan doesn‚Äôt approve it, the code has already executed.&lt;/strong&gt;&lt;/p&gt;
&lt;cite&gt;‚Äî Daniel Grzelak&lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;Read the full article on &lt;a href=&quot;https://blog.plerion.com/hacking-terraform-state-privilege-escalation/&quot;&gt;https://blog.plerion.com/hacking-terraform-state-privilege-escalation/&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>Week 13: Kubernetes 101, Dark Souls, and Circe</title>
        <link href="blog/2024/02/week-13-kubernetes-101-dark-souls-and-circe/" />
        <updated>2024-02-29T17:13:55</updated>
        <id>https://kevin.gimbel.dev/blog/2024/02/week-13-kubernetes-101-dark-souls-and-circe/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li&gt;‚öìÔ∏è I held a &lt;a href=&quot;https://www.aoe.com/en/academy/cloud-devops/kubernetes-101.html&quot;&gt;Kubernetes 101&lt;/a&gt; workshop with my colleague Simon, it was good! We&amp;#8217;ve held the course a few times now and I really enjoy teaching Kubernetes basics.&lt;/li&gt;



&lt;li&gt;üó°Ô∏è I&amp;#8217;ve played some more &lt;a href=&quot;https://en.wikipedia.org/wiki/Dark_Souls_II&quot;&gt;Dark Souls 2&lt;/a&gt; and I&amp;#8217;m really digging it! &lt;/li&gt;



&lt;li&gt;üè∫ I took some time to finish reading &lt;a href=&quot;https://en.wikipedia.org/wiki/Circe_(novel)&quot;&gt;Circe&lt;/a&gt;, and I&amp;#8217;m totally in awe. It&amp;#8217;s a real page turner and so beautifully written! (&lt;em&gt;I&amp;#8217;m also completely in love with the witch aesthetic and the herbalism of Circe üßô‚Äç‚ôÄÔ∏è&lt;/em&gt;)&lt;/li&gt;



&lt;li&gt;ü§ß I&amp;#8217;m still &amp;#8211; &lt;em&gt;or again?&lt;/em&gt; &amp;#8211; sick and it sucks. It makes everything unnecessarily more complicated, and I&amp;#8217;m really tired of it. &lt;em&gt;C&amp;#8217;mon body, do ur job!&lt;/em&gt;&lt;/li&gt;



&lt;li&gt;üßò I&amp;#8217;ve been doing some reflecting and I came to the conclusion that I need to spent my (free) time differently again. I&amp;#8217;m spending too much time in front of screens and with the weather getting better I need to be out more &amp;#8211; spring can&amp;#8217;t come fast enough!&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I guess that&amp;#8217;s it. See you some other week üôÇ &lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>Where to put things?</title>
        <link href="blog/2024/02/where-to-put-things/" />
        <updated>2024-02-29T09:07:07</updated>
        <id>https://kevin.gimbel.dev/blog/2024/02/where-to-put-things/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;In the middle of moving my websites around I wonder where to put things. I blog in German on a more &amp;#8220;private-and-casual&amp;#8221; blog, and I blog more professionally (&lt;em&gt;lol&lt;/em&gt;) and in English here. I like to keep the technical stuff on &lt;a href=&quot;https://kevin.gimbel.dev/&quot;&gt;kevin.gimbel.dev&lt;/a&gt; to have a &amp;#8220;this  is professional me&amp;#8221; sort of website. At the same time, some &amp;#8220;private&amp;#8221; topics leak into the &amp;#8220;business&amp;#8221; topics &amp;#8211; like last weeks Weeknotes featuring me and my depression. It&amp;#8217;s part of me, and I don&amp;#8217;t mind having it in the &amp;#8220;business&amp;#8221; context of my online persona &amp;#8212; I even &lt;em&gt;want it there&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;Reading &lt;a href=&quot;https://joni.omg.lol/&quot;&gt;Joni&amp;#8217;s&lt;/a&gt; &lt;a href=&quot;https://www.breakfastletters.com/&quot;&gt;Breakfast Letters&lt;/a&gt; I felt the urge to explore and write down my thoughts more. I love this sort of personal &amp;#8220;I&amp;#8217;ve been thinking about X and now I&amp;#8217;m having a monologue about it&amp;#8221; blogs. I yearn for them! I&amp;#8217;ve been kind of isolating myself over the past decade: Working from home and remote, loosing touch to my old school friends, not really going out to find new ones; I&amp;#8217;ve become lonely. Twitter filled that gap for a long time, I&amp;#8217;ve had my online friends there and loved reading their everyday non-sense little tweets. But it&amp;#8217;s gone now. It was already gone before Elon &amp;#8212; and it&amp;#8217;s certainly no longer a fun and nice platform to connect and have a good time.&lt;/p&gt;



&lt;p&gt;So that leaves me with my thoughts and no real place to put them. &lt;a href=&quot;https://www.tumblr.com/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Tumblr&lt;/a&gt; was a lot of fun, but is no longer. &lt;a href=&quot;https://joinmastodon.org/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Mastodon&lt;/a&gt; is not it, as much as I&amp;#8217;m rooting for it. &lt;a href=&quot;https://bsky.social/about&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Bsky&lt;/a&gt; is close, but it&amp;#8217;s not it &amp;#8211; or I&amp;#8217;m just getting too old. Instagram is horrible for me. The algorithm keep putting bullshit into my feeds, and as a Photographer the grind is insane with no reward. So lot of time spent and work put into the platform with little reward (alas I did meet a handful of nice people through our shared interest in photography).&lt;/p&gt;



&lt;p&gt;Another problem is language. Do I want to explore my thoughts in English, opening the writing to a broader audience? Or do I want to keep it in German? I don&amp;#8217;t blog for views, and I never have. I&amp;#8217;m not a content creator, and I&amp;#8217;m not trying to grow my audience for the sake of growing it &amp;#8211; I want to give interested people a way to follow along on my journey.&lt;/p&gt;



&lt;p&gt;So anyway, all this rambling leaves me with two problems:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;I want to share (personal, non-sense) content online&lt;/li&gt;



&lt;li&gt;I want to connect to people with like-minded interests&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I haven&amp;#8217;t found any &lt;strong&gt;single platform&lt;/strong&gt; which suites my needs well. At the moment I&amp;#8217;m blogging in German on my private blog, sharing a mix of &amp;#8220;Things I found online and like&amp;#8221;, Reviews, Books, and all things that keep me interested. &lt;/p&gt;



&lt;p&gt;I blog about Tech stuff on this website, and I also have other stuff which interests me on here (Games I made, Open Source Software I coded, &amp;#8230;). Maybe a new &amp;#8220;Thoughts&amp;#8221; Section on this website could be it, then I can share the links to the networks as I see fit. &lt;/p&gt;



&lt;p&gt;Right now I think I&amp;#8217;ll move the content from art.atarijunge.de to kevingimbel.de, so I have my photography under my name, and keep the &amp;#8220;special pages&amp;#8221; like &lt;a href=&quot;https://kevingimbel.de/games/&quot;&gt;Games&lt;/a&gt; and &lt;a href=&quot;https://kevingimbel.de/oss/&quot;&gt;OSS&lt;/a&gt; here as well.&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>Week 12: Depression, winter, and grey skies</title>
        <link href="blog/2024/02/week-12-depression-winter-and-grey-skies/" />
        <updated>2024-02-26T09:10:02</updated>
        <id>https://kevin.gimbel.dev/blog/2024/02/week-12-depression-winter-and-grey-skies/</id>
        <content xml:lang="en" type="html">
&lt;p class=&quot;has-large-font-size&quot;&gt;Depression is a topic people &amp;#8211; especially man &amp;#8211; still don&amp;#8217;t want to talk about a lot. &lt;/p&gt;



&lt;p&gt;It&amp;#8217;s still stigmatised and therefor harder to admit than it needs to be &amp;#8211; even before oneself, maybe especially before oneself. Depression pulls you down deep, makes you explore depth of the mind which are neither nice, nor easy to escape from &amp;#8211; or cope with, and overall just sucks.&lt;/p&gt;



&lt;p&gt;If you know me you know I&amp;#8217;ve had depression for a long time, diagnosed only since 2020 when I did a therapy; suspected since at least 2007-2008. In teenage years it can easily be dismissed as being troublesome or lazy, hormones going wild in ones body, a lot happening in a short period of time, etc. Welp, if you feel depressed feel free to reach out in any way possible (in person, via &lt;a href=&quot;https://www.linkedin.com/in/kevingimbel/&quot;&gt;LinkedIn&lt;/a&gt; or &lt;a href=&quot;https://fosstodon.org/@KevinGimbel&quot;&gt;Mastodon&lt;/a&gt;).&lt;/p&gt;



&lt;p&gt;Otherwise this week was a real downer. Full of stress, and I&amp;#8217;m still being sick. Sucks. See you next week, hopefully with more joyful topics!&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>Week 11: DS2 and home office</title>
        <link href="blog/2024/02/week-11-ds2-and-home-office/" />
        <updated>2024-02-16T09:47:29</updated>
        <id>https://kevin.gimbel.dev/blog/2024/02/week-11-ds2-and-home-office/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li&gt;üßô I played a lot of &lt;strong&gt;Dark Souls 2&lt;/strong&gt;, and I&amp;#8217;m loving it. Dark Souls, Bloodborne, and Elden Ring have become one of my favourite games. I love the mechanics and the asynchronous connection to other players. (&lt;em&gt;Also can we please get another Bloodborne game???&lt;/em&gt;)&lt;/li&gt;



&lt;li&gt;üõèÔ∏è I worked home all week as I&amp;#8217;m still a bit sick, and I absolutely do not like it. I miss the office!&lt;/li&gt;



&lt;li&gt;üéûÔ∏è I finished a roll of pushed Black and White film, and developed it. &lt;em&gt;Yay!&lt;/em&gt;&lt;/li&gt;



&lt;li&gt;ü¶å I played &lt;a href=&quot;https://boardgamegeek.com/boardgame/295947/cascadia&quot;&gt;Cascadia&lt;/a&gt; with my wife and she beat me &amp;#8211; so far I&amp;#8217;ve won 4 out of 20 games or so.&lt;/li&gt;



&lt;li&gt;üëã &lt;em&gt;And that&amp;#8217;s it&lt;/em&gt;, see you in the office next week.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Week 10: Video Games and no table tennis</title>
        <link href="blog/2024/02/week-10-video-games-and-no-table-tennis/" />
        <updated>2024-02-09T14:54:16</updated>
        <id>https://kevin.gimbel.dev/blog/2024/02/week-10-video-games-and-no-table-tennis/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li&gt;üö´I had the week off, so no table tennis&lt;/li&gt;



&lt;li&gt;üóûÔ∏è I used the week to work on my websites, moving the first of three off WordPress. ‚ÄúOff WordPress‚Äù isn‚Äôt quite right &amp;#8211; it still uses WP in the backend, but the front end is now build with 11ty&lt;/li&gt;



&lt;li&gt;üéÆ I finished The Surge 2, an amazing souls-like Game by Frankfurt based studio Deck13!&lt;/li&gt;



&lt;li&gt;üó°Ô∏è I also started playing Dark Souls 2, finally!&lt;/li&gt;



&lt;li&gt;üì∫ Spent an evening folding clothes and watching Foundation on Apple TV, it‚Äôs a fantastic SciFi show and I can‚Äôt wait to watch more&lt;/li&gt;



&lt;li&gt;ü§ß I got sick so I stayed home most week (as seen above), and tried to take it slow. &lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Week 9: Muskelkater</title>
        <link href="blog/2024/02/week-9-muskelkater/" />
        <updated>2024-02-02T13:21:25</updated>
        <id>https://kevin.gimbel.dev/blog/2024/02/week-9-muskelkater/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li&gt;üí™ &lt;strong&gt;Muskelkater&lt;/strong&gt; (&lt;em&gt;literal translation: muscle cat&lt;/em&gt;) is the German word for aching muscles. I&amp;#8217;ve lots of it right now and moving my arms hurts quite a bit. &lt;strong&gt;&lt;em&gt;Sports!&lt;/em&gt;&lt;/strong&gt;&lt;/li&gt;



&lt;li&gt;üìù I&amp;#8217;ve done some work on my personal websites, preparing the move from multiple WordPress installations to a single multi-site WordPress installation with 11ty frontends. Exciting and fun to work on!&lt;/li&gt;



&lt;li&gt;ü•ó I&amp;#8217;m eating a lot of proteins and vegetables and I feel a lot better&lt;/li&gt;



&lt;li&gt;‚òéÔ∏è I was on-call (&lt;em&gt;still am as I write this, Hi Team!&lt;/em&gt;), and it was a quite week&lt;/li&gt;



&lt;li&gt;üò¥ Next week I&amp;#8217;ll be on a one-week Holiday. I&amp;#8217;ve still some leftover days from last year, and I plan to move my private Blog off WP entirely and start working on the Photo blog more.&lt;/li&gt;



&lt;li&gt;üåû I also plan to go outside, the weather is quite nice! &lt;/li&gt;



&lt;li&gt;üñ§ I listened to a lot of &lt;a href=&quot;https://en.wikipedia.org/wiki/Bring_Me_the_Horizon&quot;&gt;Bring Me The Horizon&lt;/a&gt;. Feels like it&amp;#8217;s 2007 again. &lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Week 8: Table tennis</title>
        <link href="blog/2024/01/week-8-table-tennis/" />
        <updated>2024-01-22T17:35:43</updated>
        <id>https://kevin.gimbel.dev/blog/2024/01/week-8-table-tennis/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li class=&quot;has-x-large-font-size&quot;&gt;üèì &lt;strong&gt;shout out to the AOE Table Tennis Crew&lt;/strong&gt;, who are loyal readers of these weekly updates. ‚úä&lt;/li&gt;
&lt;/ul&gt;



&lt;ul&gt;
&lt;li&gt;not really much happening this week. See you next week. üëã&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Week 7: Sleep mask</title>
        <link href="blog/2024/01/week-7-sleep-mask/" />
        <updated>2024-01-19T13:30:27</updated>
        <id>https://kevin.gimbel.dev/blog/2024/01/week-7-sleep-mask/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ü§ø I spent the first night at home with my sleep mask&lt;/strong&gt; and it was very shitty &amp;#8211; I slept well and I guess I didn&amp;#8217;t stop breathing at night which is cool but it&amp;#8217;s also very uncomfortable &amp;#8211; I hope I won&amp;#8217;t need it for the rest of my life.&lt;/li&gt;



&lt;li&gt;ü§î It baffles me that it took this long &amp;#8211; and my wife&amp;#8217;s sharp mind &amp;#8211; to realise something is wrong with my sleeping. I&amp;#8217;ve been to (multiple) doctors related to snorting at night and always feeling tired and shitty. Now within two months I&amp;#8217;m hooked to a oxygen mask at night so I won&amp;#8217;t suffocate &amp;#8211; &lt;em&gt;the fuck??&lt;/em&gt;&lt;/li&gt;



&lt;li&gt;üíç &lt;strong&gt;Shoutout to my wife again &amp;lt;3&lt;/strong&gt;&lt;/li&gt;



&lt;li&gt;ü§ñ Been working on some Terraform code at work and I&amp;#8217;m enjoying it&lt;/li&gt;



&lt;li&gt;üìö I&amp;#8217;ve read a lot, mainly &lt;a href=&quot;https://en.wikipedia.org/wiki/Circe_(novel)&quot;&gt;Circe&lt;/a&gt; and &lt;a href=&quot;https://anarchistfaq.org/afaq/&quot;&gt;An Anarchist FAQ&lt;/a&gt;.&lt;br&gt;Circe is a beautifully written novel about the &lt;a href=&quot;https://en.wikipedia.org/wiki/Circe&quot;&gt;minor greek goddess&lt;/a&gt; of the same name; An Anarchist FAQ is a FAQ-style online wiki thingy about Anarchism which clears up a lot of common misunderstandings related to Anarchism.&lt;/li&gt;



&lt;li&gt;‚ù§Ô∏è‚Äçüî• It warms my heart to see the people in Germany take to the streets after recent &lt;a href=&quot;https://www.theguardian.com/world/2024/jan/16/germans-take-to-streets-to-oppose-far-right-afds-mass-deportation-plan&quot;&gt;news of mass deportation plans by the far-right, facist AfD&lt;/a&gt; party were published. A list of protests can be found on &lt;a href=&quot;https://zusammen-gegen-rechts.org&quot;&gt;https://zusammen-gegen-rechts.org&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;‚úçÔ∏è 1.4 million(!) people &lt;a href=&quot;https://aktion.campact.de/weact/hocke-stoppen/teilnehmen&quot;&gt;support a petition on WeAct to strip H√∂cke , the facist leader of AfD in T√ºringen, of his Grundrecht which prevents him from running again&lt;/a&gt;, a measurement &lt;a href=&quot;https://www.gesetze-im-internet.de/gg/art_18.html&quot;&gt;backed by laws in Germany&lt;/a&gt;. I hope this momentum carries on and we&amp;#8217;ll see a lot less of the facist AfD in the future. &lt;a rel=&quot;tag&quot; class=&quot;hashtag u-tag u-category&quot; href=&quot;https://kevingimbel.de/blog/tag/fcknzs/&quot;&gt;#fcknzs&lt;/a&gt; &lt;/li&gt;



&lt;li&gt;ü§ß As I was partly sick and pretty occupied this past week I didn&amp;#8217;t do any sport. Sucks! Gotta get back on track &lt;/li&gt;



&lt;li&gt;üéß I&amp;#8217;ve listend to &amp;#8211; and reflected on &amp;#8211; the &lt;a href=&quot;https://lemonadamedia.com/podcast/social-media/&quot;&gt;&amp;#8220;social media&amp;#8221; episode of Hard Feelings&lt;/a&gt; by &lt;a href=&quot;https://en.wikipedia.org/wiki/Jennette_McCurdy&quot;&gt;Jennette McCurdy&lt;/a&gt;. Social Media, especially instagram which I&amp;#8217;ve used _a lot_ in the past 3 years to connect with photographers, gives me very little and costs me very much (time and energy, and mental health in a way), so I&amp;#8217;ve decided to take it slower. There&amp;#8217;s more important things in life which deserve my attention.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Week 6: Sports!</title>
        <link href="blog/2024/01/week-6-sports/" />
        <updated>2024-01-12T07:53:47</updated>
        <id>https://kevin.gimbel.dev/blog/2024/01/week-6-sports/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li&gt;üèãÔ∏è&lt;strong&gt; I went to the gym, yay!&lt;/strong&gt; I hope I can finally keep at it, given I&amp;#8217;ve been paying the membership for 3,5 yeas now and the longest streak I went was maybe 4 or 5 month.&lt;/li&gt;



&lt;li&gt;ü§ñ &lt;strong&gt;I started working on a &lt;s&gt;Rust&lt;/s&gt; &lt;s&gt;Python&lt;/s&gt; Node Script&lt;/strong&gt; to publish new posts on various social networks (&lt;em&gt;Mastodon&lt;/em&gt; and &lt;em&gt;LinkedIn&lt;/em&gt;)&lt;/li&gt;



&lt;li&gt;ü§∑ &lt;strong&gt;I&amp;#8217;m still not sure how I want to consolidate my websites.&lt;/strong&gt; I think I&amp;#8217;ll move the photo blog to &lt;code&gt;kevingimbel.de&lt;/code&gt; and the tech blog to &lt;code&gt;kevin.gimbel.dev&lt;/code&gt; &amp;#8211; and keep a secondary, German blog for all things life and whatever. &lt;/li&gt;



&lt;li&gt;I&amp;#8217;ve joined &lt;a href=&quot;https://en.wikipedia.org/wiki/Bluesky_(social_network)&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Bluesky&lt;/a&gt;, the new decentralised Twitter thingy. It feels a lot like the &lt;em&gt;Old Twitter&lt;/em&gt;, with some fresh breath. I&amp;#8217;m excited to see where this goes! I also plan on using this account privately and not for work; For work stuff you find me on Mastodon at &lt;a href=&quot;https://fosstodon.org/@KevinGimbel&quot;&gt;@KevinGimbel@Fosstodon.org&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;üê¶‚Äç‚¨õ &lt;a href=&quot;https://chat.openai.com/c/32851899-0083-49c3-a667-294825acb0d6&quot;&gt;I let ChatGPT write a poem about waifus on the internet in the style of Edgar Allan Poe&lt;/a&gt; &amp;#8211; it did a pretty good job. &lt;br&gt;My stand on AI is very torn; On one hand I see a lot of potential and it&amp;#8217;s fun to experiment with it, especially in a chat based way. On the other hand&lt;em&gt; they literally stole all the data&lt;/em&gt; &amp;#8211; &lt;em&gt;super uncool; And super illegal I guess?&lt;/em&gt; If AI was a common good, trained on public data usable for free by the public it would be a different story, but the case is: OpenAI uses public data without given consent to train AI and sell it for profit (same as the other AI companies). &lt;/li&gt;



&lt;li&gt;üò¥ &lt;strong&gt;I spent two nights in a sleeping lab.&lt;/strong&gt; Very weird to be hooked up to lots of cables and monitored with a camera and some sort of Infrared (I think). The employees where super nice, and the room I stayed in wasn&amp;#8217;t bad as well. Late last year my wife suggested I may habe a &lt;a href=&quot;https://en.wikipedia.org/wiki/Sleep_apnea&quot;&gt;Sleep apnea&lt;/a&gt;, a sleep disorder in which breathing stops at night (scary!) and the body goes into some sort of panic mode to wake you up; Mostly one doesn&amp;#8217;t remember this the next day and the only clues we had was my (loud) snorting, which I&amp;#8217;ve had all my life, and me feeling unrested and shit almost every morning no matter how much I slept the night before. So anyway, here we are. Glad it&amp;#8217;s being looked into, and I&amp;#8217;m very glad I got appointments so quickly. &lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Week 5: Back in the office and Open Source</title>
        <link href="blog/2024/01/week-5-back-in-the-office-and-open-source/" />
        <updated>2024-01-05T10:07:11</updated>
        <id>https://kevin.gimbel.dev/blog/2024/01/week-5-back-in-the-office-and-open-source/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li&gt;‚öôÔ∏è I released a new version of &lt;a href=&quot;https://github.com/KevinGimbel/eleventy-plugin-mermaid&quot;&gt;eleventy-plugin-mermaid&lt;/a&gt;, which now supports all the customisations one could wish for&lt;/li&gt;



&lt;li&gt;ü§ñ Work on the Raspberry Pi 5 began and I&amp;#8217;m soooo excited, it&amp;#8217;s a lot of fun to work with hardware that&amp;#8217;s in the house and I&amp;#8217;m in awe of the Raspberry Pi 5&amp;#8217;s power &lt;/li&gt;



&lt;li&gt;üéí My back still hurts from carrying a big backpack and suitcase after our Christmas trip. I hope it&amp;#8217;ll get better within the week as I want to start doing sports again! &lt;/li&gt;



&lt;li&gt;üíÜ I had my monthly free massage at the office &amp;#8211; one of the perks of &lt;a href=&quot;https://www.aoe.com/en/career/vacancies.html&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;working at AOE&lt;/a&gt; (and coming to the Wiesbaden office!)&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>TIL: k9s plugins</title>
        <link href="blog/2024/01/til-k9s-plugins/" />
        <updated>2024-01-03T10:35:22</updated>
        <id>https://kevin.gimbel.dev/blog/2024/01/til-k9s-plugins/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;&lt;a href=&quot;https://k9scli.io&quot;&gt;k9s&lt;/a&gt; is an awesome terminal UI and tool to work with Kubernetes clusters. I&amp;#8217;m using it daily for basically all my Kubernetes related work tasks.&lt;/p&gt;



&lt;p&gt;Recently I learned there&amp;#8217;s a super straight forward way of adding &amp;#8220;&lt;a href=&quot;https://k9scli.io/topics/plugins/&quot;&gt;plugins&lt;/a&gt;&amp;#8221; to k9s, which are basically shortcuts for calling (&lt;em&gt;shell&lt;/em&gt;) commands.&lt;/p&gt;



&lt;p&gt;Take the following example from my &lt;code&gt;$XDG_CONFIG_HOME/k9s/plugins.yaml&lt;/code&gt; file&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;yaml&quot; class=&quot;language-yaml&quot;&gt;grafana-pod:
    shortCut: Ctrl-L
    confirm: false
    description: Grafana
    scopes:
    - pods
    background: true
    command: open
    args:
    - https://my-grafana.tld/d/abcdefghi/my-dashboard?orgId=1&amp;amp;var-Datasource=prometheus-$CLUSTER&amp;amp;var-Namespace=$NAMESPACE&amp;amp;var-app_kubernetes_io_name=All&amp;amp;var-Pod=$COL-NAME&amp;amp;from=now-6h&amp;amp;to=now
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Let&amp;#8217;s have a look at each line:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;code&gt;shortCut&lt;/code&gt; defines the key combination which invokes the plugin&lt;/li&gt;



&lt;li&gt;&lt;code&gt;confirm&lt;/code&gt; can be true or false and will show a confirmation dialog if set to true before invoking the plugin&lt;/li&gt;



&lt;li&gt;&lt;code&gt;description&lt;/code&gt; is the name shown in the UI&lt;/li&gt;



&lt;li&gt;&lt;code&gt;scopes&lt;/code&gt; defines on what resources the plugin is available (will be hidden in the UI otherwise)&lt;/li&gt;



&lt;li&gt;&lt;code&gt;background&lt;/code&gt; defines if the plugin runs in the background or re-uses the same terminal (minimising k9s) &lt;/li&gt;



&lt;li&gt;&lt;code&gt;command&lt;/code&gt; is the command or tool to be invoked. It can be any command available in the shell, like &lt;code&gt;open&lt;/code&gt; (to open a URL), &lt;code&gt;kubectl&lt;/code&gt;, &amp;#8230;&lt;/li&gt;



&lt;li&gt;&lt;code&gt;args&lt;/code&gt; is a list of arguments passed to the &lt;code&gt;command&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;1024&quot; height=&quot;632&quot; src=&quot;https://kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17-1024x632.png&quot; alt=&quot;&quot; class=&quot;wp-image-492&quot; srcset=&quot;https://kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17-1024x632.png 1024w, https://kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17-300x185.png 300w, https://kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17-768x474.png 768w, https://kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17-1536x949.png 1536w, https://kevingimbel.de/wp-content/uploads/2024/01/Screenshot-2024-01-03-at-10.26.17-2048x1265.png 2048w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot; /&gt;&lt;figcaption class=&quot;wp-element-caption&quot;&gt;A screenshot showing the ctrl-l shortcut of the Grafana plugin&lt;/figcaption&gt;&lt;/figure&gt;



&lt;p&gt;When I hit &lt;code&gt;CTRL-L&lt;/code&gt;, the &lt;code&gt;open&lt;/code&gt; command is invoked and open Grafana in my browser. It passes all relevant variables to the dashboard: &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$CLUSTER&lt;/code&gt; is the name of the current cluster&lt;/li&gt;



&lt;li&gt;&lt;code&gt;$NAMESPACE&lt;/code&gt; is the currently active namespace&lt;/li&gt;



&lt;li&gt;&lt;code&gt;$COL-NAME&lt;/code&gt; is the Name in the current column (the selected pod in the list of pods)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;It&amp;#8217;s a super powerful shortcut do view metrics about a pod in an instant, and made my life a lot easier! &lt;/p&gt;



&lt;p&gt;More fields can be seen in the documentation at &lt;a href=&quot;https://k9scli.io/topics/plugins/&quot;&gt;https://k9scli.io/topics/plugins/&lt;/a&gt; &lt;/p&gt;



&lt;p&gt;k9s itself is already a powerful tool, but this extensibility just makes it so much more flexible!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Additional links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/derailed/k9s/tree/master/plugins&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Community plugins&lt;/a&gt; &lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://k9scli.io&quot;&gt;k9s website&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Week 4: Food-coma and a Raspberry Pi</title>
        <link href="blog/2023/12/week-4-food-coma-and-a-raspberry-pi/" />
        <updated>2023-12-31T13:04:23</updated>
        <id>https://kevin.gimbel.dev/blog/2023/12/week-4-food-coma-and-a-raspberry-pi/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Christmas was fun&lt;/strong&gt;. Spending time with family and (a little too much) good food left me in a food coma on the sofa ü´É&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;I ordered a Raspberry Pi 5&lt;/strong&gt; to be used as a home server. It‚Äôs the first step in reducing my cloud server usage and also the monthly pricing that comes with it. I‚Äôll write about it as I implement the things I‚Äôve planned. &lt;/li&gt;



&lt;li&gt;We visited family over the holidays and it was super nice to be out of the house and spent time with them. Hopefully there‚Äôll be more of that next year!&lt;/li&gt;



&lt;li&gt;I finished ‚ÄúGalactic North‚Äù, a short story collection by Alastair Reynolds and I‚Äôm once again in awe. Definitely my favourite author! &lt;/li&gt;



&lt;li&gt;I‚Äôve read a few more short stories, among them two by Edgar Allan Poe which sparked my interest in his writing. It‚Äôs all free and public domain so I‚Äôll read more of him! &lt;/li&gt;



&lt;li&gt;Also, happy new year to y‚Äôall hope you have a wonderful 2024! &lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Week 3: More sleep</title>
        <link href="blog/2023/12/week-3-more-sleep/" />
        <updated>2023-12-22T10:38:24</updated>
        <id>https://kevin.gimbel.dev/blog/2023/12/week-3-more-sleep/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li&gt;After last weeks Christmas party I got a sick &amp;#8211; no Corona luckily! Nevertheless  I worked from home all week just to be on the safe side.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;I should sleep more.&lt;/strong&gt; Once again I chose to not call in sick in the beginning of the week and &amp;#8220;buckled up&amp;#8221; instead. &lt;em&gt;(I want to be clear that &lt;strong&gt;this is my mistake&lt;/strong&gt;, not my employers! I still have the mindset I need to be available all the time from years of being in very small teams (or the only person responsible))&lt;/em&gt;&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Working from home sucks&lt;/strong&gt;. I really do not like this anymore. I want to be in the office, I want to have a dedicated place I work and not work from my bedroom.&lt;/li&gt;



&lt;li&gt;With Christmas around the corner I look forward to some quite time with the family. Growing older I thoroughly enjoy the time spent with loved once.&lt;/li&gt;



&lt;li&gt;I finished reading &amp;#8220;&lt;a href=&quot;https://nerdcultu.re/2023/12/19/we-are-all-completely-beside-ourselves-karen-joy-fowler/&quot;&gt;We Are All Completely Beside Ourselves&lt;/a&gt;&amp;#8221; by Karen Joy Fowler and really enjoyed it!&lt;/li&gt;



&lt;li&gt;I also read &amp;#8220;&lt;a href=&quot;https://www.goodreads.com/book/show/25664965-a-spy-in-europa&quot;&gt;A Spy in Europa&lt;/a&gt;&amp;#8220;, a short-story by Alastair Reynolds and enjoyed this as well.&lt;/li&gt;



&lt;li&gt;I look forward to reading some more short stories from the &amp;#8220;Galactic North&amp;#8221; collection by Alastair Reynolds over the holidays&lt;/li&gt;



&lt;li&gt;I started planning a big ol&amp;#8217; website restructure for 2024 by doing a classic Mind Map. The idea is to replace my 3 WordPress websites with one WordPress Multisite which I then use to render 3 11ty websites; Effectively using WordPress only for the CMS part.&lt;/li&gt;



&lt;li&gt;I also started working on a Rust tool named &amp;#8220;&lt;code&gt;rss2social&lt;/code&gt;&amp;#8221; which I want to use to post my blog feeds automatically to Mastodon and LinkedIn. So far it doesn&amp;#8217;t do much.&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Eleventy 3.0.0-alpha.2</title>
        <link href="blog/2023/12/eleventy-3-0-0-alpha-2/" />
        <updated>2023-12-21T09:09:23</updated>
        <id>https://kevin.gimbel.dev/blog/2023/12/eleventy-3-0-0-alpha-2/</id>
        <content xml:lang="en" type="html">
&lt;p class=&quot;has-large-font-size&quot;&gt;I just updated &lt;a href=&quot;https://kevin.gimbel.dev/ops&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://kevin.gimbel.dev/ops&lt;/a&gt; to Eleventy 3.0.0-alpha.2 &lt;/p&gt;



&lt;p&gt;The update was rather smooth, which I expected given the small code base of my website. The diff can be seen here on GitHub: &lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/commit/c4bf1eba988869b54131a2cb85e031311503707e&quot;&gt;https://github.com/KevinGimbel/kevin.gimbel.dev/commit/c4bf1eba988869b54131a2cb85e031311503707e&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;After setting &lt;code&gt;&quot;type&quot;: &quot;module&quot;&lt;/code&gt; in my package json I went through the files one by one changing all &lt;code&gt;require()&lt;/code&gt; calls to &lt;code&gt;imports&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;One thing took a bit to get working: I use the eleventy package.json to read meta data about eleventy, and apparently with imports the type must be set:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;javascript&quot; class=&quot;language-javascript&quot;&gt;import eleventyPackage from &quot;@11ty/eleventy/package.json&quot; with { type: &#39;json&#39; };&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;code&gt;with { type: &#39;json&#39; };&lt;/code&gt; tells Node that this thing should be imported as JSON. The syntax is new to me and I&amp;#8217;ve never seen it before so that was exciting!&lt;/p&gt;



&lt;p&gt;The only thing that isn&amp;#8217;t working on MacOS is the built-in. There&amp;#8217;s already a GitHub issue about it &lt;a href=&quot;https://github.com/11ty/eleventy/issues/3128&quot;&gt;https://github.com/11ty/eleventy/issues/3128&lt;/a&gt; &amp;#8211; everything else seems to work fine.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Additional Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.zachleat.com/web/eleventy-v3-alpha/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://www.zachleat.com/web/eleventy-v3-alpha/&lt;/a&gt; &lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://www.11ty.dev/blog/canary-eleventy-v3/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://www.11ty.dev/blog/canary-eleventy-v3/ &lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Week 2: Christmas Party</title>
        <link href="blog/2023/12/week-2-christmas-party/" />
        <updated>2023-12-13T10:33:25</updated>
        <id>https://kevin.gimbel.dev/blog/2023/12/week-2-christmas-party/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li&gt;There was a major incident at work. Of course it was &lt;a href=&quot;https://en.wikipedia.org/wiki/Domain_Name_System&quot;&gt;DNS&lt;/a&gt;. A truly exciting experience, but one I don‚Äôt need again. ü§ñ&lt;/li&gt;



&lt;li&gt;I held a &lt;a href=&quot;https://www.aoe.com/en/academy/cloud-devops/kubernetes-101.html&quot;&gt;two-day Kubernetes Workshop&lt;/a&gt; with my colleague Simon which we could barely prepare for because of the incident. I&amp;#8217;m glad we&amp;#8217;ve held it a few times already so it was still good and feedback was very positive! ‚éà&lt;/li&gt;



&lt;li&gt;The company Christmas party happened at &lt;a href=&quot;https://www.halle45.de&quot;&gt;HALLE 45&lt;/a&gt; in Mainz! Good food, table tennis (which is a BIG thing at AOE üèì), dancing, more table tennis, and Gl√ºhwein made the evening a fun time! üéâ There was a Kettcar race and a ugly Christmas sweater contest, and now I‚Äôm  looking forward to the after movie! &lt;/li&gt;



&lt;li&gt;I watched &lt;a href=&quot;https://www.imdb.com/title/tt0118583/&quot;&gt;Alien: Resurrection&lt;/a&gt;, the only one I couldn‚Äôt watch when I watched all  the other movies including prequels on a &lt;em&gt;two-day-binge-watch weekend&lt;/em&gt;. The movie was good. üëæ&lt;/li&gt;



&lt;li&gt;A few weeks ago, the wife and I started watching Doctor Who with &lt;a href=&quot;https://en.wikipedia.org/wiki/Jodie_Whittaker&quot;&gt;Jodie Whittaker&lt;/a&gt; as the &lt;a href=&quot;https://en.wikipedia.org/wiki/Thirteenth_Doctor&quot;&gt;Thirteenth Doctor&lt;/a&gt; &amp;#8211; finally! When she started being the Doctor there was no legal way of streaming in Germany, so we didn‚Äôt watch it. Luckily, now Amazon Prime offers a BBC subscription for 3,99‚Ç¨/months so we are finally able to watch it! üë©‚Äç‚öïÔ∏è&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Week 1: Off call</title>
        <link href="blog/2023/12/week-1-off-call/" />
        <updated>2023-12-12T10:15:01</updated>
        <id>https://kevin.gimbel.dev/blog/2023/12/week-1-off-call/</id>
        <content xml:lang="en" type="html">
&lt;ul&gt;
&lt;li&gt;My first all alone on-call duty is over with no incident!&lt;/li&gt;



&lt;li&gt;I&amp;#8217;ve had a good time working on &lt;a href=&quot;https://kevin.gimbel.dev/&quot;&gt;kevin.gimbel.dev&lt;/a&gt;, enjoying working with 11ty, HTML, CSS, and JavaScript. Despite doing DevOps / SRE / Platform Engineering full time I still love doing web dev&lt;/li&gt;



&lt;li&gt;I&amp;#8217;m once again at a point where I wonder if I want to combine all my websites back into one. I&amp;#8217;ve spent considerable time moving from one-site-for-all to four different once. For now I&amp;#8217;ll not do it.&lt;/li&gt;



&lt;li&gt;Hosting stuff is expensive. I pay 40 EUR each month for my two web servers and I&amp;#8217;d like to cut costs, maybe by hosting some non-public stuff at home (&lt;em&gt;Rabbit hole potential!&lt;/em&gt;)&lt;/li&gt;



&lt;li&gt;I&amp;#8217;ll need to up my Python game, as there&amp;#8217;s a lot of Python Glue-code and tooling at work and even if I&amp;#8217;m not the biggest fan of Python I am no longer a one person team so it&amp;#8217;s time to adapt üôÇ &lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;(Let&amp;#8217;s see how long I can keep week notes up. Heavily inspited by &lt;a href=&quot;https://alicebartlett.co.uk/blog/weaknotes&quot;&gt;Alice Bartlett and her weaknotes&lt;/a&gt; &amp;#8211; not sure how personal I want to get.)&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>TIL: Why there is /bin and /usr/bin, /lib and /usr/lib, etc on Unix systems</title>
        <link href="blog/2023/11/til-why-there-is-bin-and-usr-bin-lib-and-usr-lib-on-unix-systems/" />
        <updated>2023-11-28T16:28:22</updated>
        <id>https://kevin.gimbel.dev/blog/2023/11/til-why-there-is-bin-and-usr-bin-lib-and-usr-lib-on-unix-systems/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;If you&amp;#8217;ve ever navigated around a Unix system you may have wondered why there are /bin and usr/bin directories or /lib and /usr/lib or /sbin and /usr/sbin &amp;#8211; or like me, you just took it for something that probably has any meaning but isn&amp;#8217;t relevant enough to look into.&lt;/p&gt;



&lt;p&gt;Well, today it became relevant: When upgrading a Docker image from Debian 11 to 12 I encountered a lot of issues with a utility called &amp;#8220;&lt;code&gt;usrmerge&lt;/code&gt;&amp;#8220;, and this sent me down a rabbit hole.&lt;/p&gt;



&lt;p&gt;As with most things in the Unix world it started with someone doing a thing for reasons of technical limitation.&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote has-text-align-left&quot;&gt;
&lt;p&gt;You know how Ken Thompson and Dennis Ritchie created Unix on a PDP-7 in 1969? Well around 1971 they upgraded to a PDP-11 with a pair of RK05 disk packs (1.5 megabytes each) for storage. When the operating system grew too big to fit on the first RK05 disk pack (their root filesystem) they let it leak into the second one, which is where all the user home directories lived (which is why the mount was called /usr).&lt;/p&gt;
&lt;cite&gt;&lt;strong&gt;Rob Landley&lt;/strong&gt;, via &lt;a href=&quot;http://lists.busybox.net/pipermail/busybox/2010-December/074114.html&quot;&gt;http://lists.busybox.net/pipermail/busybox/2010-December/074114.html&lt;/a&gt; &lt;/cite&gt;&lt;/blockquote&gt;



&lt;p&gt;So /usr/ existed because the Operating System no longer fit on the first disk, so &amp;#8220;some parts but nut all&amp;#8221; of the OS were split to the mounted second disk &amp;#8211; &lt;em&gt;reasonable&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;The quote continues: &lt;em&gt;&amp;#8220;[&amp;#8230;] They replicated all the OS directories under there (/bin, /sbin, /lib, /tmp&amp;#8230;) and wrote files to those new directories because their original disk was out of space.&amp;#8221;&lt;/em&gt; &amp;#8211; later on, they made a new &lt;code&gt;/home&lt;/code&gt; directory where all the user specific stuff lived and &lt;code&gt;/usr&lt;/code&gt; and &lt;code&gt;/bin&lt;/code&gt; could both be used for the OS.&lt;/p&gt;



&lt;p&gt;Well, &amp;#8230; the split between &lt;code&gt;/bin&lt;/code&gt; and &lt;code&gt;/usr/bin&lt;/code&gt; has never been reverted or &amp;#8220;fixed&amp;#8221;, which is why a thing from the 1970s still exists in modern-day Unix systems (Debian, Ubuntu, and MacOS all have these two directories)! &lt;/p&gt;



&lt;p&gt;Enter today, 28th November 2023, where I try and upgrade a Debian 11 based image in a Docker build and what breaks my build? A tool called usrmerge, which is supposed to fix this &lt;code&gt;/bin vs. /usr/bin&lt;/code&gt; nonsense for Debian 12 and onward.The solution is &amp;#8211; basically &amp;#8211; to merge everything from &lt;code&gt;/bin&lt;/code&gt; into &lt;code&gt;/usr/bin&lt;/code&gt;, then symlink /bin/ to &lt;code&gt;/usr/bin&lt;/code&gt; (and the same for &lt;code&gt;/lib&lt;/code&gt; and &lt;code&gt;/sbin&lt;/code&gt;).&lt;/p&gt;



&lt;p&gt;I ended up not upgrading the Debian 11 image to Debian 12, instead I enabled &lt;code&gt;bullseye-backports&lt;/code&gt; to update the software inside the Docker image &amp;#8211; but that&amp;#8217;s a story for another day.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Additional reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lists.busybox.net/pipermail/busybox/2010-December/074114.html&quot;&gt;http://lists.busybox.net/pipermail/busybox/2010-December/074114.html&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Integrating WordPress Posts with 11ty</title>
        <link href="blog/2023/11/integrating-wordpress-posts-with-11ty/" />
        <updated>2023-11-02T17:44:54</updated>
        <id>https://kevin.gimbel.dev/blog/2023/11/integrating-wordpress-posts-with-11ty/</id>
        <content xml:lang="en" type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;If you&amp;#8217;ve followed me around the &lt;em&gt;internetz&lt;/em&gt; it comes as no surprise that I&amp;#8217;m a huge fan of &lt;a href=&quot;https://www.11ty.dev&quot;&gt;11ty&lt;/a&gt; &amp;#8211; a JavaScript based static-site generator that&amp;#8217;s super flexible, can be extended, and is really fun to work with.&lt;/p&gt;



&lt;p&gt;When I switched my &lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de&quot;&gt;11ty based website&lt;/a&gt; to &lt;a href=&quot;https://kevingimbel.de/blog/2022/11/back-to-basics-wordpress/&quot;&gt;WordPress&lt;/a&gt; the main reason was that I&amp;#8217;ve grown tired of writing Markdown files and I wanted something with a backend again, something where I could draft an article on-the-go and finish it later on my computer and have proper Media management as well; Media management especially was (and is) annoying  without a proper CMS in my opinion. While I&amp;#8217;m happy with WordPress as a CMS, I&amp;#8217;m not so happy with theming and PHP. &lt;em&gt;I really don&amp;#8217;t want to write a theme in PHP (like, really really don&amp;#8217;t want to!)&lt;/em&gt; so I&amp;#8217;ve rolled with the default theme (&lt;em&gt;Twenty Twenty-Three&lt;/em&gt;) which is fine and does it&amp;#8217;s job, but I miss the &lt;strong&gt;fun&lt;/strong&gt; in creating and building websites.&lt;/p&gt;



&lt;p&gt;Besides the WordPress based &lt;em&gt;kevingimbel.de&lt;/em&gt; I&amp;#8217;ve also had a &lt;code&gt;11ty&lt;/code&gt; site published at &lt;a href=&quot;https://kevin.gimbel.dev/ops/&quot;&gt;kevin.gimbel.dev/ops&lt;/a&gt; &amp;#8211; a little site showcasing some of the technologies I&amp;#8217;ve worked with, and mainly created as a showcase (&lt;em&gt;and  for fun!&lt;/em&gt;) when I was looking for a new job in 2022.&lt;/p&gt;



&lt;p&gt;&lt;em&gt;&lt;strong&gt;Well, longest story short:&lt;/strong&gt;&lt;/em&gt; I just finished integrating this blog (even &lt;em&gt;THIS ARTICLE&lt;/em&gt;) automatically with my &lt;code&gt;11ty&lt;/code&gt; site! So all articles are now published on &lt;a href=&quot;https://kevin.gimbel.dev/blog/&quot;&gt;kevin.gimbel.dev/blog&lt;/a&gt; as well.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image alignwide size-large&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;1024&quot; height=&quot;499&quot; src=&quot;https://kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145-1024x499.png&quot; alt=&quot;Screenshot showing the blog page on kevin.gimbel.dev
It&#39;s white boxes with text on a blue background.&quot; class=&quot;wp-image-401&quot; srcset=&quot;https://kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145-1024x499.png 1024w, https://kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145-300x146.png 300w, https://kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145-768x375.png 768w, https://kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145-1536x749.png 1536w, https://kevingimbel.de/wp-content/uploads/2023/10/2023-10-31-11.08.44-kevin.gimbel.dev-3422f747f145.png 1882w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;Visually it isn&amp;#8217;t anything to brag to your Front-End Friends about, but it does the job &amp;#8211; it shows content.&lt;/p&gt;



&lt;p&gt;So without further ado, let&amp;#8217;s get to the technical side of it all!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;The Goal&lt;/h2&gt;



&lt;p&gt;&amp;#8230; is to have &lt;code&gt;11ty&lt;/code&gt; render pages from posts fetched from the WordPress API. The solution described here doesn&amp;#8217;t render WordPress pages yet (tho maybe I&amp;#8217;ll implement this in the future).&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Creating pages from data&lt;/h2&gt;



&lt;p&gt;&lt;code&gt;11ty&lt;/code&gt; can create &lt;a href=&quot;https://www.11ty.dev/docs/pages-from-data/&quot;&gt;pages from data&lt;/a&gt; &amp;#8211; which means we can use plain old JavaScript to parse a RSS feed (or JSON feed), then turn it into a bunch of pages.&lt;/p&gt;



&lt;p&gt;The magic happens in the data file at &lt;code&gt;src/_data/blog.js&lt;/code&gt;. The &lt;code&gt;_data&lt;/code&gt; directory is a special directory for all &amp;#8230; data. Whatever the JavaScript file returns is available inside of all &lt;code&gt;11ty&lt;/code&gt; pages and templates, usable as  &lt;code&gt;{{ blog }}&lt;/code&gt; (same name as the file).&lt;/p&gt;



&lt;p&gt;The script below is all it takes. I use the &lt;a href=&quot;https://www.npmjs.com/package/node-fetch&quot;&gt;node-fetch&lt;/a&gt; module to load the last 100 posts from &lt;em&gt;kevingimbel.de&lt;/em&gt;, then I extract the fields I want to use (&lt;code&gt;title&lt;/code&gt;, &lt;code&gt;link&lt;/code&gt;, &lt;code&gt;content&lt;/code&gt;, &lt;code&gt;excerpt&lt;/code&gt;, and &lt;code&gt;slug&lt;/code&gt;), and finally at the end of the file the whole &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot;&gt;Promise&lt;/a&gt; is exported.&lt;/p&gt;



&lt;pre title=&quot;src/_data/blog.js&quot; class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;javascript&quot; class=&quot;language-javascript line-numbers&quot;&gt;const fetch = (...args) =&amp;gt; import(&#39;node-fetch&#39;).then(({ default: fetch }) =&amp;gt; fetch(...args));
const response = fetch(&#39;https://kevingimbel.de/wp-json/wp/v2/posts?orderby=date&amp;amp;order=desc&amp;amp;per_page=100&#39;);

let data = response.then((response) =&amp;gt; {
    return response.json();
}).then(data =&amp;gt; {
    let _posts = [];
    data.forEach(item =&amp;gt; {
        var post = {
            title: item.title.rendered,
            link: item.link,
            content: item.content.rendered.replace(&quot;&lt;a href=&quot;https://kevingimbel.de/blog/2023/11/integrating-wordpress-posts-with-11ty/#respond&quot;&gt;comment on the original article on kevingimbel.de&lt;/a&gt;&quot;, `&amp;lt;a href=&quot;${item.link}#respond&quot;&amp;gt;comment on the original article on kevingimbel.de&amp;lt;/a&amp;gt;`),
            excerpt: item.excerpt.rendered,
            slug: item.link.replace(&#39;https://kevingimbel.de/&#39;, &#39;&#39;)
        }
        _posts.push(post);

    });

    return _posts;
}).catch(err =&amp;gt; {
    console.log(&quot;Error retrieving posts: &quot;, err);
});

module.exports = data;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Some interesting parts in the script:&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;content&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;In the content field I replace the string &amp;#8220;comment below üëá&amp;#8221; with a link to the original article&amp;#8217;s comment box (on kevingimbel.de, the WordPress site). This is because the &lt;code&gt;11ty&lt;/code&gt; site has no comments and I don&amp;#8217;t want to implement comments there (&lt;em&gt;maybe I can integrate the WordPress comments somehow&lt;/em&gt; ü§î). &lt;/p&gt;



&lt;pre class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;javascript&quot; class=&quot;language-javascript&quot;&gt;item.content.rendered.replace(&quot;comment below üëá&quot;, `&amp;lt;a href=&quot;${item.link}#respond&quot;&amp;gt;comment on the original article on kevingimbel.de&amp;lt;/a&amp;gt;`),&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;strong&gt;slug&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;I wanted to have the same URLs as on &lt;em&gt;kevingimbel.de&lt;/em&gt; so for the slug I just removed the &lt;code&gt;https://kevingimbel.de/&lt;/code&gt; prefix from the links &amp;#8211; the slug is later used in the template files.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;javascript&quot; class=&quot;language-javascript&quot;&gt;slug: item.link.replace(&#39;https://kevingimbel.de/&#39;, &#39;&#39;)&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;11ty templates&lt;/h2&gt;



&lt;p&gt;Data alone isn&amp;#8217;t enough, we also need to write some templates. There are two templates (I use &lt;a href=&quot;https://mozilla.github.io/nunjucks/&quot;&gt;Nunjucks&lt;/a&gt;, but it&amp;#8217;s basically the same for every supported template language).&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;code&gt;blog-page.njk&lt;/code&gt; which is the single page of a blog entry&lt;/li&gt;



&lt;li&gt;&lt;code&gt;blog.njk&lt;/code&gt; which is the blog list (feed)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;strong&gt;blog-page.njk&lt;/strong&gt; (&lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/blob/91ded96d457bb80f549d80314dc51198f495c6ac/src/blog-page.njk&quot;&gt;Github Link&lt;/a&gt;)&lt;/p&gt;



&lt;p&gt;The important part is the frontmatter &amp;#8211; the header of the template.&lt;/p&gt;



&lt;pre title=&quot;src/blog-page.njk&quot; class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;yaml&quot; class=&quot;language-yaml&quot;&gt;---
pagination:
    data: blog
    size: 1
    alias: article
permalink: &quot;{{ article.slug }}&quot;
---&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here we reference the data (&lt;code&gt;data: blog&lt;/code&gt;) we defined in &lt;code&gt;src/_data/blog.js&lt;/code&gt;, use it as pagination and define a new variable named article (&lt;code&gt;alias: article&lt;/code&gt;) which is a reference to the current article being rendered. &lt;/p&gt;



&lt;p&gt;The &lt;code&gt;permalink&lt;/code&gt; is where the slug from above comes into play: For each article we need to define a permalink because &lt;code&gt;11ty&lt;/code&gt; cannot automatically determine a path, and here we use the value of &lt;code&gt;article.slug&lt;/code&gt; which is the URL path from WordPress.&lt;/p&gt;



&lt;p&gt;The single page blog template itself is pretty much &amp;#8220;standard&amp;#8221; 11ty code:&lt;/p&gt;



&lt;pre title=&quot;src/blog-page.njk&quot; class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;markup&quot; class=&quot;language-markup&quot;&gt;{% extends &quot;base.njk&quot; %}

{% block head %}
&amp;lt;link rel=&quot;canonical&quot; href=&quot;{{ article.link }}&quot; /&amp;gt;
{% endblock %}

{% block content %}

&amp;lt;section class=&quot;[ f-ultra bg-accent-2 stack ] [ gr-auto gc-full ] [ c-full-width ] single-page article-page&quot;&amp;gt;
    {% include &quot;nav.njk&quot; %}

    &amp;lt;div class=&quot;article__og-box&quot;&amp;gt;
        &amp;lt;p&amp;gt;&amp;lt;i&amp;gt;&quot;{{ article.title}}&quot;&amp;lt;/i&amp;gt; was originally published on &amp;lt;a href=&quot;{{ article.link }}&quot; target=&quot;_blank&quot; rel=&quot;nofollow&quot; title=&quot;Read &#39;{{ article.title}}&#39; on kevingimbel.de&quot;&amp;gt;kevingimbel.de&amp;lt;/a&amp;gt;.&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;hr /&amp;gt;
    &amp;lt;div class=&quot;content&quot;&amp;gt;
        &amp;lt;h1&amp;gt;{{ article.title }}&amp;lt;/h1&amp;gt;
        {{ article.content | safe }}
    &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{% endblock %}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;I&amp;#8217;m using &lt;code&gt;{{ article.content | safe }}&lt;/code&gt; here to render the HTML retrieved from the WordPress API. &lt;/p&gt;



&lt;p&gt;One not-so-standard thing is the canonical link. This link is added to the &lt;code&gt;head&lt;/code&gt; of the HTML page and references the original article published on &lt;em&gt;kevingimbel.de&lt;/em&gt;.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;markup&quot; class=&quot;language-markup&quot;&gt;{% block head %}
&amp;lt;link rel=&quot;canonical&quot; href=&quot;{{ article.link }}&quot; /&amp;gt;
{% endblock %}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In my base template I have a block named head defined in the HTML head to dynamically add new attributes to it. (&lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/blob/91ded96d457bb80f549d80314dc51198f495c6ac/src/_includes/base.njk#L16-L17&quot;&gt;Code on GitHub&lt;/a&gt;).&lt;/p&gt;



&lt;p&gt;&lt;strong&gt;blog.njk&lt;/strong&gt;&lt;/p&gt;



&lt;p&gt;And lastly, the &lt;code&gt;blog.njk&lt;/code&gt; page is where the blog list is rendered.&lt;/p&gt;



&lt;pre title=&quot;src/blog.njk&quot; class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;markup&quot; class=&quot;language-markup&quot;&gt;{% extends &quot;base.njk&quot; %}

{% block content %}

&amp;lt;section class=&quot;[ f-ultra bg-accent-2 stack ] [ gr-auto gc-full ] [ c-full-width ]  single-page&quot;&amp;gt;
    &amp;lt;div class=&quot;content&quot;&amp;gt;
        {% include &#39;nav.njk&#39; %}
        &amp;lt;hr /&amp;gt;

        &amp;lt;ul class=&quot;article-list&quot;&amp;gt;
        {% for article in blog %}
        &amp;lt;li class=&quot;article-list__item&quot;&amp;gt;
            &amp;lt;h2&amp;gt;&amp;lt;a href=&quot;/{{ article.slug }}&quot;&amp;gt;{{ article.title }}&amp;lt;/a&amp;gt;&amp;lt;/h2&amp;gt;
            &amp;lt;p&amp;gt;{{ article.excerpt | safe }}&amp;lt;/p&amp;gt;
            &amp;lt;a href=&quot;/{{ article.slug }}&quot; class=&quot;article-list__more-link&quot;&amp;gt;Continue reading &amp;amp;gt;&amp;amp;gt;&amp;lt;/a&amp;gt;
        &amp;lt;/li&amp;gt;
        {%- endfor -%}
        &amp;lt;/ul&amp;gt;
    &amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;

{% endblock %}&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;Integrating WordPress blog posts with &lt;code&gt;11ty&lt;/code&gt; is surprisingly straight forward, thanks to the WordPress JSON API and &lt;code&gt;11ty&lt;/code&gt; data pages there was little custom code needed.&lt;/p&gt;



&lt;p&gt;There are still some TODOs:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Only 100 posts are loaded at the moment, I&amp;#8217;d like to load more and possibly cache the results somehow &amp;#8211; content rarely changes so it would be fine to only load the last posts published&lt;/li&gt;



&lt;li&gt;I&amp;#8217;d like to trigger a GitHub Action every time I publish a post&lt;/li&gt;



&lt;li&gt;The blog list looks boring, I want to make this more &lt;em&gt;fun!&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.11ty.dev/docs/pages-from-data/&quot;&gt;Creating pages from data (11ty docs)&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://developer.wordpress.org/rest-api/reference/posts/&quot;&gt;WordPress Rest API docs&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-e381ca18b7414fdbecaeb2554e08a8ca&quot;&gt;Join the discussion on &lt;a href=&quot;https://fosstodon.org/@kevin@kevingimbel.de/111341960932334264&quot;&gt;Mastodon&lt;/a&gt; or comment below üëá&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>RE: Announcing Rust 1.73.0</title>
        <link href="blog/2023/10/re-announcing-rust-1-73-0/" />
        <updated>2023-10-06T08:14:03</updated>
        <id>https://kevin.gimbel.dev/blog/2023/10/re-announcing-rust-1-73-0/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;&lt;i&gt;In reply to &lt;a class=&quot;in-reply-to&quot; href=&quot;https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html&quot;&gt;https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html&lt;/a&gt;.&lt;/i&gt;&lt;/p&gt;



&lt;p&gt;Yay, Rust 1.73.0 has been released! Highlights include &lt;a href=&quot;https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html#cleaner-panic-messages&quot;&gt;cleaner panic messages&lt;/a&gt; and the &lt;a href=&quot;https://blog.rust-lang.org/2023/10/05/Rust-1.73.0.html#stabilized-apis&quot;&gt;stabilisation of APIs&lt;/a&gt;, I&amp;#8217;m especially happy about the stabilisation of&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/stable/std/os/unix/fs/fn.chown.html&quot;&gt;&lt;code&gt;std::os::unix::fs::chown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/stable/std/os/unix/fs/fn.fchown.html&quot;&gt;&lt;code&gt;std::os::unix::fs::fchown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://doc.rust-lang.org/stable/std/os/unix/fs/fn.lchown.html&quot;&gt;&lt;code&gt;std::os::unix::fs::lchown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/rust-lang/cargo/blob/master/CHANGELOG.md#cargo-173-2023-10-05&quot;&gt;cargo&lt;/a&gt; and &lt;a href=&quot;https://github.com/rust-lang/rust-clippy/blob/master/CHANGELOG.md#rust-173&quot;&gt;clippy&lt;/a&gt; have been updated as well.&lt;/p&gt;



&lt;p&gt;Update to Rust 1.73.0 with&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;rustup update stable&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Happy rusting! ü¶Ä&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>RE: The OpenTofu fork is now available!</title>
        <link href="blog/2023/09/re-the-opentofu-fork-is-now-available/" />
        <updated>2023-09-21T10:24:22</updated>
        <id>https://kevin.gimbel.dev/blog/2023/09/re-the-opentofu-fork-is-now-available/</id>
        <content xml:lang="en" type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;&lt;em&gt;In reply to &lt;a class=&quot;in-reply-to&quot; href=&quot;https://opentofu.org/blog/the-opentofu-fork-is-now-available&quot;&gt;https://opentofu.org/blog/the-opentofu-fork-is-now-available&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;



&lt;p&gt;A few weeks ago HashiCorp decided to switch the terraform license model from an open source license to the Business Source License (BSL) model, so there&amp;#8217;s now a community driven terraform fork called OpenTofu.I love the name, and I hope the project can establish itself as a alternative to the now not-so-open terraform project.&lt;/p&gt;



&lt;p&gt;OpenTofu already has support from companies like &lt;a href=&quot;https://gruntwork.io/&quot;&gt;Gruntwork&lt;/a&gt; and projects such as &lt;a href=&quot;https://github.com/terraform-docs/terraform-docs&quot;&gt;terraform-docs&lt;/a&gt; &amp;#8211; both well known in the terraform ecosystem. &lt;/p&gt;



&lt;p&gt;News about OpenTF can be found on their blog at &lt;a href=&quot;https://opentofu.org/blog/&quot;&gt;https://opentofu.org/blog&lt;/a&gt;, source code can be found on &lt;a href=&quot;https://github.com/opentofu/opentofu&quot;&gt;GitHub at github.com/opentofu/opentofu&lt;/a&gt;.&lt;/p&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-c8ed469a80b15a67fb9124797853e50a&quot;&gt;Join the discussion on &lt;a href=&quot;https://fosstodon.org/@KevinGimbel/111102411848066204&quot;&gt;Mastodon&lt;/a&gt; or &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7110554353777655809/&quot;&gt;LinkedIn&lt;/a&gt;, or &lt;a href=&quot;https://kevingimbel.de/blog/2023/09/re-the-opentofu-fork-is-now-available/#respond&quot;&gt;comment on the original article on kevingimbel.de&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>TIL: scale down a Kubernetes DaemonSet</title>
        <link href="blog/2023/09/til-scale-down-a-kubernetes-daemonset/" />
        <updated>2023-09-19T08:42:49</updated>
        <id>https://kevin.gimbel.dev/blog/2023/09/til-scale-down-a-kubernetes-daemonset/</id>
        <content xml:lang="en" type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;A DaemonSet is supposed to run on all or some Kubernetes nodes, so scaling it down is surprisingly easy: Set a nodeSelector to some label which doesn&amp;#8217;t exist, and the DaemonSet is scaled to 0.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code alignwide&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;kubectl patch daemonset the-ds -p &#39;{&quot;spec&quot;: {&quot;template&quot;: {&quot;spec&quot;: {&quot;nodeSelector&quot;: {&quot;doesnt-exist&quot;: &quot;true&quot;}}}}}&#39;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This will patch  (&lt;code&gt;-p&lt;/code&gt;) the DaemonSet and add a nodeSelector ( &lt;code&gt;spec.template.spec.nodeSelector&lt;/code&gt;)  which makes the DaemonSet run on all nodes which are labeled  &amp;#8220;&lt;code&gt;doesnt-exist: true&lt;/code&gt;&amp;#8220;.&lt;/p&gt;



&lt;p&gt;Since there are no nodes with this label, the DaemonSet is scaled to 0. &lt;/p&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-f8cb5aaeb760680055176b4072c1bc5c&quot;&gt;Join the discussion on &lt;a href=&quot;https://fosstodon.org/@KevinGimbel/111090687977575559&quot;&gt;Mastodon&lt;/a&gt; üêò, &lt;a href=&quot;https://www.linkedin.com/feed/update/urn:li:activity:7109804023955759104/&quot;&gt;LinkedIn&lt;/a&gt; üßë‚Äçüíª¬†or &lt;a href=&quot;https://kevingimbel.de/blog/2023/09/til-scale-down-a-kubernetes-daemonset/#respond&quot;&gt;comment on the original article on kevingimbel.de&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>TIL: Run a script on every k8s Node using  a DaemonSet</title>
        <link href="blog/2023/09/til-run-a-script-on-every-k8s-node-using-a-daemonset/" />
        <updated>2023-09-07T14:01:10</updated>
        <id>https://kevin.gimbel.dev/blog/2023/09/til-run-a-script-on-every-k8s-node-using-a-daemonset/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;I&amp;#8217;ve known that DaemonSets are used to run containers on all Nodes of a Kubernetes Cluster (or some), but I&amp;#8217;ve never thought of using them to run a (shell) script on each node &amp;#8211; a not-so-uncommon task when maintaining clusters!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;What we need&lt;/h2&gt;



&lt;p&gt;We need two resources: A ConfigMap and a DaemonSet.&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;ConfigMap&lt;/h3&gt;



&lt;p&gt;The config map holds the script, which will be mounted into the container started by the DaemonSet. &lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;yaml&quot; class=&quot;language-yaml&quot;&gt;---
apiVersion: v1
kind: ConfigMap
metadata:
  name: my-script
  namespace: kube-system
data:
  my-script.sh: |
    #!/usr/bin/env bash
    while true; do
       echo &quot;hello world!&quot;
       sleep 60
    done&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The data is just the shell script we want to execute.&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;DaemonSet&lt;/h3&gt;



&lt;p&gt;The DaemonSet is used to run a &lt;code&gt;busybox&lt;/code&gt; container on each node which is used to execute the (shell) script specified in the ConfigMap &amp;#8211; in the last lines the config map is mounted as &lt;code&gt;my-script.sh&lt;/code&gt; file, and marked as readable and executable  (&lt;a href=&quot;https://kevingimbel.github.io/unix-permission-generator/?u=5&amp;amp;g=5&amp;amp;o=5&quot;&gt;0555, or r-xr-xr-x&lt;/a&gt;). It is then used as &lt;code&gt;command&lt;/code&gt; for the busybox container.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;yaml&quot; class=&quot;language-yaml&quot;&gt;apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: my-script
  namespace: kube-system
  labels:
    k8s-app: my-script
spec:
  selector:
    matchLabels:
      name: my-script
  template:
    metadata:
      labels:
        name: my-script
    spec:
      hostPID: true
      containers:
        - name: my-script
          securityContext:
            privileged: true
          image: busybox:1.36.0
          command: [&quot;/my-script.sh&quot;]
          resources:
            requests:
              cpu: 10m
              memory: 50Mi
          volumeMounts:
            - name: my-script-script
              mountPath: /my-script.sh
              subPath: my-script.sh
      volumes:
        - name: my-script-script
          configMap:
            name: my-script-script
            defaultMode: 0555&lt;/code&gt;&lt;/pre&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Use case&lt;/h3&gt;



&lt;p&gt;At work I encountered an issue with the AWS EFS CSI driver, a component which mounts and unmounts EFS volumes in a Kubernetes cluster. Occasionally the EFS mount would become unresponsive and be in a &amp;#8220;Zombie-like&amp;#8221; state, where the EFS driver still believed the volume was mounted and healthy when it actually wasn&amp;#8217;t.&lt;/p&gt;



&lt;p&gt;Turns out, the issue was with &lt;code&gt;stunnel&lt;/code&gt;, a SSL tunnel used by EFS/the EFS driver. The solution for the problem was to kill the &lt;code&gt;stunnel&lt;/code&gt; processes when the mount can no longer be accessed which makes the EFS process re-create the tunnel and mount. Fun times!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Links&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/&quot;&gt;Kubernetes Docs for DaemonSet&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/8/stunnel&quot;&gt;Stunnel man page&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://github.com/kubernetes-sigs/aws-efs-csi-driver/issues/616&quot;&gt;AWS EFS CSI driver issue on GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-294014fc3e40a4073b5b0c36b3840d35&quot;&gt;Join the discussion on &lt;a href=&quot;https://fosstodon.org/@KevinGimbel/111024007254844161&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Mastodon&lt;/a&gt; üêò or &lt;a href=&quot;https://kevingimbel.de/blog/2023/09/til-run-a-script-on-every-k8s-node-using-a-daemonset/#respond&quot;&gt;comment on the original article on kevingimbel.de&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>TIL: named return parameters in Go</title>
        <link href="blog/2023/08/til-named-return-parameters-in-go/" />
        <updated>2023-08-22T10:35:56</updated>
        <id>https://kevin.gimbel.dev/blog/2023/08/til-named-return-parameters-in-go/</id>
        <content xml:lang="en" type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;Yet another piece of ‚ú® Go Magic ‚ú®&lt;/p&gt;



&lt;p&gt;I was reading through some Go code when I came upon a function that returned two things &amp;#8211; &lt;code&gt;[]string&lt;/code&gt; and &lt;code&gt;error&lt;/code&gt; &amp;#8211; but the last line of the function just said &lt;code&gt;return&lt;/code&gt;. I was confused how this worked, and since it was part of the standard library I was sure it was no bug &amp;#8211; the code worked after all. &lt;/p&gt;



&lt;p&gt;Turns out in Go, return parameters can be named &amp;#8211; and they initialise their default zero-values for their type as well as define a named variables inside the function scope.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;go&quot; class=&quot;language-go&quot;&gt;func MyFunc() (resp string, err error) {
  // this function returns &quot;&quot;, nil
  return
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Go playground &lt;a href=&quot;https://go.dev/play/p/B9HYuexGXOu&quot;&gt;https://go.dev/play/p/yQP1oXgaYP_B&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Without the named parameters an error is thrown:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;go&quot; class=&quot;language-go&quot;&gt;func MyFunc() (string, error) {
	return
}

// not enough return values
//	have ()
//	want (string, error) &lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Go keeps amazing me with this stuff. There&amp;#8217;s nice parts of the language on one side, and on the other it took until &lt;a href=&quot;https://go.dev/doc/go1.21#slices&quot;&gt;Go 1.21 (released this month!) to add a slices package&lt;/a&gt; with basic features like &lt;code&gt;slices.Contains()&lt;/code&gt; &amp;#8211; functions which needed to be implement by-hand up until now.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Additional reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://go.dev/doc/effective_go#named-results&quot;&gt;https://go.dev/doc/effective_go#named-results&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-e94811fefbbc09de37e9b6f3f9e485f9&quot;&gt;Join the discussion on &lt;a href=&quot;https://fosstodon.org/@KevinGimbel/110932587822939667&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Mastodon&lt;/a&gt; üêò or &lt;a href=&quot;https://kevingimbel.de/blog/2023/08/til-named-return-parameters-in-go/#respond&quot;&gt;comment on the original article on kevingimbel.de&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>Building for the web, with Rust and WebAssembly</title>
        <link href="blog/2023/07/building-for-the-web-with-rust-and-webassembly/" />
        <updated>2023-07-27T07:35:53</updated>
        <id>https://kevin.gimbel.dev/blog/2023/07/building-for-the-web-with-rust-and-webassembly/</id>
        <content xml:lang="en" type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://webassembly.org&quot; target=&quot;_blank&quot;&gt;WebAssembly&lt;/a&gt; (&lt;em&gt;WASM&lt;/em&gt;) has been around for a few years now. It&amp;#8217;s a binary format that runs in the browser, allowing programmers to write code in Rust (&lt;em&gt;or Java, Go, C/C++&lt;/em&gt;), compile it into WebAssembly and then execute the code in the browser.&lt;/p&gt;



&lt;p&gt;I&amp;#8217;ve been wanting to build &lt;em&gt;something&lt;/em&gt; in WebAssembly for a while and just recently it hit me that I have a thing: &lt;strong&gt;mktoc&lt;/strong&gt;! &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://github.com/KevinGimbel/mktoc&quot; target=&quot;_blank&quot;&gt;mktoc&lt;/a&gt; is a table of contents generator written in Rust, it comes as a Binary and a Library and can be compiled into WebAssembly with &lt;em&gt;zero effort&lt;/em&gt;!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Quick (Technical) Overview&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;The Rust code gets compiled for the target &lt;br&gt;&lt;strong&gt;wasm32-unknown-unknown&lt;/strong&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://rustwasm.github.io/wasm-pack/installer/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;wasm-pack&lt;/a&gt; is used to compile and bundle the generated WASM code&lt;/li&gt;



&lt;li&gt;Some JavaScript and a static HTML page is used to build the Front-end&lt;/li&gt;



&lt;li&gt;The web app is deployed on GitHub pages&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Compiling to WASM&lt;/h2&gt;



&lt;p&gt;Compiling to WASM is surprisingly straight forward. Rust has a target for WASM, &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt;, and a nice build tool for generating the &amp;#8220;glue code&amp;#8221; around the WASM binary: &lt;code&gt;&lt;strong&gt;wasm-pack&lt;/strong&gt;&lt;/code&gt;&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;wasm-pack build --release --target web&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This command builds the code as an optimised release with web as the target platform &amp;#8211; other targets are &lt;code&gt;&lt;em&gt;bundler, nodejs, web, no-modules&lt;/em&gt; &lt;/code&gt;&amp;#8211; &lt;code&gt;bundler&lt;/code&gt; being the default here. &lt;/p&gt;



&lt;p&gt;A few things more are required to get the Rust code to compile to WASM:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[lib]&lt;/code&gt; must be set to &lt;code&gt;crate-type = [&quot;cdylib&quot;]&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;&lt;code&gt;wasm-bindgen&lt;/code&gt; must be added as a dependency&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;So the &lt;code&gt;Cargo.toml&lt;/code&gt; looks something like this:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;toml&quot; class=&quot;language-toml&quot;&gt;[...]

[lib]
crate-type = [&quot;cdylib&quot;]

[dependencies]
mktoc = { path = &quot;../&quot; }
wasm-bindgen = &quot;0.2.87&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The mktoc dependency is loaded relatively because I included the WASM code as a sub-directory in the &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://github.com/KevinGimbel/mktoc/tree/main/wasm&quot; target=&quot;_blank&quot;&gt;mktoc repository&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;With the dependencies and crate-type in place it&amp;#8217;s finally time for some Rust code!&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;rust&quot; class=&quot;language-rust&quot;&gt;use mktoc;
use wasm_bindgen::prelude::*;

#[wasm_bindgen]
pub fn make_toc(content: &amp;amp;str) -&amp;gt; String {
    mktoc::add_toc(
        content.to_string(),
        mktoc::generate_toc(content.to_string(), mktoc::Config::default()),
    )
}
#[wasm_bindgen]
pub fn make_toc_only(content: &amp;amp;str) -&amp;gt; String {
    mktoc::generate_toc(content.to_string(), mktoc::Config::default())
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here we create two functions, &lt;code&gt;make_toc&lt;/code&gt; and &lt;code&gt;make_toc_only&lt;/code&gt;, which are attributed with &lt;code&gt;#[wasm_bindgen]&lt;/code&gt;, which tells the compiler to make these functions available through WebAssembly. &lt;/p&gt;



&lt;p&gt;And that&amp;#8217;s it. The Rust code in mktoc doesn&amp;#8217;t need to be updated at all!&lt;/p&gt;



&lt;p&gt;For compiling, &lt;code&gt;wasm-pack&lt;/code&gt; is used:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;wasm-pack build --release --target web&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The files will be written to the &lt;code&gt;pkg&lt;/code&gt; directory by default and can be loaded via JavaScript.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;markup&quot; class=&quot;language-markup&quot;&gt;&amp;lt;script type=&quot;module&quot;&amp;gt;
import init, { make_toc, make_toc_only } from &quot;./pkg/webtoc.js&quot;;

init().then(() =&amp;gt; {
// wasm code is loaded
// make_toc is the function defined in Rust
make_toc(`
# Sample

&amp;lt;!-- BEGIN mktoc --&amp;gt;

&amp;lt;!-- END mktoc --&amp;gt;

This is an example document.

## Sample heading 2

&#92;`&#92;`&#92;`rust 
pub fn hello(name: &amp;amp;str) -&amp;gt; String {
    format!(&quot;Hello, {}!&quot;, name)
}
&#92;`&#92;`&#92;``);
});
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;A full working example can also be found on CodePen &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://codepen.io/kevingimbel/pen/GRwGrQZ&quot; target=&quot;_blank&quot;&gt;https://codepen.io/kevingimbel/pen/GRwGrQZ&lt;/a&gt; &amp;#8211; the code uses a packaged and released version from NPM at &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://npmjs.com/webtoc&quot; target=&quot;_blank&quot;&gt;https://npmjs.com/webtoc&lt;/a&gt; via unpkg.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Using the WASM code in a Web App &lt;/h2&gt;



&lt;p&gt;The same code is available as a &amp;#8220;web app&amp;#8221; at &lt;a href=&quot;https://kevingimbel.github.io/webtoc/&quot;&gt;https://kevingimbel.github.io/webtoc/&lt;/a&gt; &amp;#8211; you can paste or load your own Markdown files. When &amp;#8220;uploading&amp;#8221; a file there&amp;#8217;s no need to actually transmit it to a browser: It&amp;#8217;s accessible via JavaScript without being processed by a backend!&lt;/p&gt;



&lt;div class=&quot;wp-block-columns alignwide is-layout-flex wp-container-core-columns-layout-1 wp-block-columns-is-layout-flex&quot;&gt;
&lt;div class=&quot;wp-block-column is-layout-flow wp-block-column-is-layout-flow&quot;&gt;
&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;javascript&quot; class=&quot;language-javascript line-numbers&quot;&gt;markdown_file.addEventListener(&quot;change&quot;, readFile);
function readFile() {
    const [file] = markdown_file.files;
    const reader = new FileReader();

    let dot_split = file.name.split(&quot;.&quot;);
    let file_ext = dot_split[dot_split.length - 1].toLowerCase()

    if (file_ext !== &quot;md&quot; &amp;amp;&amp;amp; file_ext !== &quot;markdown&quot;) {
        triggerError(&quot;Not a markdown file. Please add .md or .markdown file&quot;);
        // reset the file input
        markdown_file.value = &quot;&quot;;
        return;
    }

    reader.addEventListener(&quot;load&quot;, () =&amp;gt; {
        markdown_input.value = &quot;&quot;;
        // pass the file to make_toc
        generate_toc(reader.result);
    });

    if (file) {
        reader.readAsText(file);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;



&lt;div class=&quot;wp-block-column is-layout-flow wp-block-column-is-layout-flow&quot;&gt;
&lt;p&gt;Here&amp;#8217;s how it&amp;#8217;s done: &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Line 1: &lt;/strong&gt;&lt;code&gt;markdown_file&lt;/code&gt; identifier is the Input element.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 2: &lt;/strong&gt;&lt;code&gt;readFile&lt;/code&gt; will be called on &amp;#8220;change&amp;#8221;: The change event is triggered when a file has been selected via the input&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 3: &lt;/strong&gt;&lt;code&gt;markdown_file.files&lt;/code&gt; contains an array of selected files &amp;#8211; we only care about one, so we load it with &lt;code&gt;const [file]&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 6-7:&lt;/strong&gt; &lt;code&gt;dot_split&lt;/code&gt; and &lt;code&gt;file_ext&lt;/code&gt; are used to get the file extension from the file name &amp;#8211; we won&amp;#8217;t process files which aren&amp;#8217;t markdown.&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 9-14:&lt;/strong&gt; I&amp;#8217;ve decided that markdown files must end in &lt;code&gt;.md&lt;/code&gt; or &lt;code&gt;.markdown&lt;/code&gt;, if they do not an error is thrown&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 16-20:&lt;/strong&gt; adds a load event on the reader we created. This triggers once the file has been loaded by the browser &amp;#8211; this happens &lt;em&gt;BEFORE any form is submitted!&lt;/em&gt; Here we reset the input value (= remove the file from the element), then pass the file content to the &lt;code&gt;generate_toc&lt;/code&gt; function&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;Line 22-24:&lt;/strong&gt;Here the file is read &amp;#8211; this will trigger the &lt;code&gt;load&lt;/code&gt; event defined in line 16-20. &lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;p&gt;This setup is incredibly fast. A fairly large Markdown file is processed in milliseconds!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Takeaways&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;Compiling Rust to WASM is surprisingly easy&lt;/em&gt;&lt;/strong&gt;! &lt;br&gt;Without adjustments I was able to bring my Rust library to the web (and NPM!)&lt;/li&gt;



&lt;li&gt;&lt;em&gt;&lt;strong&gt;WASM enables Rust code to be used &amp;#8220;Full Stack&amp;#8221;&lt;/strong&gt;&lt;/em&gt;&lt;br&gt;The mktoc code can be used to preview a Markdown file in the browser, and write it to disk via a backend&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;&lt;em&gt;Rust is awesome&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;Not a takeaway, but I love Rust!&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Code&lt;/h2&gt;



&lt;p&gt;All code used in this blog post is available on Github:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/KevinGimbel/mktoc/tree/main&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;mktoc&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://github.com/KevinGimbel/mktoc/tree/main/wasm&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;mktoc WASM&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://github.com/KevinGimbel/webtoc/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;webtoc&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://rustwasm.github.io/docs/wasm-pack/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://rustwasm.github.io/docs/wasm-pack/&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://webassembly.org&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://webassembly.org&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://developer.mozilla.org/en-US/docs/WebAssembly&quot; target=&quot;_blank&quot;&gt;https://developer.mozilla.org/en-US/docs/WebAssembly&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;hr class=&quot;wp-block-separator has-alpha-channel-opacity&quot;/&gt;



&lt;p class=&quot;has-secondary-color has-primary-background-color has-text-color has-background has-link-color wp-elements-9c42702dc0604635bad2da123662bada&quot;&gt;Join the discussion on &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://fosstodon.org/@KevinGimbel/110784659700280987&quot; target=&quot;_blank&quot;&gt;Mastodon&lt;/a&gt; üêò or &lt;a href=&quot;https://kevingimbel.de/blog/2023/07/building-for-the-web-with-rust-and-webassembly/#respond&quot;&gt;comment on the original article on kevingimbel.de&lt;/a&gt;&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>TIL: multiple git-identities on one machine</title>
        <link href="blog/2023/04/til-multiple-git-identities-on-one-machine/" />
        <updated>2023-04-20T13:11:41</updated>
        <id>https://kevin.gimbel.dev/blog/2023/04/til-multiple-git-identities-on-one-machine/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;Turns out you can have multiple Git identities alongside each other on one Machine without needing to set them locally for each repository!&lt;/p&gt;



&lt;p&gt;It still involves multiple &lt;code&gt;.gitconfig&lt;/code&gt; files, but it&amp;#8217;s a lot less work than configuring an endless amount of repos!&lt;/p&gt;



&lt;p&gt;First, set the global config like this:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;# File: ~/.gitconfig
[user]
  name = Kevin Gimbel
  email = kevin@gimbel.dev

[includeIf &quot;gitdir:~/AOE/&quot;]
    path = ~/AOE/.gitconfig
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Now in &lt;code&gt;~/AOE/.gitconfig&lt;/code&gt; I configure the following&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;# File: ~/AOE/.gitconfig
[user]
  name = Kevin Gimbel
  email = kevin.gimbel@aoe.com&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;In &lt;code&gt;~/AOE/&lt;/code&gt; I have all repositories related to my work, and whenever I work in a sub-directory the identity with the e-Mail address of my work is being used!&lt;/p&gt;



&lt;p&gt;Source: &lt;a href=&quot;https://stackoverflow.com/a/3860139&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;https://stackoverflow.com/a/3860139&lt;/a&gt; &lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>Setting up a MacBook from scratch for the first time in 8 years</title>
        <link href="blog/2023/04/setting-up-a-macbook-from-scratch-for-the-first-time-in-8-years/" />
        <updated>2023-04-12T10:16:46</updated>
        <id>https://kevin.gimbel.dev/blog/2023/04/setting-up-a-macbook-from-scratch-for-the-first-time-in-8-years/</id>
        <content xml:lang="en" type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;Oh boy, did I not think about a lot of stuf&amp;#8230;&lt;/p&gt;



&lt;p&gt;For the past 8 or so years I&amp;#8217;ve always used my work MacBook for all things dev, including private development. I&amp;#8217;ve spent a lot of time setting up and changing my zsh, and later fish, configs, configuring iTerm, trying out different themes, &amp;#8230; you know the drill. &lt;/p&gt;



&lt;p&gt;When I decommissioned my old Mac and got my new shiny Mac from &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://aoe.com/&quot; target=&quot;_blank&quot;&gt;AOE&lt;/a&gt;, I realised I didn&amp;#8217;t have any backups for all my app configs (iTerm, VSCode, &amp;#8230;), so I had to start from zero. üò¨&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;iTerm 2&lt;/h2&gt;



&lt;p&gt;Since forever iTerm 2 has been my go-to Terminal on MacOS. I&amp;#8217;ve never found any terminal emulator that&amp;#8217;s as reliable, fast, and custimizable as iTerm 2, plus there&amp;#8217;s tons of community resources online.&lt;/p&gt;



&lt;p&gt;The last time I had a fresh, clean iTerm installation was a long time ago, so I was quite shocked by the defaults. I&amp;#8217;ve really gotten used to all my fancy customizations and adjustments. &lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Naural Text Editing&lt;/h3&gt;



&lt;p&gt;I didn&amp;#8217;t even know that this wasn&amp;#8217;t the standard for iTerm, but after a short search I found &lt;a href=&quot;https://apple.stackexchange.com/a/293988&quot;&gt;https://apple.stackexchange.com/a/293988&lt;/a&gt; this stackexchange answer which is exactly what I wanted.&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;Go to &lt;strong&gt;Preferences&amp;#8230;&lt;/strong&gt; &amp;gt; &lt;strong&gt;Profiles&lt;/strong&gt; &amp;gt; &lt;strong&gt;Keys&lt;/strong&gt; (not Preferences&amp;#8230; &amp;gt; Keys)&lt;/li&gt;



&lt;li&gt;On current versions (3.14+) you then switch to the &lt;strong&gt;Key Mappings&lt;/strong&gt; tab&lt;/li&gt;



&lt;li&gt;Press &lt;strong&gt;Presets&amp;#8230;&lt;/strong&gt; dropdown button.&lt;/li&gt;



&lt;li&gt;Select &lt;strong&gt;Natural Text Editing&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;Natural Text Editing sets some sensible defaults, like navigating by-word using &lt;kbd&gt;Option + Left Arrow&lt;/kbd&gt;, or moving to the start of a line by pressing &lt;kbd&gt;Cmd + Left Arrow&lt;/kbd&gt;, end of line with &lt;kbd&gt;Cmd + Right Arrow&lt;/kbd&gt;, and so on &amp;#8211; navigating the command line (like, the actual line) feels natural now. &lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Oh-My-Zsh &lt;/h3&gt;



&lt;p&gt;Years ago I was a oh-my-zsh user but then I switched to fish shell. With the new Mac and zsh being the default shell anyway I decided to try zsh again. At the end of the day it doesn‚Äôt matter that much, and zsh (and bash as well) have a lot of great tools and scripts to enhance them. &lt;/p&gt;



&lt;p&gt;Anyway, I basically just installed oh-my-zsh and disabled all plugins for the prompt as I‚Äôm using starship for my prompt (see below). &lt;/p&gt;



&lt;p&gt;I&amp;#8217;ve also used &lt;em&gt;zplug&lt;/em&gt; for zsh plugin management so oh-my-zsh is only used for all its default settings at the moment. &lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;Starship pompt&lt;/h3&gt;



&lt;p&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://starship.rs&quot; target=&quot;_blank&quot;&gt;starship&lt;/a&gt; is a super fast and awesome prompt written in rust. It‚Äôs cross-shell and cross-platform and comes with batteries included &amp;#8211; meaning it has a lot of &lt;a href=&quot;https://starship.rs/config/&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;integrations with popular tools and frameworks&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;I‚Äôve been using starship for some time with bash and fish shell, so it was a natural choice. I disabled all plugins in oh-my-zsh, as the prompt is now handled by starship instead.&lt;/p&gt;



&lt;p&gt;Here&amp;#8217;s my current &lt;code&gt;starship.toml&lt;/code&gt; config file.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;toml&quot; class=&quot;language-toml&quot;&gt;format=&quot;&quot;&quot;
$username&#92;
$hostname&#92;
$localip&#92;
$kubernetes&#92;
$directory&#92;
$git_branch&#92;
$git_commit&#92;
$git_state&#92;
$git_metrics&#92;
$git_status&#92;
$docker_context&#92;
$package&#92;
$golang&#92;
$helm&#92;
$nodejs&#92;
$python&#92;
$rust&#92;
$terraform&#92;
$aws&#92;
$env_var&#92;
$custom&#92;
$sudo&#92;
$cmd_duration&#92;
$line_break&#92;
$jobs&#92;
$time&#92;
$status&#92;
$shell&#92;
$character
&quot;&quot;&quot;

# Replace the &#39;‚ùØ&#39; symbol in the prompt with &#39;‚ûú&#39;
[character]
success_symbol = &#39;[‚ûú](bold 219)&#39; 
error_symbol = &#39;[‚úï](bold 45)&#39;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;219 and 45 are color codes taken from this graphic (via &lt;a href=&quot;https://i.stack.imgur.com/KTSQa.png&quot;&gt;https://i.stack.imgur.com/KTSQa.png&lt;/a&gt;). &lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img decoding=&quot;async&quot; src=&quot;https://i.stack.imgur.com/KTSQa.png&quot; alt=&quot;&quot;/&gt;&lt;/figure&gt;



&lt;p&gt;And below you can see what the prompt looks like. I think it&amp;#8217;s cute, and a nice start. ‚ú®&lt;/p&gt;



&lt;figure class=&quot;wp-block-image size-large&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;1024&quot; height=&quot;551&quot; src=&quot;https://kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49-1024x551.png&quot; alt=&quot;Screenshot of iTerm2 showing the prompt and colors for errors and success. With success an arrow in pink is shown as prompt symbol, with failure a blue X is displayed.&quot; class=&quot;wp-image-274&quot; srcset=&quot;https://kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49-1024x551.png 1024w, https://kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49-300x161.png 300w, https://kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49-768x413.png 768w, https://kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-12-at-07.54.49.png 1204w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot; /&gt;&lt;/figure&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Keyboard setup&lt;/h2&gt;



&lt;p&gt;I like to use the English keyboard layout since I write English most of the time and all keys for programming are better reachable on the English keyboard.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image alignleft size-full&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;632&quot; height=&quot;240&quot; src=&quot;https://kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-06-at-10.35.21.png&quot; alt=&quot;Screenshot showing the English keyboard layout&quot; class=&quot;wp-image-261&quot; srcset=&quot;https://kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-06-at-10.35.21.png 632w, https://kevingimbel.de/wp-content/uploads/2023/04/Screenshot-2023-04-06-at-10.35.21-300x114.png 300w&quot; sizes=&quot;(max-width: 632px) 100vw, 632px&quot; /&gt;&lt;figcaption class=&quot;wp-element-caption&quot;&gt;The US International PC keyboard layout&lt;/figcaption&gt;&lt;/figure&gt;



&lt;p&gt;All the nice keys one needs for programming are on the right side of the keyboard, which is a lot easier to reach than having all of these keys in the top row, as it is the standard on the German keyboard layout.&lt;/p&gt;



&lt;p&gt;The only problem was that by default Umlauts (&lt;code&gt;√§, √∂, √º&lt;/code&gt;) are hard to type. The default was to type &lt;code&gt;Option + u&lt;/code&gt; followed by the base-letter &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;o&lt;/code&gt;, or &lt;code&gt;u&lt;/code&gt;. &lt;/p&gt;



&lt;p&gt;A more convenient way in my opinion is to type a quote &lt;code&gt;&quot;&lt;/code&gt; and then the letter to create the Umlaut, which doesn&amp;#8217;t interrupt my typing.&lt;/p&gt;



&lt;p&gt;This only works when the keyboard is set to &amp;#8220;&lt;code&gt;US International - PC&lt;/code&gt;&amp;#8220;. &lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Go to &lt;strong&gt;System Preferences &lt;/strong&gt;&lt;/li&gt;



&lt;li&gt;Select &lt;strong&gt;Keyboard&lt;/strong&gt;&lt;/li&gt;



&lt;li&gt;Scroll to &lt;strong&gt;Text Input&lt;/strong&gt;&lt;/li&gt;



&lt;li&gt;Click the &lt;code&gt;&lt;strong&gt;+&lt;/strong&gt;&lt;/code&gt; sign to add a new keyboard&lt;/li&gt;



&lt;li&gt;Search for &amp;#8220;&lt;strong&gt;US International &amp;#8211; PC&lt;/strong&gt;&amp;#8220;&lt;/li&gt;



&lt;li&gt;Remove the Text Input (called &lt;em&gt;ABC&lt;/em&gt;)&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;VSCode&lt;/h2&gt;



&lt;p&gt;For a long long time I&amp;#8217;ve used VSCode as my day-to-day editor for all things. Ansible roles, Terraform modules, Rust and Go, HTML/CSS/JavaScript, Shell scripting, &amp;#8230; it&amp;#8217;s just a perfect fit for me. It has so many extensions that it can work with anything.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Other software&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://spacevim.org&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;spacevim&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://github.com/zplug/zplug&quot; target=&quot;_blank&quot;&gt;zplug&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://tunnelblick.net&quot; target=&quot;_blank&quot; rel=&quot;noreferrer noopener&quot;&gt;Tunnelblick&lt;/a&gt; for VPN&lt;/li&gt;



&lt;li&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://keepassxc.org&quot; target=&quot;_blank&quot;&gt;KeePassXC&lt;/a&gt; (üíö)&lt;/li&gt;



&lt;li&gt;&lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://www.mozilla.org/en-GB/firefox/new&quot; target=&quot;_blank&quot;&gt;Firefox&lt;/a&gt; (ü¶ä)&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;I&amp;#8217;m sure I am still missing something, but it&amp;#8217;ll be installed when it&amp;#8217;s needed. For now I have a device I can work with comfortably. &lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>A new chapter</title>
        <link href="blog/2023/04/a-new-chapter/" />
        <updated>2023-04-02T12:40:43</updated>
        <id>https://kevin.gimbel.dev/blog/2023/04/a-new-chapter/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;In January 2014, I joined Synoa in its founding days as a Web Developer, focused on Magento 1 and WordPress at the time.&lt;/p&gt;



&lt;p&gt;Now, 9 years later, I decided it‚Äôs time to move on. I‚Äôm super exited to say that as of April 2023 I‚Äôve joined &lt;a rel=&quot;noreferrer noopener&quot; href=&quot;https://aoe.com&quot; target=&quot;_blank&quot;&gt;AOE &lt;/a&gt;as a DevOps Engineer!&lt;/p&gt;



&lt;p&gt;ü•≥&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>Unpinned dependencies just broke my plugin</title>
        <link href="blog/2023/02/unpinned-dependencies-just-broke-my-plugin/" />
        <updated>2023-02-22T16:55:56</updated>
        <id>https://kevin.gimbel.dev/blog/2023/02/unpinned-dependencies-just-broke-my-plugin/</id>
        <content xml:lang="en" type="html">
&lt;p class=&quot;has-medium-font-size&quot;&gt;Hello and welcome to a little recap! My &lt;a href=&quot;https://github.com/KevinGimbel/eleventy-plugin-mermaid&quot;&gt;11ty MermaidJS plugin&lt;/a&gt;  was just broken by MermaidJS release 10.0 because they no longer provided a minified JavaScript bundle and instead only provide a ESM module. &lt;/p&gt;



&lt;p&gt;My plugin was referencing &lt;code&gt;https://unpkg.com/mermaid/dist/mermaid.min.js&lt;/code&gt; by default for including the javascript code, but with version 10 this now leads to a 404 on unpkg.com, resulting in the plugin breaking for everyone using it. &lt;em&gt;Oops.&lt;/em&gt; üò¨&lt;/p&gt;



&lt;p&gt;As a quick fix I&amp;#8217;ve moved the code to use the ESM module instead, which luckily was fairy straight forward. The change can be seen on GitHub here &lt;a href=&quot;https://github.com/KevinGimbel/eleventy-plugin-mermaid/commit/3f356d603dafb0801c4fe90ff75aa0a54f73eceb&quot;&gt;https://github.com/KevinGimbel/eleventy-plugin-mermaid/commit/3f356d603dafb0801c4fe90ff75aa0a54f73eceb&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;I should&amp;#8217;ve know better than to reference the latest version by default, but sometimes I&amp;#8217;m lazy and I initially developed the plugin for my self without thinking much about it.&lt;/p&gt;



&lt;p&gt;Sorry if I broke your website. üñ§ &lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>TIL: One-line list manipulation in Python</title>
        <link href="blog/2023/01/til-one-line-list-manipulation-in-python/" />
        <updated>2023-01-12T12:55:13</updated>
        <id>https://kevin.gimbel.dev/blog/2023/01/til-one-line-list-manipulation-in-python/</id>
        <content xml:lang="en" type="html">
&lt;p class=&quot;has-large-font-size&quot;&gt;In Python there&amp;#8217;s a one-line syntax for iterating over elements of a list. I&amp;#8217;ve always found it looked kind-of odd, and as I need to look it up all the time I decided to write a little TIL on this blog about it.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;list = &amp;#91;1, 2, 3, 4]
new_list = &amp;#91;num*2 for num in list]

new_list == &amp;#91;2, 4, 6, 8]

#     |--- the function to call on each element
#     |           |--- variable name for each item
#     |           |       |--- the list to work on
#     |           |       |
&amp;#91;&lt;strong&gt;func(item) &lt;/strong&gt;for &lt;strong&gt;item&lt;/strong&gt; in &lt;strong&gt;list&lt;/strong&gt;]&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;There are more powerful one-liners documented on the &lt;a href=&quot;https://wiki.python.org/moin/Powerful%20Python%20One-Liners&quot;&gt;Python Wiki&lt;/a&gt;. &lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>Publishing and building a static website on GitHub Pages</title>
        <link href="blog/2022/12/publishing-and-building-a-static-website-on-github-pages/" />
        <updated>2022-12-02T13:48:27</updated>
        <id>https://kevin.gimbel.dev/blog/2022/12/publishing-and-building-a-static-website-on-github-pages/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;A week ago or so I finally launched a small website I&amp;#8217;ve been working on for quite some time: &lt;a href=&quot;https://kevin.gimbel.dev/ops/&quot;&gt;kevin.gimbel.dev/ops&lt;/a&gt; &amp;#8211; it&amp;#8217;s a colourful static website showing some of the technologies I&amp;#8217;ve worked with in the past years since I began doing DevOps full time.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image alignwide size-large&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;1024&quot; height=&quot;666&quot; src=&quot;https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05-1024x666.png&quot; alt=&quot;&quot; class=&quot;wp-image-94&quot; srcset=&quot;https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05-1024x666.png 1024w, https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05-300x195.png 300w, https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05-768x499.png 768w, https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05-1536x999.png 1536w, https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.46.05-2048x1332.png 2048w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot; /&gt;&lt;/figure&gt;



&lt;p&gt;The website is built with &lt;a href=&quot;https://11ty.dev/&quot;&gt;11ty&lt;/a&gt; and published with &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. &lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Overview&lt;/h2&gt;



&lt;p&gt;Here&amp;#8217;s what we do:&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;Build the code using 11ty&lt;/li&gt;



&lt;li&gt;Publish the generated site to a &lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/tree/gh-pages&quot;&gt;gh-pages branch&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;To do this we need to first set our GitHub repository to deploy from a GitHub action. This is a new feature and currently in Beta.&lt;/p&gt;



&lt;figure class=&quot;wp-block-image alignwide size-large&quot;&gt;&lt;img loading=&quot;lazy&quot; decoding=&quot;async&quot; width=&quot;1024&quot; height=&quot;532&quot; src=&quot;https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00-1024x532.png&quot; alt=&quot;&quot; class=&quot;wp-image-93&quot; srcset=&quot;https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00-1024x532.png 1024w, https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00-300x156.png 300w, https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00-768x399.png 768w, https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00-1536x798.png 1536w, https://kevingimbel.de/wp-content/uploads/2022/12/Screenshot-2022-12-02-at-13.38.00-2048x1065.png 2048w&quot; sizes=&quot;(max-width: 1024px) 100vw, 1024px&quot; /&gt;&lt;figcaption class=&quot;wp-element-caption&quot;&gt;GitHub Pages settings screen&lt;/figcaption&gt;&lt;/figure&gt;



&lt;p&gt;With this setting enabled our GitHub action is used to deploy the static site.&lt;/p&gt;



&lt;p&gt;The building is then done in a &lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/blob/main/.github/workflows/build-eleventy.yml&quot;&gt;GitHub action&lt;/a&gt;. Here&amp;#8217;s the code&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;name: Build eleventy site

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - run: npm ci

      - run: npm run build

      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.ref == &#39;refs/heads/main&#39; }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;With this config we do the following:&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;Checkout the code using the standard actions/checkout@v3 action from GitHub&lt;/li&gt;



&lt;li&gt;Setup NodeJS with the actions/setup-node@v3 action, we specify 18 as version&lt;/li&gt;



&lt;li&gt;Run &lt;code&gt;&lt;strong&gt;npm ci&lt;/strong&gt;&lt;/code&gt; to install dependencies&lt;/li&gt;



&lt;li&gt;Run &lt;code&gt;&lt;strong&gt;npm run build&lt;/strong&gt;&lt;/code&gt; to execute the &lt;a href=&quot;https://github.com/KevinGimbel/kevin.gimbel.dev/blob/1d66b873955803054b2a85f7add3c8d2430a0243/package.json#L6&quot;&gt;build script defined in the package.json&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;And finally we use &lt;a href=&quot;https://github.com/peaceiris/actions-gh-pages&quot;&gt;peaceiris/actions-gh-pages@v3&lt;/a&gt; to deploy the compiled code to the gh-pages branch.&lt;/li&gt;
&lt;/ol&gt;



&lt;p&gt;This action works like a charm and builds the site in no time! Previously I had build the static site on my machine and setup GitHub pages to serve files from the &lt;code&gt;&lt;strong&gt;docs&lt;/strong&gt;&lt;/code&gt; folder. This works as well, but I didn&amp;#8217;t want to run the compile commands by hand all the time.&lt;/p&gt;



&lt;p&gt;By default all GitHub Pages run through Jekyll, which was also a waste of resources because this step did nothing. By providing my own build script that actually does something the default Jekyll one stopped running as well. &lt;/p&gt;



&lt;p&gt;&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>Back to basics: WordPress!</title>
        <link href="blog/2022/11/back-to-basics-wordpress/" />
        <updated>2022-11-21T12:28:35</updated>
        <id>https://kevin.gimbel.dev/blog/2022/11/back-to-basics-wordpress/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;If you&amp;#8217;re a regular (LOL) on this website you may have noticed that literally everything is different and all old content is gone as well. Sorry about that!&lt;/p&gt;



&lt;p&gt;I&amp;#8217;ve moved my website from a static webpage made with 11ty to a WordPress powered site again because I&amp;#8217;ve noticed over the past years that Markdown-based solutions slow me down in simply creating content; They&amp;#8217;re amazing tools, and I love working with 11ty, but I don&amp;#8217;t like publishing content with it.&lt;/p&gt;



&lt;p&gt;So, full cycle I&amp;#8217;ve come back to WordPress, the first CMS I ever used back in 2009ish when I first started writing about tech stuff.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;What to expect?&lt;/h2&gt;



&lt;p&gt;Nothing, really. &lt;/p&gt;



&lt;p&gt;I want to write about things I learn but I don&amp;#8217;t want to pressure myself into writing X articles each month or week or whatever; I just want to write when I have something to write about.&lt;/p&gt;



&lt;p&gt;So that&amp;#8217;s it.&lt;/p&gt;



&lt;p&gt;So long, and thanks for all the fish üêü&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>Hello, world!</title>
        <link href="blog/2022/11/hello-world/" />
        <updated>2022-11-16T12:02:17</updated>
        <id>https://kevin.gimbel.dev/blog/2022/11/hello-world/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;The classic first blog post.&lt;/p&gt;



&lt;p&gt;This post marks the move to WordPress. All content before this one is from my old 11ty based website.&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>How to extend and reuse configs in Gitlab CI</title>
        <link href="blog/2022/11/how-to-extend-and-reuse-configs-in-gitlab-ci/" />
        <updated>2022-11-01T09:00:00</updated>
        <id>https://kevin.gimbel.dev/blog/2022/11/how-to-extend-and-reuse-configs-in-gitlab-ci/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;When I began using Gitlab CI the first thing I wanted to know was how to reuse configs. I know that we&amp;#8217;ll have changing requirements at work and that we&amp;#8217;ll have hundreds of repositories using basically-the-same configurations so I wanted to make sure we&amp;#8217;d have a central place to make changes to these.&lt;/p&gt;



&lt;p&gt;I found two ways to archive reusable configurations which I&amp;#8217;ll explain below.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2022/01/11-how-to-extend-and-reuse-configs-in-gitlab-ci/index.md#extends&quot;&gt;&lt;/a&gt;Extends&lt;/h2&gt;



&lt;p&gt;First of we have the&amp;nbsp;&lt;code&gt;extends&lt;/code&gt;&amp;nbsp;keyword. This makes a config section of the CI yaml reuse another section, as illustrated below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
    - echo &quot;Hello, Gitlab CI!&quot;

my-other-block:
  extends:
    - my-base-block&lt;/pre&gt;



&lt;p&gt;Gitlab combines this into the following YAML:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
  - echo &quot;Hello, Gitlab CI!&quot;
my-other-block:
  stage: deploy
  script:
  - echo &quot;Hello, Gitlab CI!&quot;
  extends:
  - my-base-block&lt;/pre&gt;



&lt;p&gt;So far so good! But there&amp;#8217;s one downside to&amp;nbsp;&lt;code&gt;extends&lt;/code&gt;: If&amp;nbsp;&lt;code&gt;my-other-block&lt;/code&gt;&amp;nbsp;has its own script, it will overwrite the original script, as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
    - echo &quot;Hello, Gitlab CI!&quot;

my-other-block:
  extends:
    - my-base-block
  script:
    - echo &quot;Bye, Gitlab CI!&quot;&lt;/pre&gt;



&lt;p&gt;Merged YAML:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
  - echo &quot;Hello, Gitlab CI!&quot;
my-other-block:
  stage: deploy
  script:
  - echo &quot;Bye, Gitlab CI!&quot;
  extends:
  - my-base-block&lt;/pre&gt;



&lt;p&gt;Now that&amp;#8217;s not what we want, the&amp;nbsp;&lt;code&gt;script&lt;/code&gt;&amp;nbsp;field was overwritten! Good for us that Gitlab has a solution:&amp;nbsp;&lt;code&gt;!reference[]&lt;/code&gt;.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2022/01/11-how-to-extend-and-reuse-configs-in-gitlab-ci/index.md#reference&quot;&gt;&lt;/a&gt;!reference&lt;/h2&gt;



&lt;p&gt;&lt;code&gt;!reference[]&lt;/code&gt;&amp;nbsp;is an extension to YAML Gitlab provides, it allows us to reference another block and key which will be &amp;#8211; well &amp;#8211; referenced!&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
    - echo &quot;Hello, Gitlab CI!&quot;

my-other-block:
  extends:
    - my-base-block
  script:
    - !reference [my-base-block, script]
    - echo &quot;Bye, Gitlab CI!&quot;&lt;/pre&gt;



&lt;p&gt;And the merged YAML:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;my-base-block:
  stage: deploy
  script:
  - echo &quot;Hello, Gitlab CI!&quot;
my-other-block:
  stage: deploy
  script:
  - - echo &quot;Hello, Gitlab CI!&quot;
  - echo &quot;Bye, Gitlab CI!&quot;
  extends:
  - my-base-block&lt;/pre&gt;



&lt;p&gt;Now we have both script parts! I&amp;#8217;m exited to explore Gitlab further in the future, so far my experience with it has been a real pleasure.&amp;nbsp;üß°&lt;/p&gt;



&lt;p&gt;Thanks for coming to my TED Talk!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2022/01/11-how-to-extend-and-reuse-configs-in-gitlab-ci/index.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/yaml/yaml_optimization.html#reference-tags&quot;&gt;Official Gitlab Documentation&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/ci/yaml/&quot;&gt;Full .gitlab-ci YAML reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>TIL: Replace git URLs in Gitlab CI</title>
        <link href="blog/2021/12/replace-git-urls-in-gitlab-ci/" />
        <updated>2021-12-30T09:00:00</updated>
        <id>https://kevin.gimbel.dev/blog/2021/12/replace-git-urls-in-gitlab-ci/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;When working with Gitlab as a storage for Terraform or Ansible modules you probably access them using SSH, like&amp;nbsp;&lt;code&gt;git@gitlab.instance:group/project.git&lt;/code&gt;. This has the advantage that authentication is done using SSH keys and everybody on your team can access the repositories just like they&amp;#8217;d do when cloning on the terminal &amp;#8211; no need for entering passwords during clone or install.&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote is-style-default has-contrast-color has-secondary-background-color has-text-color has-background&quot;&gt;
&lt;p&gt;Before we begin: I use Ansible roles as an example here, but this applies to any sort of installable module from git sources, e.g. private NPM modules or Python packages stored in Gitlab repositories.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;The method described has a disadvantage: In CI you may not have an SSH key ready, or you need different SSH keys for security reasons. Managing all the different SSH keys just to clone some repositories is tiresome &amp;#8211; so how can we access the repositories without rewriting all our code or exposing SSH keys on the build agent?&lt;/p&gt;



&lt;p&gt;The answer is&amp;nbsp;&lt;code&gt;git config --global url&lt;/code&gt;!&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;git config --global url.&quot;https://gitlab-ci-user:${GITLAB_TOKEN}@gitlab.instance/&quot;.insteadOf &quot;git@gitlab.instance:&quot;&lt;/pre&gt;



&lt;p&gt;Notice the&amp;nbsp;&lt;code&gt;/&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;:&lt;/code&gt;&amp;nbsp;&amp;#8211; they are important! This will rewrite&amp;nbsp;&lt;code&gt;git@gitlab.instance:group/project.git&lt;/code&gt;&amp;nbsp;to&amp;nbsp;&lt;code&gt;https://gitlab-ci-user:${GITLAB_TOKEN}@gitlab.instance/project/group.git&lt;/code&gt;&amp;nbsp;when cloning the source code, which allows us to access the repository using the&amp;nbsp;&lt;code&gt;$GITLAB_TOKEN&lt;/code&gt;&amp;nbsp;and username rather than SSH.&lt;/p&gt;



&lt;p&gt;&lt;code&gt;$GITLAB_TOKEN&lt;/code&gt;&amp;nbsp;is a custom project level access token. Assuming you have all your Ansible roles under&amp;nbsp;&lt;code&gt;gitlab.instance/ansible&lt;/code&gt;&amp;nbsp;the token would be created on the&amp;nbsp;&lt;code&gt;ansible&lt;/code&gt;&amp;nbsp;group level (see&amp;nbsp;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/deploy_tokens/#group-deploy-token&quot;&gt;official Gitlab documentation&lt;/a&gt;).&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/12/30-replace-git-ur-ls-in-gitlab-ci/index.md#full-gitlab-ci-example&quot;&gt;&lt;/a&gt;Full gitlab-ci example&lt;/h2&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;variables:
  GITLAB_TOKEN:
    description: &quot;Token used to authenticate with the Ansible group in Gitlab&quot;
  GITLAB_USER:
    description: &quot;User associated with the GITLAB_TOKEN. Can be set during creation&quot;
    value: &quot;gitlab-ci-ansible&quot;

stages:
  - deploy

deploy-ansible:
  image: my/ansible-container
  stage: deploy
  script:
    - git config --global url.&quot;https://${GITLAB_USER}:${GITLAB_TOKEN}@gitlab.instance/&quot;.insteadOf &quot;git@gitlab.instance:&quot;
    - ansible --version
    - ansible-galaxy install -r requirements.yml -p roles --force
    - ansible-playbook site.yml&lt;/pre&gt;



&lt;p&gt;This config will run the configuration step, then print the ansible version, install the requirements, and finally runs the&amp;nbsp;&lt;code&gt;site.yml&lt;/code&gt;&amp;nbsp;playbook. The requirements can now be installed from private Gitlab repositories, and the Ansible run finishes successfully!&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/12/30-replace-git-ur-ls-in-gitlab-ci/index.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://docs.gitlab.com/ee/user/project/deploy_tokens/#group-deploy-token&quot;&gt;Gitlab Documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Proxy websocket connections with Apache2</title>
        <link href="blog/2021/06/proxy-websocket-connections-with-apache2/" />
        <updated>2021-06-24T09:52:00</updated>
        <id>https://kevin.gimbel.dev/blog/2021/06/proxy-websocket-connections-with-apache2/</id>
        <content xml:lang="en" type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;How to configure Apache2 to pass through web socket connections&lt;/h2&gt;



&lt;p&gt;Recently I had to adjust an Apache Virtual Host to allow proxying of Web Socket requests to a service running on localhost which would also accept HTTP requests on the same port.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/24-proxy-websocket-connections-with-apache2/index.md#the-problem&quot;&gt;&lt;/a&gt;The problem&lt;/h2&gt;



&lt;p&gt;The service in question was&amp;nbsp;&lt;a href=&quot;https://grafana.com/oss/loki/&quot;&gt;Loki&lt;/a&gt;, the&amp;nbsp;&lt;em&gt;&amp;#8220;Prometheus, but for logs&amp;#8221;&lt;/em&gt;&amp;nbsp;from Grafana. At&amp;nbsp;&lt;a href=&quot;https://synoa.de/&quot;&gt;Synoa&lt;/a&gt;&amp;nbsp;we&amp;#8217;ve grown to love Prometheus and Grafana, so the choice to do our centralized log management with Loki came naturally; Especially since Loki is a lot simpler in its architecture and easier to operate with a small ops team; But that&amp;#8217;s stuff for another blog post. üôÇ&lt;/p&gt;



&lt;p&gt;Without the Socket proxy the &amp;#8220;Live View&amp;#8221; on incoming logs and the &amp;#8220;Show Context&amp;#8221; button which shows surrounding lines of a log in Grafana didn&amp;#8217;t work; Since I&amp;#8217;ve had no experience with Web Sockets it took some time to figure out that the problem was the sockets didn&amp;#8217;t reach the backend service running on&amp;nbsp;&lt;code&gt;127.0.0.1:3000&lt;/code&gt;&amp;nbsp;behind Apache2.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/24-proxy-websocket-connections-with-apache2/index.md#the-solution&quot;&gt;&lt;/a&gt;The solution&lt;/h2&gt;



&lt;p&gt;The solution was to configure Apache so it would proxy the web socket request to the websocket service (&lt;code&gt;ws://127.0.0.1:3000/&lt;/code&gt;) explicitly if the request is marked as such with the&amp;nbsp;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Upgrade&quot;&gt;&lt;code&gt;Upgrade&lt;/code&gt;&lt;/a&gt;&amp;nbsp;and&amp;nbsp;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Connection&quot;&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/a&gt;&amp;nbsp;headers.&lt;/p&gt;



&lt;p&gt;For this to work, we first need the&amp;nbsp;&lt;code&gt;proxy_wstunnel&lt;/code&gt;&amp;nbsp;module.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# Enable module on Ubuntu
$ sudo a2enmod proxy_wstunnel&lt;/pre&gt;



&lt;p&gt;Then, we can adjust the vhost configuration file to include a rewrite rule (lines 4 to 7):&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;&amp;lt;VirtualHost *:443&amp;gt;
  ServerName my.server.tld
  SSLEngine On

  RewriteEngine On
  RewriteCond %{HTTP:Upgrade} websocket &amp;#91;NC]
  RewriteCond %{HTTP:Connection} upgrade &amp;#91;NC]
  RewriteRule ^/?(.*) &quot;ws://127.0.0.1:3000/$1&quot; &amp;#91;P,L]

  ProxyPreserveHost On
  ProxyPass / http://127.0.0.1:3000/
  ProxyPassReverse / http://127.0.0.1:3000/
  ProxyRequests off
&amp;lt;/VirtualHost&amp;gt;
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;After making these changes and reloading Apache2, the Grafana Live Log view and Loki &amp;#8220;Show Context&amp;#8221; function was working again.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/24-proxy-websocket-connections-with-apache2/index.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&amp;#8220;&lt;a href=&quot;https://noqqe.de/blog/2018/04/21/apache2-websockets/&quot;&gt;Apache2 Websockets&lt;/a&gt;&amp;#8221; on noqqe.de (in German)&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://httpd.apache.org/docs/2.4/mod/mod_proxy_wstunnel.html&quot;&gt;mod_proxy_wstunnel module documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Validating variables in terraform</title>
        <link href="blog/2021/06/validating-variables-in-terraform/" />
        <updated>2021-06-11T09:55:00</updated>
        <id>https://kevin.gimbel.dev/blog/2021/06/validating-variables-in-terraform/</id>
        <content xml:lang="en" type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Finally, terraform can validate input variables!&lt;/h2&gt;



&lt;p&gt;With the 0.13 release terraform introduces input validation, and with the 1.0.0 releases it was stabilized! Before there was no way of validating variables other than checking their length or doing basic checks inside the code, for example in the&amp;nbsp;&lt;code&gt;locals.tf&lt;/code&gt;&amp;nbsp;file, and errors with variables mostly came to light during deployments. There was also no way of telling the user&amp;nbsp;&lt;em&gt;what&lt;/em&gt;&amp;nbsp;what wrong with a variable.&lt;/p&gt;



&lt;p&gt;Excited about this feature I took a deep-dive at work and implemented validation for all variables in our new infrastructure modules. This blog post will go over the possibilities of validations and how to implement them and how to combine multiple asserts. All code examples are&amp;nbsp;&lt;em&gt;practical&lt;/em&gt;&amp;nbsp;and no foo-bar-baz made-up code!&lt;/p&gt;



&lt;p&gt;Knowledge of terraform is not required, however you should be somewhat familiar with&amp;nbsp;&lt;a href=&quot;https://github.com/hashicorp/hcl&quot;&gt;HCL&lt;/a&gt;, the configuration language of terraform.&lt;/p&gt;



&lt;p class=&quot;has-contrast-color has-secondary-background-color has-text-color has-background has-link-color wp-elements-59c3d6777f2eba925f3d2bfe4cbe96fe&quot;&gt;All examples are available in a repo at¬†&lt;a href=&quot;https://github.com/KevinGimbel/blog-terraform-validation-example&quot;&gt;github.com/KevinGimbel/blog-terraform-validation-example&lt;/a&gt;. At times this post says &amp;#8220;To test this, run&amp;#8230;&amp;#8221;; All of these can be run against the code inside the example repo. To use the repo, follow these steps:&lt;br&gt;&lt;br&gt;$ &lt;code&gt;git clone https://github.com/KevinGimbel/blog-terraform-validation-example.git &lt;/code&gt;&lt;br&gt;&lt;code&gt;$ cd blog-terraform-validation-example &lt;/code&gt;&lt;br&gt;$ &lt;code&gt;terraform init&lt;/code&gt;&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#syntax-of-a-validation&quot;&gt;&lt;/a&gt;Syntax of a validation&lt;/h2&gt;



&lt;p&gt;All validations happen in the&amp;nbsp;&lt;code&gt;variables.tf&lt;/code&gt;&amp;nbsp;file where variables are defined. Inside the block defining a variable a new&amp;nbsp;&lt;code&gt;validation&lt;/code&gt;&amp;nbsp;block is placed:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;variable &quot;my_var&quot; {
  type = number
  default = 0

  validation {
    condition = var.my_var &amp;gt;= 0
    error_message = &quot;Please set my_var to a positive number or 0.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p class=&quot;has-contrast-color has-secondary-background-color has-text-color has-background&quot;&gt;Terraform requires the sentence to start with an uppercase letter and end with a dot.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#validating-the-length-of-a-string&quot;&gt;&lt;/a&gt;Validating the length of a string&lt;/h2&gt;



&lt;p&gt;The following defines a variable named&amp;nbsp;&lt;code&gt;hetzner_api_token&lt;/code&gt;&amp;nbsp;that represents a&amp;nbsp;&lt;a href=&quot;https://hetzner.cloud/&quot;&gt;Hetzner Cloud&lt;/a&gt;&amp;nbsp;API token.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;# file: variables.tf
variable &quot;hetzner_api_token&quot; {
  type        = string
  description = &quot;Hetzner API token&quot;
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;If somebody would specify&amp;nbsp;&lt;code&gt;hetzner_api_token = &quot;&quot;&lt;/code&gt;&amp;nbsp;the variable would be defined as far as terraform is concerned and terraform would start deploying until it reaches a point where the missing token causes an issue; To prevent this we can apply validations like so&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;&quot; class=&quot;&quot;&gt;# file: variables.tf
variable &quot;hetzner_api_token&quot; {
  type        = string
  description = &quot;Hetzner API token&quot;

  validation {
    condition     = length(var.hetzner_api_token) == 64
    error_message = &quot;Must be a 64 character long Hetzner API token.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This validates that the variable is set AND is exactly 64 characters long, which is the length of Hetzner Cloud API tokens.&lt;/p&gt;



&lt;p&gt;To test this, run&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;# Shows no error and logs the configured token
terraform apply -target=null_resource.validate_hetzner_api_token
# Invalid, shows error message
terraform apply -target=null_resource.validate_hetzner_api_token -var &quot;hetzner_api_token=xxx&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#advanced-validation-with-regex&quot;&gt;&lt;/a&gt;Advanced validation with regex&lt;/h2&gt;



&lt;p&gt;Checking the&amp;nbsp;&lt;code&gt;length&lt;/code&gt;&amp;nbsp;might be helpful for simple assertions but sometimes more advanced checks are needed. This is where regex comes into play. To use regex terraform provides the&amp;nbsp;&lt;code&gt;can&lt;/code&gt;&amp;nbsp;function.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;variable &quot;server_role_arn&quot; {
  type        = string
  description = &quot;AWS arn of the role to assign to servers&quot;

  validation {
    condition     = can(regex(&quot;^arn:aws:iam::[[:digit:]]{12}:role/.+&quot;, var.server_role_arn))
    error_message = &quot;Must be a valid AWS IAM role ARN.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This validation fails if the provides string doesn&amp;#8217;t match the format of an&amp;nbsp;&lt;em&gt;AWS IAM role ARN&lt;/em&gt;. This means it will also fail if an ARN is provided that matches a user, like&amp;nbsp;&lt;code&gt;arn:aws:iam::012345678912:user/kevin&lt;/code&gt;! The&amp;nbsp;&lt;code&gt;[[:digit:]]{12}&lt;/code&gt;&amp;nbsp;checks for exactly 12 digits, it&amp;#8217;s equal to&amp;nbsp;&lt;code&gt;&#92;d{12}&lt;/code&gt;&amp;nbsp;in other regex engines.&amp;nbsp;&lt;code&gt;.+&lt;/code&gt;&amp;nbsp;at the end matches any character one or more times.&lt;/p&gt;



&lt;p&gt;To test this, run&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;terraform apply
# Invalid, shows error message
terraform apply -target=null_resource.validate_server_role_arn
terraform apply -target=null_resource.validate_server_role_arn -var &quot;server_role_arn=arn:aws:iam::012345678912:user/kevin&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;‚îÇ Error: Invalid value for variable
‚îÇ 
‚îÇ   on variables.tf line 1:
‚îÇ    1: variable &quot;server_role_arn&quot; {
‚îÇ 
‚îÇ Must be a valid AWS IAM role ARN.
‚îÇ 
‚îÇ This was checked by the validation rule at variables.tf:5,3-13.
&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#multiple-conditions&quot;&gt;&lt;/a&gt;Multiple conditions&lt;/h2&gt;



&lt;p&gt;Validations can have more than one condition. Conditions are grouped together with the&amp;nbsp;&lt;code&gt;alltrue&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;anytrue&lt;/code&gt;&amp;nbsp;functions, which take a list of conditions and returns&amp;nbsp;&lt;code&gt;true&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;variable &quot;env&quot; {
  type        = string
  description = &quot;Environment to deploy, can be production, staging, development, or test.&quot;

  validation {
    condition = anytrue([
      var.env == &quot;production&quot;,
      var.env == &quot;staging&quot;,
      var.env == &quot;development&quot;,
      var.env == &quot;test&quot;
    ])
    error_message = &quot;Must be a valid env, can be production, staging, development, or test.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;To test this, run&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;# valid 
terraform apply -target=null_resource.validate_env
# Invalid 
terraform apply -target=null_resource.validate_env -var &quot;env=prod&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#multiple-nested-conditions&quot;&gt;&lt;/a&gt;Multiple, nested conditions&lt;/h2&gt;



&lt;p&gt;&lt;code&gt;alltrue&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;anytrue&lt;/code&gt;&amp;nbsp;can be nested! The next example validates the variable is a legit Hetzner Server type identifier, without requiring any regex magic!&amp;nbsp;ü•∏&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;variable &quot;hetzner_server_type&quot; {
  type        = string
  description = &quot;Server type to use, see https://www.hetzner.com/cloud#pricing&quot;
  default     = &quot;cx21&quot;

  validation {
    condition = alltrue([
      anytrue([
        can(regex(&quot;cx*&quot;, var.hetzner_server_type)),
        can(regex(&quot;cpx*&quot;, var.hetzner_server_type)),
        can(regex(&quot;ccx*&quot;, var.hetzner_server_type))
      ]),
      anytrue([
        length(var.hetzner_server_type) == 5,
        length(var.hetzner_server_type) == 4
      ])
    ])
    error_message = &quot;Must be a valid Hetzner server type, e.g. cx21, cx11, ccx22 see https://www.hetzner.com/cloud#pricing for available options.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;It checks that both of these are true:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;The variable starts with&amp;nbsp;&lt;code&gt;cx&lt;/code&gt;,&amp;nbsp;&lt;code&gt;cpx&lt;/code&gt;, or&amp;nbsp;&lt;code&gt;ccx&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;The variable is 4 or 5 characters long&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;To test this, run&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;# valid 
terraform apply -target=null_resource.validate_hetzner_server_type
# invalid, shows validation error
terraform apply -target=null_resource.validate_hetzner_server_type -var &quot;hetzner_server_type=nope&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#validating-elements-in-a-list&quot;&gt;&lt;/a&gt;Validating elements in a list&lt;/h2&gt;



&lt;p&gt;Lastly, using a&amp;nbsp;&lt;code&gt;for&lt;/code&gt;&amp;nbsp;loop entries inside of a list can be validated.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;variable &quot;hetzner_datacenters&quot; {
  type        = list(string)
  description = &quot;List of datacenter identifier into which the server can be launched, chosen at random&quot;
  default     = [&quot;nbg1&quot;, &quot;fsn1&quot;]

  validation {
    condition = alltrue([
      for dc in var.hetzner_datacenters : contains([&quot;nbg1&quot;, &quot;fsn1&quot;, &quot;hel1&quot;], dc)
    ])
    error_message = &quot;Must one or more of: &#39;nbg1&#39;, &#39;fsn1&#39;, or &#39;hel1&#39; - no other value is allowed.&quot;
  }
}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Right now Hetzner has three datacenter locations, two in Germany (N√ºrnberg (&lt;code&gt;nbg1&lt;/code&gt;) and Falkenstein (&lt;code&gt;fsn1&lt;/code&gt;)) and one in Finland (Helsinki (&lt;code&gt;hel1&lt;/code&gt;)), so validating them is doable; for AWS, GPC, or Azure this would be a lot harder and require regex instead.&lt;/p&gt;



&lt;p&gt;To test this, run&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code lang=&quot;bash&quot; class=&quot;language-bash&quot;&gt;# valid 
terraform apply -target=null_resource.validate_hetzner_datacenters
# invalid, shows validation error
terraform apply -target=null_resource.validate_hetzner_datacenters -var &#39;hetzner_datacenters=[&quot;fsn1&quot;, &quot;lax1&quot;]&#39; &lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;Using the shown functions like&amp;nbsp;&lt;code&gt;regex&lt;/code&gt;,&amp;nbsp;&lt;code&gt;length&lt;/code&gt;&amp;nbsp;and loops we can validate a variable has a certain value or follows a certain format.&lt;/p&gt;



&lt;p&gt;With&amp;nbsp;&lt;code&gt;anytrue&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;alltrue&lt;/code&gt;&amp;nbsp;we can group together multiple validations so that either all or one of multiple conditions must match.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/11-validating-variables-in-terraform/index.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/language/values/variables.html&quot;&gt;Terraform variable documentation&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/language/functions/can.html&quot;&gt;Terraform&amp;nbsp;&lt;code&gt;can&lt;/code&gt;&amp;nbsp;function&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://www.terraform.io/docs/language/functions/regex.html&quot;&gt;Terraform&amp;nbsp;&lt;code&gt;regex&lt;/code&gt;&amp;nbsp;function&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Darken and Lighten colors with CSS</title>
        <link href="blog/2021/06/darken-and-lighten-colors-with-css/" />
        <updated>2021-06-08T09:54:00</updated>
        <id>https://kevin.gimbel.dev/blog/2021/06/darken-and-lighten-colors-with-css/</id>
        <content xml:lang="en" type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Recreating SASS darken() &amp;amp; lighten() function with CSS variables and calc&lt;/h2&gt;



&lt;p&gt;The technique shown in this post uses the&amp;nbsp;&lt;code&gt;hsl&lt;/code&gt;&amp;nbsp;color format in combination with the&amp;nbsp;&lt;code&gt;calc&lt;/code&gt;&amp;nbsp;CSS function to calculate darker or lighter shades of a base color.&lt;/p&gt;



&lt;p&gt;Before we get into the code I want to make sure&amp;nbsp;&lt;strong&gt;I did not come up with this&lt;/strong&gt;, I found the code on&amp;nbsp;&lt;a href=&quot;https://stackoverflow.com/a/55330103&quot;&gt;StackOverflow&lt;/a&gt;&amp;nbsp;and only want to write about it to keep it on my site for future reference! üôÇ&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/08-darken-and-lighten-colors-with-css/index.md#the-code&quot;&gt;&lt;/a&gt;The code&lt;/h2&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;:root {
  --color: 0, 100%; 
  --l:50%;
    
  --color-primary: hsl(var(--color),var(--l));
  --color-primary-darker: hsl(var(--color),calc(var(--l) - 10%));
  --color-primary-darkest: hsl(var(--color),calc(var(--l) - 30%)); 
}&lt;/pre&gt;



&lt;p&gt;Here we define a color variable named&amp;nbsp;&lt;code&gt;--color&lt;/code&gt;&amp;nbsp;that holds the first two values of a&amp;nbsp;&lt;code&gt;hsl&lt;/code&gt;&amp;nbsp;color definition: The&amp;nbsp;&lt;em&gt;hue&lt;/em&gt;&amp;nbsp;and&amp;nbsp;&lt;em&gt;saturation&lt;/em&gt;&amp;nbsp;value. The third value,&amp;nbsp;&lt;em&gt;lightness&lt;/em&gt;&amp;nbsp;is calculated based on the default lightness value (&lt;code&gt;--l&lt;/code&gt;).&lt;/p&gt;



&lt;p&gt;The&amp;nbsp;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl()&quot;&gt;HSL color function&lt;/a&gt;&amp;nbsp;takes three values:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;H&lt;/strong&gt;&amp;nbsp;is the&amp;nbsp;&lt;code&gt;hue&lt;/code&gt;, a number from 0 to 360&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt;&amp;nbsp;is the&amp;nbsp;&lt;code&gt;saturation&lt;/code&gt;, in percent 0 to 100&lt;/li&gt;



&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt;&amp;nbsp;is the&amp;nbsp;&lt;code&gt;lightness&lt;/code&gt;, in percent from 0 to 100&lt;/li&gt;
&lt;/ul&gt;



&lt;p&gt;The lightness can be increased to make the color lighter and decreased to make it darker.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/08-darken-and-lighten-colors-with-css/index.md#the-result&quot;&gt;&lt;/a&gt;The result&lt;/h2&gt;



&lt;p&gt;{% codepen &amp;#8220;jOBKjar&amp;#8221; %}&lt;/p&gt;



&lt;p&gt;We can also apply the variables on a class level instead of the&amp;nbsp;&lt;code&gt;:root&lt;/code&gt;&amp;nbsp;element so they are calculated every time the class is used, which enables &amp;#8220;theming&amp;#8221;, as the following CodePen shows.&lt;/p&gt;



&lt;p&gt;The&amp;nbsp;&lt;code&gt;green&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;blue&lt;/code&gt;&amp;nbsp;class set different values for&amp;nbsp;&lt;code&gt;--color&lt;/code&gt;, therefore changing the values of&amp;nbsp;&lt;code&gt;--color-primary&lt;/code&gt;,&amp;nbsp;&lt;code&gt;--color-primary-darker&lt;/code&gt;, and&amp;nbsp;&lt;code&gt;--color-primary-darkest&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;{% codepen &amp;#8220;zYZaVPp&amp;#8221; %}&lt;/p&gt;



&lt;p&gt;Below is the new CSS code.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;:root {
  --color: 0, 100%;
  --l:50%; /*the initial lightness*/
}

.darken {
  --color-primary: hsl(var(--color),var(--l));
  --color-primary-darker: hsl(var(--color),calc(var(--l) - 10%));
  --color-primary-darkest: hsl(var(--color),calc(var(--l) - 30%)); 
  
  color: var(--color-primary-darkest);
  background: var(--color-primary);
}

.green {
  --color:120, 50%;
}

.blue {
  --color:245, 60%;
  --l: 80%;
}&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/08-darken-and-lighten-colors-with-css/index.md#lighten&quot;&gt;&lt;/a&gt;lighten&lt;/h2&gt;



&lt;p&gt;The&amp;nbsp;&lt;code&gt;lighten&lt;/code&gt;&amp;nbsp;function works in the same way, just that it would increase the lightness instead of decreasing it.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;.lighten {
  --color: 0, 100%; 
  --l:50%;
    
  --color-primary: hsl(var(--color),var(--l));
  --color-primary-lighter: hsl(var(--color),calc(var(--l) + 10%));
  --color-primary-lightest: hsl(var(--color),calc(var(--l) + 30%)); 
}&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/08-darken-and-lighten-colors-with-css/index.md#browser-support&quot;&gt;&lt;/a&gt;Browser Support&lt;/h2&gt;



&lt;p&gt;Just for completeness, here&amp;#8217;s the Browser support. It&amp;#8217;s looking&amp;nbsp;&lt;em&gt;pretty good&lt;/em&gt;&amp;nbsp;with over 90% for both features used (as of June 2021).&lt;/p&gt;



&lt;p&gt;{% caniuse &amp;#8220;calc&amp;#8221; %} {% caniuse &amp;#8220;css-variables&amp;#8221; %}&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/06/08-darken-and-lighten-colors-with-css/index.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/hsl()&quot;&gt;hsl on MDN&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;Example Pen 1&amp;nbsp;&lt;a href=&quot;https://codepen.io/kevingimbel/pen/jOBKjar&quot;&gt;codepen.io/kevingimbel/pen/jOBKjar&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;Example Pen 2&amp;nbsp;&lt;a href=&quot;https://codepen.io/kevingimbel/pen/zYZaVPp&quot;&gt;codepen.io/kevingimbel/pen/zYZaVPp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>First steps with Traefik 2</title>
        <link href="blog/2021/05/first-steps-with-traefik-2/" />
        <updated>2021-05-21T10:06:00</updated>
        <id>https://kevin.gimbel.dev/blog/2021/05/first-steps-with-traefik-2/</id>
        <content xml:lang="en" type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;A tale of Auto SSL, Basic Auth, and lots of debugging&lt;/h2&gt;



&lt;p&gt;Recently I&amp;#8217;ve spent some time at work trying out&amp;nbsp;&lt;a href=&quot;https://traefik.io/&quot;&gt;Traefik 2&lt;/a&gt;&amp;nbsp;and learning about the new concepts like routers and middleware since we&amp;#8217;ll use Traefik 2 as part of some new infrastructure.&lt;/p&gt;



&lt;p&gt;We&amp;#8217;ve used Traefik 1 in production at Synoa for the past 3 years. Initially I chose Traefik because it was easy to integrate with Kubernetes and later on with Amazon ECS when we moved to it from Kubernetes. Traefik has always served us well and I felt very confident deploying it to production. We tried an unreleased version of Traefik 2 with ECS support in the past but so far had no time to update every system to the new version. Since we are in the process of creating a new product with completely new infrastructure I decided to include Traefik 2 from the start.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#the-stack&quot;&gt;&lt;/a&gt;The stack&lt;/h2&gt;



&lt;p&gt;Before we start with any technical stuff, let&amp;#8217;s talk about the stack everything runs on for a second. The infrastructure is planned with simplicity and &amp;#8220;small-scale&amp;#8221; in mind. We&amp;nbsp;&lt;strong&gt;do not need&lt;/strong&gt;&amp;nbsp;a big cluster setup with thousands of servers (or even with tenths of servers), no orchestrator like Kubernetes (or ECS, Mesos/Marathon, &amp;#8230;) and we have predictable workloads. There&amp;#8217;s no need to suddenly scale up to hundreds or thousands of containers, nor will there be a requirements to scale without it being planned ahead.&lt;/p&gt;



&lt;p&gt;All my testing in this case was done on a small&amp;nbsp;&lt;a href=&quot;https://hetzner.cloud/&quot;&gt;Hetzner Cloud&lt;/a&gt;&amp;nbsp;server running standalone Docker with no orchestrator.&lt;/p&gt;



&lt;p&gt;I may write more about small-scale cloud (infra), but not today. üôÇ&lt;/p&gt;



&lt;p&gt;The goals we hope to archive with Traefik are:&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;Handle all traffic on port&amp;nbsp;&lt;code&gt;80&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;443&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;Redirect from port&amp;nbsp;&lt;code&gt;80&lt;/code&gt;&amp;nbsp;to&amp;nbsp;&lt;code&gt;443&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;Auto-SSL for port&amp;nbsp;&lt;code&gt;443&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;Auto-SSL for all sub-domains like&amp;nbsp;&lt;code&gt;service-1.my.tld&lt;/code&gt;,&amp;nbsp;&lt;code&gt;service-2.my.tld&lt;/code&gt;, &amp;#8230;&lt;/li&gt;



&lt;li&gt;Basic Auth for all exposed services, preferably by default and without extra config&lt;/li&gt;



&lt;li&gt;Traefik Dashboard with basic auth&lt;/li&gt;



&lt;li&gt;Prometheus metrics with basic auth&lt;/li&gt;
&lt;/ul&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#gotchas&quot;&gt;&lt;/a&gt;Gotchas&lt;/h2&gt;



&lt;p&gt;{% note &amp;#8220;info&amp;#8221; %}&amp;nbsp;&lt;strong&gt;Head&amp;#8217;s up!&lt;/strong&gt;&amp;nbsp;This post is about Traefik 2, specifically version 2.4! I am using the TOML file format for this post, but anything mentioned here applies to YAML or other config sources as well. {% endnote %}&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#where-to-configure-what&quot;&gt;&lt;/a&gt;Where to configure what??&lt;/h3&gt;



&lt;p&gt;Traefik has a &amp;#8220;main&amp;#8221; config file, usually named&amp;nbsp;&lt;code&gt;traefik.toml&lt;/code&gt;, where general config is placed in. This includes providers, default entry points (ports like 80, 443, &amp;#8230;), log level configuration, the dashboard and API, &amp;#8230; however there&amp;#8217;s stuff that&amp;nbsp;&lt;em&gt;cannot be in this file&lt;/em&gt;. Namely, any&amp;nbsp;&lt;a href=&quot;https://doc.traefik.io/traefik/middlewares/overview/&quot;&gt;middleware&lt;/a&gt;&amp;nbsp;config!&lt;/p&gt;



&lt;p&gt;I didn&amp;#8217;t know that and it took me quite some time to figure it out. In the end I found a forum post that said middleware has to be in another file, which must be loaded in the main configuration using the&amp;nbsp;&lt;a href=&quot;https://doc.traefik.io/traefik/providers/file/&quot;&gt;file provider&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;This means the following config is&amp;nbsp;&lt;strong&gt;Invalid&lt;/strong&gt;:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml

[http.middlewares.my-atuh.basicAuth]
usersFile=&quot;/etc/traefik/.htpasswd&quot;&lt;/pre&gt;



&lt;p&gt;The middleware named&amp;nbsp;&lt;code&gt;my-auth&lt;/code&gt;&amp;nbsp;will not work and cannot be accessed as&amp;nbsp;&lt;code&gt;my-auth@file&lt;/code&gt;. Instead we need to put it into a second file like so:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml
# enable file provider
[providers.file]
directory=&quot;/etc/traefik/config.d/&quot;&lt;/pre&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# /etc/traefik/config.d/middlewares.toml
[http.middlewares.my-atuh.basicAuth]
usersFile=&quot;/etc/traefik/.htpasswd&quot;&lt;/pre&gt;



&lt;p&gt;Now the middleware is usable by specifying a Docker label like&amp;nbsp;&lt;code&gt;traefik.http.routers.my-container.middlewares=my-auth@file&lt;/code&gt;&lt;/p&gt;



&lt;h4 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#summary-config-files&quot;&gt;&lt;/a&gt;Summary: config files&lt;/h4&gt;



&lt;ul&gt;
&lt;li&gt;Middleware cannot be configured in the main config file&lt;/li&gt;



&lt;li&gt;Any&amp;nbsp;&lt;code&gt;X@file&lt;/code&gt;&amp;nbsp;middleware must be in a separate config file&lt;/li&gt;



&lt;li&gt;The file provider must be enabled with&amp;nbsp;&lt;code&gt;[providers.file]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#providers-must-be-enabled-explicitly&quot;&gt;&lt;/a&gt;Providers must be enabled explicitly&lt;/h3&gt;



&lt;p&gt;In the previous section we saw that we can specify&amp;nbsp;&lt;code&gt;[providers.file]&lt;/code&gt;&amp;nbsp;to configure the file provider. What I didn&amp;#8217;t know when I started digging into Traefik 2 is that&amp;nbsp;&lt;strong&gt;each provider that should be used MUST be added to the config file, even if no special config is needed&lt;/strong&gt;!&lt;/p&gt;



&lt;p&gt;So in order to use the docker provider, which reads Docker labels from containers, we need to add the following:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml
[providers.docker]&lt;/pre&gt;



&lt;p&gt;That&amp;#8217;s it. I spent literal hours debugging why Traefik return a &amp;#8220;404 not found&amp;#8221; for every request and didn&amp;#8217;t seem to pickup the containers I deployed, only to discover the provider&amp;nbsp;&lt;strong&gt;must be in the config file to enable it&lt;/strong&gt;, even without any special config values.&lt;/p&gt;



&lt;p&gt;One may wonder why an empty config is required and it does look a bit weird, even more so in YAML:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;providers:
  docker:&lt;/pre&gt;



&lt;p&gt;But it all makes sense when we think about the Traefik command line arguments, where a provider is enabled by setting&amp;nbsp;&lt;code&gt;--providers.docker&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;--providers.file&lt;/code&gt;. From a Traefik point of view the provider config acts as a boolean-ish thing: Is the provider there? If so, it is enabled. The more explicit alternative could be:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml (PSEUDO code, not working)
[providers]
  [providers.docker]
    enabled=true
  [providers.file]
    enabled=true&lt;/pre&gt;



&lt;p&gt;But then again, this would be pretty redundant.&lt;/p&gt;



&lt;p&gt;In hindsight it&amp;#8217;s logical and makes sense, but at the time I was biting my teeth and cussing at Traefik. Well, in the end it was&amp;nbsp;&lt;del&gt;DNS&lt;/del&gt;&amp;nbsp;human error.&lt;/p&gt;



&lt;h4 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#summary-providers&quot;&gt;&lt;/a&gt;Summary: providers&lt;/h4&gt;



&lt;ul&gt;
&lt;li&gt;Providers are enabled by adding a config like&amp;nbsp;&lt;code&gt;[providers.file]&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;[providers.docker]&lt;/code&gt;&amp;nbsp;into&amp;nbsp;&lt;code&gt;traefik.toml&lt;/code&gt;&lt;/li&gt;



&lt;li&gt;Even with no additional config it must be added or Traefik must be started with&amp;nbsp;&lt;code&gt;--providers.x&lt;/code&gt;&amp;nbsp;flag&lt;/li&gt;
&lt;/ul&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#ssl-certificates&quot;&gt;&lt;/a&gt;SSL Certificates&lt;/h3&gt;



&lt;p&gt;Traefik can automatically register certificates with Let&amp;#8217;s Encrypt. This is incredibly helpful when deploying Traefik in an automated setup because it means there&amp;#8217;s no need for any other tool to handle SSL, like an API call to AWS Certificate Manager or a manual setup where certificates are requested once the server is up and running. In our current setup, once the server is started it briefly uses an invalid self-signed default certificate and once the Let&amp;#8217;s Encrypt certificates are ready Traefik uses them.&lt;/p&gt;



&lt;p&gt;In order to generate SSL certificates we need to define a Certificate Resolver, like so:&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml
[certificateresolver.my-resolver.acme]
storage = &quot;/srv/docker/traefik/config/acme.json&quot;
email = &quot;totally@valid.email&quot;
[certificateresolver.my-resolver.acme.httpChallenge]
entryPoint = &quot;web&quot;&lt;/pre&gt;



&lt;p&gt;That&amp;#8217;s it. Now the resolver can be used in a router or entrypoint configuration. If used in an Entrypoint configuration, all routers that use this entry point will have SSL enabled.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml
[entryPoints.websecure]
  address = &quot;:443&quot;
  [entryPoints.websecure.http.tls]
    certResolver = &quot;my-resolver&quot;&lt;/pre&gt;



&lt;p&gt;And again, that&amp;#8217;s it. We tell the entrypoint named&amp;nbsp;&lt;code&gt;websecure&lt;/code&gt;&amp;nbsp;to use the certificate resolver named&amp;nbsp;&lt;code&gt;my-resolver&lt;/code&gt;&amp;nbsp;which we defined in the step before.&lt;/p&gt;



&lt;p&gt;To backup the certificates the file specified under&amp;nbsp;&lt;code&gt;storage&lt;/code&gt;&amp;nbsp;is all that&amp;#8217;s needed, because it contains all the certificates and keys.&lt;/p&gt;



&lt;h3 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#automatic-basic-auth&quot;&gt;&lt;/a&gt;Automatic basic auth&lt;/h3&gt;



&lt;p&gt;Middlewares can also be used to enable defaults for an entrypoint, the following example tells every router that uses&amp;nbsp;&lt;code&gt;websecure&lt;/code&gt;&amp;nbsp;to use the&amp;nbsp;&lt;code&gt;my-auth@file&lt;/code&gt;&amp;nbsp;middleware (which we defined in the first section!)&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;# traefik.toml
[entryPoints.websecure]
    address = &quot;:443&quot;
    [entryPoints.websecure.http.tls]
      certResolver = &quot;my-resolver&quot;
    [entryPoints.websecure.http]
      middlewares = [ &quot;my-auth@file&quot; ]&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/05/21-first-steps-with-traefik-2/index.md#conclusion&quot;&gt;&lt;/a&gt;Conclusion&lt;/h2&gt;



&lt;p&gt;Despite some hiccups in the beginning and some frustration I&amp;#8217;m still confident in my choice. Traefik is a great proxy and does everything we need. It integrates with lots of different providers and the Docker provider is the absolute simplest to run, since it doesn&amp;#8217;t require any orchestrator &amp;#8211; just Docker labels on containers.&lt;/p&gt;



&lt;p&gt;I&amp;#8217;m looking forward to dig deeper into Traefik, especially getting more familiar with&amp;nbsp;&lt;a href=&quot;https://doc.traefik.io/traefik/plugins/&quot;&gt;Plugins&lt;/a&gt;!&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>TIL: Dots in /etc/sudoers.d filenames</title>
        <link href="blog/2021/05/gotcha-dots-in-etc-sudoers-d-filenames/" />
        <updated>2021-05-17T10:09:00</updated>
        <id>https://kevin.gimbel.dev/blog/2021/05/gotcha-dots-in-etc-sudoers-d-filenames/</id>
        <content xml:lang="en" type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;A tale of facepalms&lt;/h2&gt;



&lt;p&gt;While reviewing some Ansible modules with a colleague we stumbled upon an issue with our user creation module, and for a briefe time couldn&amp;#8217;t understand what was going on.&lt;/p&gt;



&lt;p&gt;The module in question creates multiple Linux users, adds them to groups, and enables some to use password less sudo via the&amp;nbsp;&lt;code&gt;/etc/sudoers.d&lt;/code&gt;&amp;nbsp;config directory. For some reasons after we logged in with the newly created users, they were not able to use sudo without entering passwords.&lt;/p&gt;



&lt;p&gt;We checked the directory and all files were there, just as expected. The content of the files was also OK for every user, yet none could use sudo without entering a password.&lt;/p&gt;



&lt;p&gt;After some time I wondered if the dot in the filename may be the problem, since the files were named like&amp;nbsp;&lt;code&gt;passwordless_sudo_kevin.gimbel&lt;/code&gt;&amp;nbsp;but this couldn&amp;#8217;t be it, right? Wrong.&amp;nbsp;&lt;a href=&quot;https://www.sudo.ws/man/1.8.15/sudoers.man.html#Including_other_files_from_within_sudoers&quot;&gt;That&amp;#8217;s the problem&lt;/a&gt;, quote from the sudo man page:&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
&lt;p&gt;sudo will read each file in /etc/sudoers.d, skipping file names that end in ‚Äò~‚Äô or contain a ‚Äò.‚Äô character to avoid causing problems with package manager or editor temporary/backup files.&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;And that&amp;#8217;s why sudo config files cannot contain dots. Questionable, but that&amp;#8217;s how it is.&amp;nbsp;ü§∑&lt;/p&gt;



&lt;p&gt;Our solution was to strip out any dots using regex, since the Ansible role can potentially support any amount of users and we cannot control what names will be used.&lt;/p&gt;
</content>
    </entry>
    <entry>
        <title>Wildcards in Prometheus queries</title>
        <link href="blog/2021/02/wildcards-in-prometheus-queries/" />
        <updated>2021-02-09T10:02:00</updated>
        <id>https://kevin.gimbel.dev/blog/2021/02/wildcards-in-prometheus-queries/</id>
        <content xml:lang="en" type="html">
&lt;h2 class=&quot;wp-block-heading&quot;&gt;Learn how to query data in Prometheus and how to use wildcards&lt;/h2&gt;



&lt;p&gt;Hello and welcome to this &amp;#8220;snippet-sized&amp;#8221; post about&amp;nbsp;&lt;a href=&quot;https://prometheus.io/&quot;&gt;Prometheus&lt;/a&gt;&amp;nbsp;queries! Prometheus is a time-series database which means it is build to collect a lot of datasets that show values over time, for example the result of a HTTP request or the RAM usage of a server. At&amp;nbsp;&lt;a href=&quot;https://synoa.de/&quot;&gt;Synoa&lt;/a&gt;&amp;nbsp;we use Prometheus to monitor the health of our APIs and systems. I won&amp;#8217;t go into how Prometheus is setup, that&amp;#8217;s stuff for a different article, but instead this article focuses on&amp;nbsp;&lt;em&gt;how to query data with wildcards in Prometheus&lt;/em&gt;, using Prometheus own query language.&lt;/p&gt;



&lt;p&gt;First we need to define a bit of test data. Assume we have the following datasets in Prometheus:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code has-tiny-font-size&quot;&gt;&lt;code&gt;http_status{job=&quot;customer-dev&quot;,instance=&quot;https://dev.some-api.link/service-a&quot;,env=&quot;dev&quot;}
http_status{job=&quot;customer-dev&quot;,instance=&quot;https://dev.some-api.link/service-b&quot;,env=&quot;dev&quot;}
http_status{job=&quot;customer-dev&quot;,instance=&quot;https://dev.some-api.link/service-c&quot;,env=&quot;dev&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-a&quot;,env=&quot;prd&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-b&quot;,env=&quot;prd&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-c&quot;,env=&quot;prd&quot;}
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Here we have 6 datasets describing&amp;nbsp;&lt;code&gt;service-a&lt;/code&gt;,&amp;nbsp;&lt;code&gt;service-b&lt;/code&gt;, and&amp;nbsp;&lt;code&gt;service-c&lt;/code&gt;&amp;nbsp;running in the PRD (production) and DEV (development) environment. To get all production services we could query like this:&lt;/p&gt;



&lt;p&gt;Prometheus Query&lt;/p&gt;



&lt;pre class=&quot;wp-block-code has-small-font-size&quot;&gt;&lt;code&gt;http_status{env=&quot;prd&quot;}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Result&lt;/p&gt;



&lt;pre class=&quot;wp-block-code has-tiny-font-size&quot;&gt;&lt;code&gt;http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-a&quot;,env=&quot;prd&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-b&quot;,env=&quot;prd&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-c&quot;,env=&quot;prd&quot;}
&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/02/09-prometheus-query-wildcard.md#wildcards-in-queries&quot;&gt;&lt;/a&gt;Wildcards in queries&lt;/h2&gt;



&lt;p&gt;Coming from MySQL you may think a wildcard could look like&amp;nbsp;&lt;code&gt;http_status{job=&quot;customer-*&quot;}&lt;/code&gt;, but that&amp;#8217;s not the case with Prometheus. Prometheus uses a Regex-like pattern and the wildcard character is&amp;nbsp;&lt;code&gt;.+&lt;/code&gt;&amp;nbsp;(read: dot plus) combined with tilde character (&lt;code&gt;~&lt;/code&gt;) instead of just the equal sign (&lt;code&gt;=&lt;/code&gt;). So the query becomes&amp;nbsp;&lt;code&gt;http_status{job~=&quot;customer-.+&quot;}&lt;/code&gt;. In the example below using the&amp;nbsp;&lt;code&gt;.+&lt;/code&gt;&amp;nbsp;wildcard character we search for metrics where the&amp;nbsp;&lt;code&gt;instance&lt;/code&gt;&amp;nbsp;label&amp;nbsp;&lt;em&gt;ends with service-c&lt;/em&gt;.&lt;/p&gt;



&lt;p&gt;{% note &amp;#8220;info&amp;#8221; %} Prometheus uses the tilde character&amp;nbsp;&lt;code&gt;~&lt;/code&gt;&amp;nbsp;to indicate a query contains a wildcard. Inside the label-query the &amp;#8220;dot plus&amp;#8221; (&lt;code&gt;.+&lt;/code&gt;) character combination is used where all characters are accepted. {% endnote %}&lt;/p&gt;



&lt;p&gt;Prometheus Query&lt;/p&gt;



&lt;pre class=&quot;wp-block-code has-small-font-size&quot;&gt;&lt;code&gt;http_status{instance=~&quot;.+service-c&quot;}&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Result&lt;/p&gt;



&lt;pre class=&quot;wp-block-code has-tiny-font-size&quot;&gt;&lt;code&gt;http_status{job=&quot;customer-dev&quot;,instance=&quot;https://dev.some-api.link/service-c&quot;,env=&quot;dev&quot;}
http_status{job=&quot;customer-prd&quot;,instance=&quot;https://some-api.link/service-c&quot;,env=&quot;prd&quot;}
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Depending on how your metrics are labels querying can be hard or easy. At Synoa I decided to include special labels like&amp;nbsp;&lt;code&gt;env&lt;/code&gt;,&amp;nbsp;&lt;code&gt;system&lt;/code&gt;, as well as &amp;#8220;good&amp;#8221;&amp;nbsp;&lt;code&gt;job&lt;/code&gt;&amp;nbsp;names. The&amp;nbsp;&lt;code&gt;job&lt;/code&gt;&amp;nbsp;label always has the format&amp;nbsp;&lt;code&gt;customer-env-system&lt;/code&gt;, e.g.&amp;nbsp;&lt;code&gt;customer-prd-magento&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;customer-env-ecs&lt;/code&gt;. If I want to get all customer metrics I query like&amp;nbsp;&lt;code&gt;http_status{job=&quot;customer-.+&quot;}&lt;/code&gt;, if I want to see all dev system metrics I can query for&amp;nbsp;&lt;code&gt;http_status{job=&quot;customer-dev-.+&quot;}&lt;/code&gt;, and so on!&lt;/p&gt;



&lt;p&gt;If you got a better label system or a&amp;nbsp;&lt;strong&gt;must-have label&lt;/strong&gt;&amp;nbsp;let me know&amp;nbsp;&lt;a href=&quot;https://fosstodon.org/@KevinGimbel&quot;&gt;on Mastodon @KevinGimbel@fosstodon.org&lt;/a&gt;.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2021/02/09-prometheus-query-wildcard.md#further-reading&quot;&gt;&lt;/a&gt;Further reading&lt;/h2&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://prometheus.io/docs/prometheus/latest/querying/basics/&quot;&gt;Prometheus Query documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>Apply a patch from a Github PR</title>
        <link href="blog/2020/12/apply-a-patch-from-a-github-pr/" />
        <updated>2020-12-04T09:23:00</updated>
        <id>https://kevin.gimbel.dev/blog/2020/12/apply-a-patch-from-a-github-pr/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;Ever found yourself needing that one fix from a PR on GitHub that hasn&amp;#8217;t been released yet? How can you get the code, for example a Magento fix, into your code base? Copy-paste it? That might work for small changes, but for large and complex changes copy-pasting is no solution. Luckily, we can use GitHub to generate a patch file, which can then be applied with either the&amp;nbsp;&lt;code&gt;git&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;patch&lt;/code&gt;&amp;nbsp;command.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;patch-file what?&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#patch-file-what&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;A patch file is a text file containing instructions on how to apply a change to files. If you run&amp;nbsp;&lt;code&gt;git diff&lt;/code&gt;&amp;nbsp;and see the changed files with&amp;nbsp;&lt;code&gt;+/-&lt;/code&gt;&amp;nbsp;in front of lines that were added (&lt;code&gt;+&lt;/code&gt;) or removed (&lt;code&gt;-&lt;/code&gt;) you are looking at a patch file.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Example code&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#example-code&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;For illustration purpose I created a example repo:&amp;nbsp;&lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example&quot;&gt;https://github.com/KevinGimbel/blog-patch-example&lt;/a&gt;.&lt;/p&gt;



&lt;p&gt;You can clone the main branch and then apply the patch from the&amp;nbsp;&lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example/pull/1&quot;&gt;Pull Request&lt;/a&gt;&amp;nbsp;to it, if you want to follow along.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Getting the patch file&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#getting-the-patch-file&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;First we will need to get the patch file. GitHub makes this easy, but for some reason hides it from us. You can¬†&lt;strong&gt;append .patch to the URL of any pull request to get the patch file&lt;/strong&gt;. So for the example above, open the URL¬†&lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example/pull/1.patch&quot;&gt;https://github.com/KevinGimbel/blog-patch-example/pull/1.patch&lt;/a&gt;¬†to see the plain text patch file.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;From 6da12536ff4da0efdabdf1a4dd55ded127fa247c 
Mon Sep 17 00:00:00 2001 
From: Kevin Gimbel &amp;lt;hallo@kevingimbel.com&gt; 
Date: Fri, 4 Dec 2020 16:31:30 +0100 
Subject: [PATCH] docs: add actual URL 

&lt;strong&gt;---&lt;/strong&gt; README.md | 2 +- 1 file changed, 
1 insertion(+), 1 deletion(-) 
diff --git a/README.md b/README.md 
index 0fe5e72..7f6398a 100644 
--- a/README.md 
+++ b/README.md 
&lt;strong&gt;@@ -2,4 +2,4 @@&lt;/strong&gt; 

This repo is part of a Blog Post on how to get and apply patch files from GitHub.com 

-You can read the full post here: ENTER_URL_HERE 
&#92; No newline at end of file 

+You can read the full post here: [https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/](https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/) 
&#92; No newline at end of file&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The patch file is both human and machine readable. Now to continue, get the patchfile!&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;Open a terminal and navigate to the repo you cloned earlier (&lt;code&gt;github.com/KevinGimbel/blog-patch-example&lt;/code&gt;)&lt;/li&gt;



&lt;li&gt;Download the patch file with&amp;nbsp;&lt;code&gt;wget&lt;/code&gt;:&lt;/li&gt;
&lt;/ol&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;$ wget &quot;https://github.com/KevinGimbel/blog-patch-example/pull/1.patch&quot;&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;This downloads a file named¬†&lt;code&gt;1.patch&lt;/code&gt;¬†into the current directory, which we can verify by running¬†&lt;code&gt;ls -l&lt;/code&gt;&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;ls -l 
total 16 
-rw-r--r--@ 1 kevingimbel staff 733 Dec 4 16:33 1.patch # üëà there it is 
-rw-r--r-- 1 kevingimbel staff 155 Dec 4 16:33 README.md&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;You can look at the file if you want to, it contains the same text as the example in this article.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Applying a patch with&amp;nbsp;&lt;code&gt;git&lt;/code&gt;&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#applying-a-patch-with-git&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;We can use&amp;nbsp;&lt;code&gt;git&lt;/code&gt;&amp;nbsp;to apply the patch. For manual patching git has the&amp;nbsp;&lt;code&gt;apply&lt;/code&gt;&amp;nbsp;command: If we want to test the changes to see if they can be applied but don&amp;#8217;t want to change any files yet, we can use the&amp;nbsp;&lt;code&gt;--check&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;-v&lt;/code&gt;&amp;nbsp;(verbose) flag:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;$ git apply -v --check 1.patch
Checking patch README.md...
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;To really apply the patch, we remove the¬†&lt;code&gt;--check&lt;/code&gt;¬†flag:&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;$ git apply -v 1.patch 
Checking patch README.md... Applied patch README.md cleanly.&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;Now check the¬†&lt;code&gt;README.md&lt;/code&gt;¬†file and you&amp;#8217;ll see the new content!&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;$ cat README.md 
# blog-patch-example 
This repo is part of a Blog Post on how to get and apply patch files from GitHub.com You can read the full post here: [https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/](https://kevingimbel.de/blog/2020/12/apply-patch-from-github-pr/)

&lt;/code&gt;&lt;/pre&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Patching without git&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#patching-without-git&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;p&gt;Sometimes you may not have git available, especially when patching software running on some server that &amp;#8211; for whatever reasons &amp;#8211; has no deployment process (no judging here!) or version control.&lt;/p&gt;



&lt;p&gt;Even without the&amp;nbsp;&lt;code&gt;git&lt;/code&gt;&amp;nbsp;command the patch can still be applied by using the&amp;nbsp;&lt;code&gt;patch&lt;/code&gt;&amp;nbsp;tool installed on most (all?) Linux systems. To do this, follow these steps:&lt;/p&gt;



&lt;ol&gt;
&lt;li&gt;Get the patch from the pull request by appending¬†&lt;code&gt;.patch&lt;/code&gt;¬†to the URL&lt;/li&gt;



&lt;li&gt;Apply the patch with the&amp;nbsp;&lt;code&gt;patch&lt;/code&gt;&amp;nbsp;command&lt;/li&gt;
&lt;/ol&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code class=&quot;&quot;&gt;$ patch -p 1 &amp;lt; filename.patch 

# To try out changes first, use `--dry-run` 
$ patch -p 1 --dry-run &amp;lt; filename.patch&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;And that&amp;#8217;s it for today! Feel free to create PRs in the repo&amp;nbsp;&lt;a href=&quot;https://github.com/KevinGimbel/blog-patch-example/&quot;&gt;https://github.com/KevinGimbel/blog-patch-example/&lt;/a&gt;&amp;nbsp;if you want to play around with patching.&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;Additional resources&lt;/h2&gt;



&lt;p&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2020/12/04-apply-patch-from-github-pr/index.md#additional-resources&quot;&gt;&lt;/a&gt;&lt;/p&gt;



&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://linux.die.net/man/1/patch&quot;&gt;patch man page&lt;/a&gt;&lt;/li&gt;



&lt;li&gt;&lt;a href=&quot;https://git-scm.com/docs/git-apply&quot;&gt;git apply documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    </entry>
    <entry>
        <title>TIL: Bash select</title>
        <link href="blog/2018/04/til-bash-select/" />
        <updated>2018-04-19T09:08:00</updated>
        <id>https://kevin.gimbel.dev/blog/2018/04/til-bash-select/</id>
        <content xml:lang="en" type="html">
&lt;p&gt;I was recently researching different bash prompts and stumbled upon an¬†&lt;a href=&quot;https://unix.stackexchange.com/a/193660/136550&quot;&gt;StackExchange answer&lt;/a&gt;¬†which explains the different prompt types (&lt;code&gt;PS1&lt;/code&gt;,¬†&lt;code&gt;PS2&lt;/code&gt;,¬†&lt;code&gt;PS3&lt;/code&gt;, and¬†&lt;code&gt;PS4&lt;/code&gt;). The answer explains how the PS3 prompt is used for commands like¬†&lt;code&gt;select&lt;/code&gt;. I did not know about select before, so that&amp;#8217;s the real  TIL here!&lt;/p&gt;



&lt;blockquote class=&quot;wp-block-quote&quot;&gt;
&lt;p&gt;[&amp;#8230;] PS3 is shown when the select command is waiting for input [&amp;#8230;]&lt;/p&gt;
&lt;/blockquote&gt;



&lt;p&gt;So the¬†&lt;code&gt;PS3&lt;/code&gt;¬†prompt is shown when a bash program is waiting for user input, and it turns out that the¬†&lt;code&gt;select&lt;/code&gt;¬†bash command is used for creating a &amp;#8220;choice&amp;#8221; UI in bash. So what does that mean and how does it work?&lt;/p&gt;



&lt;h2 class=&quot;wp-block-heading&quot;&gt;&lt;a href=&quot;https://github.com/KevinGimbel/kevingimbel.de/blob/main/src/_blog/2018/04/19-bash-select-options.md#asking-interactive-questions-in-bash&quot;&gt;&lt;/a&gt;Asking interactive questions in Bash&lt;/h2&gt;



&lt;p&gt;Let&amp;#8217;s assume we have a shell script called&amp;nbsp;&lt;code&gt;make-project&lt;/code&gt;&amp;nbsp;which bootstraps some project stuff, for example configuration files. We could provide the user with an option to choose a format from a list of available configuration formats like&amp;nbsp;&lt;code&gt;XML&lt;/code&gt;&amp;nbsp;or&amp;nbsp;&lt;code&gt;JSON&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;We can handle these options via shell arguments like&amp;nbsp;&lt;code&gt;make-project -format xml&lt;/code&gt;, but we could also ask questions interactively using&amp;nbsp;&lt;code&gt;select&lt;/code&gt;.&lt;/p&gt;



&lt;p&gt;The script looks like this.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;#!/bin/bash

# Default format
format=&quot;xml&quot;

# Ask a question
echo &quot;Which configuration format do you prefer?&quot;
# Create the &quot;UI&quot; with a choice option
select f in xml json; do
  format=$f
  # Break to end the select after something was selected
  break;
done

echo &quot;Format: $format&quot;&lt;/pre&gt;



&lt;p&gt;The&amp;nbsp;&lt;code&gt;select&lt;/code&gt;&amp;nbsp;function takes a variable name (&lt;code&gt;f&lt;/code&gt;&amp;nbsp;above) and a list of possible values (&lt;code&gt;xml json&lt;/code&gt;) which is seperated by spaces.&lt;/p&gt;



&lt;pre class=&quot;wp-block-preformatted&quot;&gt;select myvariable in value1 value2 value3; do
  # $myvariable will be value1, value2, or value3
  selectedValue = $myvariable
  break;
done&lt;/pre&gt;



&lt;p&gt;When our little&amp;nbsp;&lt;code&gt;make-project&lt;/code&gt;&amp;nbsp;script is run it would looks like this (in Bash 4.4 on Mac OS):&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;$ ./make-project.sh
Which configuration format do you prefer?
1) xml
2) json
#? _
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;The last line,&amp;nbsp;&lt;code&gt;#?&lt;/code&gt;, is the&amp;nbsp;&lt;code&gt;PS3&lt;/code&gt;&amp;nbsp;prompt and&amp;nbsp;&lt;code&gt;_&lt;/code&gt;&amp;nbsp;is the cursor position. The user can now enter a number (1 for&amp;nbsp;&lt;code&gt;xml&lt;/code&gt;&amp;nbsp;or 2 for&amp;nbsp;&lt;code&gt;json&lt;/code&gt;) and the selection would be captured and assigned to the&amp;nbsp;&lt;code&gt;format&lt;/code&gt;&amp;nbsp;variable in our script. If we add&amp;nbsp;&lt;code&gt;export PS3=&quot;Your answer: &quot;&lt;/code&gt;&amp;nbsp;to the script it will replace the default PS3 prompt for your script as shown below.&lt;/p&gt;



&lt;pre class=&quot;wp-block-code&quot;&gt;&lt;code&gt;$ ./make-project.sh
Which configuration format do you prefer?
1) xml
2) json
Your answer: _
&lt;/code&gt;&lt;/pre&gt;



&lt;p&gt;&lt;code&gt;select&lt;/code&gt;&amp;nbsp;is a clean and simple way to create a interactive UI! I tried the code with the&amp;nbsp;&lt;code&gt;zsh&lt;/code&gt;&amp;nbsp;and&amp;nbsp;&lt;code&gt;fish&lt;/code&gt;&amp;nbsp;shell and it looks the same.&lt;/p&gt;
</content>
    </entry>
</feed>